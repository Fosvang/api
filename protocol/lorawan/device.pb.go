// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: github.com/TheThingsNetwork/api/protocol/lorawan/device.proto

package lorawan // import "github.com/TheThingsNetwork/api/protocol/lorawan"

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"
import types "github.com/gogo/protobuf/types"

import github_com_TheThingsNetwork_ttn_core_types "github.com/TheThingsNetwork/ttn/core/types"

import context "golang.org/x/net/context"
import grpc "google.golang.org/grpc"

import strings "strings"
import reflect "reflect"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type DeviceIdentifier struct {
	// The AppEUI is a unique, 8 byte identifier for the application a device belongs to.
	AppEUI github_com_TheThingsNetwork_ttn_core_types.AppEUI `protobuf:"bytes,1,opt,name=app_eui,json=appEui,proto3,customtype=github.com/TheThingsNetwork/ttn/core/types.AppEUI" json:"app_eui"`
	// The DevEUI is a unique, 8 byte identifier for the device.
	DevEUI               github_com_TheThingsNetwork_ttn_core_types.DevEUI `protobuf:"bytes,2,opt,name=dev_eui,json=devEui,proto3,customtype=github.com/TheThingsNetwork/ttn/core/types.DevEUI" json:"dev_eui"`
	XXX_NoUnkeyedLiteral struct{}                                          `json:"-"`
	XXX_sizecache        int32                                             `json:"-"`
}

func (m *DeviceIdentifier) Reset()      { *m = DeviceIdentifier{} }
func (*DeviceIdentifier) ProtoMessage() {}
func (*DeviceIdentifier) Descriptor() ([]byte, []int) {
	return fileDescriptor_device_f8bb24d14d8a73ce, []int{0}
}
func (m *DeviceIdentifier) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeviceIdentifier) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeviceIdentifier.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *DeviceIdentifier) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeviceIdentifier.Merge(dst, src)
}
func (m *DeviceIdentifier) XXX_Size() int {
	return m.Size()
}
func (m *DeviceIdentifier) XXX_DiscardUnknown() {
	xxx_messageInfo_DeviceIdentifier.DiscardUnknown(m)
}

var xxx_messageInfo_DeviceIdentifier proto.InternalMessageInfo

type Device struct {
	// The AppEUI is a unique, 8 byte identifier for the application a device belongs to.
	AppEUI github_com_TheThingsNetwork_ttn_core_types.AppEUI `protobuf:"bytes,1,opt,name=app_eui,json=appEui,proto3,customtype=github.com/TheThingsNetwork/ttn/core/types.AppEUI" json:"app_eui"`
	// The DevEUI is a unique, 8 byte identifier for the device.
	DevEUI github_com_TheThingsNetwork_ttn_core_types.DevEUI `protobuf:"bytes,2,opt,name=dev_eui,json=devEui,proto3,customtype=github.com/TheThingsNetwork/ttn/core/types.DevEUI" json:"dev_eui"`
	// The AppID is a unique identifier for the application a device belongs to. It can contain lowercase letters, numbers, - and _.
	AppID string `protobuf:"bytes,3,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
	// The DevID is a unique identifier for the device. It can contain lowercase letters, numbers, - and _.
	DevID string `protobuf:"bytes,4,opt,name=dev_id,json=devId,proto3" json:"dev_id,omitempty"`
	// The DevAddr is a dynamic, 4 byte session address for the device.
	DevAddr *github_com_TheThingsNetwork_ttn_core_types.DevAddr `protobuf:"bytes,5,opt,name=dev_addr,json=devAddr,proto3,customtype=github.com/TheThingsNetwork/ttn/core/types.DevAddr" json:"dev_addr,omitempty"`
	// The NwkSKey is a 16 byte session key that is known by the device and the network. It is used for routing and MAC related functionality.
	// This key is negotiated during the OTAA join procedure, or statically configured using ABP.
	NwkSKey *github_com_TheThingsNetwork_ttn_core_types.NwkSKey `protobuf:"bytes,6,opt,name=nwk_s_key,json=nwkSKey,proto3,customtype=github.com/TheThingsNetwork/ttn/core/types.NwkSKey" json:"nwk_s_key,omitempty"`
	// The AppSKey is a 16 byte session key that is known by the device and the application. It is used for payload encryption.
	// This key is negotiated during the OTAA join procedure, or statically configured using ABP.
	AppSKey *github_com_TheThingsNetwork_ttn_core_types.AppSKey `protobuf:"bytes,7,opt,name=app_s_key,json=appSKey,proto3,customtype=github.com/TheThingsNetwork/ttn/core/types.AppSKey" json:"app_s_key,omitempty"`
	// The AppKey is a 16 byte static key that is known by the device and the application. It is used for negotiating session keys (OTAA).
	AppKey *github_com_TheThingsNetwork_ttn_core_types.AppKey `protobuf:"bytes,8,opt,name=app_key,json=appKey,proto3,customtype=github.com/TheThingsNetwork/ttn/core/types.AppKey" json:"app_key,omitempty"`
	// FCntUp is the uplink frame counter for a device session.
	FCntUp uint32 `protobuf:"varint,9,opt,name=f_cnt_up,json=fCntUp,proto3" json:"f_cnt_up,omitempty"`
	// FCntDown is the downlink frame counter for a device session.
	FCntDown uint32 `protobuf:"varint,10,opt,name=f_cnt_down,json=fCntDown,proto3" json:"f_cnt_down,omitempty"`
	// The DisableFCntCheck option disables the frame counter check. Disabling this makes the device vulnerable to replay attacks, but makes ABP slightly easier.
	DisableFCntCheck bool `protobuf:"varint,11,opt,name=disable_f_cnt_check,json=disableFCntCheck,proto3" json:"disable_f_cnt_check,omitempty"`
	// The Uses32BitFCnt option indicates that the device keeps track of full 32 bit frame counters. As only the 16 lsb are actually transmitted, the 16 msb will have to be inferred.
	Uses32BitFCnt bool `protobuf:"varint,12,opt,name=uses32_bit_f_cnt,json=uses32BitFCnt,proto3" json:"uses32_bit_f_cnt,omitempty"`
	// The ActivationContstraints are used to allocate a device address for a device (comma-separated).
	// There are different prefixes for `otaa`, `abp`, `world`, `local`, `private`, `testing`.
	ActivationConstraints string `protobuf:"bytes,13,opt,name=activation_constraints,json=activationConstraints,proto3" json:"activation_constraints,omitempty"`
	// The DevNonces that have been used in joins. This field is read-only. Reset the nonces by changing the AppKey.
	UsedDevNonces []github_com_TheThingsNetwork_ttn_core_types.DevNonce `protobuf:"bytes,14,rep,name=used_dev_nonces,json=usedDevNonces,customtype=github.com/TheThingsNetwork/ttn/core/types.DevNonce" json:"used_dev_nonces,omitempty"`
	// The AppNonces that have been used in joins. This field is read-only. Reset the nonces by changing the AppKey.
	UsedAppNonces []github_com_TheThingsNetwork_ttn_core_types.AppNonce `protobuf:"bytes,15,rep,name=used_app_nonces,json=usedAppNonces,customtype=github.com/TheThingsNetwork/ttn/core/types.AppNonce" json:"used_app_nonces,omitempty"`
	// When the device was last seen (Unix nanoseconds)
	LastSeen             int64    `protobuf:"varint,21,opt,name=last_seen,json=lastSeen,proto3" json:"last_seen,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Device) Reset()      { *m = Device{} }
func (*Device) ProtoMessage() {}
func (*Device) Descriptor() ([]byte, []int) {
	return fileDescriptor_device_f8bb24d14d8a73ce, []int{1}
}
func (m *Device) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Device) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Device.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Device) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Device.Merge(dst, src)
}
func (m *Device) XXX_Size() int {
	return m.Size()
}
func (m *Device) XXX_DiscardUnknown() {
	xxx_messageInfo_Device.DiscardUnknown(m)
}

var xxx_messageInfo_Device proto.InternalMessageInfo

func (m *Device) GetAppID() string {
	if m != nil {
		return m.AppID
	}
	return ""
}

func (m *Device) GetDevID() string {
	if m != nil {
		return m.DevID
	}
	return ""
}

func (m *Device) GetFCntUp() uint32 {
	if m != nil {
		return m.FCntUp
	}
	return 0
}

func (m *Device) GetFCntDown() uint32 {
	if m != nil {
		return m.FCntDown
	}
	return 0
}

func (m *Device) GetDisableFCntCheck() bool {
	if m != nil {
		return m.DisableFCntCheck
	}
	return false
}

func (m *Device) GetUses32BitFCnt() bool {
	if m != nil {
		return m.Uses32BitFCnt
	}
	return false
}

func (m *Device) GetActivationConstraints() string {
	if m != nil {
		return m.ActivationConstraints
	}
	return ""
}

func (m *Device) GetLastSeen() int64 {
	if m != nil {
		return m.LastSeen
	}
	return 0
}

func init() {
	proto.RegisterType((*DeviceIdentifier)(nil), "lorawan.DeviceIdentifier")
	proto.RegisterType((*Device)(nil), "lorawan.Device")
}
func (this *DeviceIdentifier) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*DeviceIdentifier)
	if !ok {
		that2, ok := that.(DeviceIdentifier)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *DeviceIdentifier")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *DeviceIdentifier but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *DeviceIdentifier but is not nil && this == nil")
	}
	if !this.AppEUI.Equal(that1.AppEUI) {
		return fmt.Errorf("AppEUI this(%v) Not Equal that(%v)", this.AppEUI, that1.AppEUI)
	}
	if !this.DevEUI.Equal(that1.DevEUI) {
		return fmt.Errorf("DevEUI this(%v) Not Equal that(%v)", this.DevEUI, that1.DevEUI)
	}
	return nil
}
func (this *DeviceIdentifier) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DeviceIdentifier)
	if !ok {
		that2, ok := that.(DeviceIdentifier)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AppEUI.Equal(that1.AppEUI) {
		return false
	}
	if !this.DevEUI.Equal(that1.DevEUI) {
		return false
	}
	return true
}
func (this *Device) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*Device)
	if !ok {
		that2, ok := that.(Device)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *Device")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *Device but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *Device but is not nil && this == nil")
	}
	if !this.AppEUI.Equal(that1.AppEUI) {
		return fmt.Errorf("AppEUI this(%v) Not Equal that(%v)", this.AppEUI, that1.AppEUI)
	}
	if !this.DevEUI.Equal(that1.DevEUI) {
		return fmt.Errorf("DevEUI this(%v) Not Equal that(%v)", this.DevEUI, that1.DevEUI)
	}
	if this.AppID != that1.AppID {
		return fmt.Errorf("AppID this(%v) Not Equal that(%v)", this.AppID, that1.AppID)
	}
	if this.DevID != that1.DevID {
		return fmt.Errorf("DevID this(%v) Not Equal that(%v)", this.DevID, that1.DevID)
	}
	if that1.DevAddr == nil {
		if this.DevAddr != nil {
			return fmt.Errorf("this.DevAddr != nil && that1.DevAddr == nil")
		}
	} else if !this.DevAddr.Equal(*that1.DevAddr) {
		return fmt.Errorf("DevAddr this(%v) Not Equal that(%v)", this.DevAddr, that1.DevAddr)
	}
	if that1.NwkSKey == nil {
		if this.NwkSKey != nil {
			return fmt.Errorf("this.NwkSKey != nil && that1.NwkSKey == nil")
		}
	} else if !this.NwkSKey.Equal(*that1.NwkSKey) {
		return fmt.Errorf("NwkSKey this(%v) Not Equal that(%v)", this.NwkSKey, that1.NwkSKey)
	}
	if that1.AppSKey == nil {
		if this.AppSKey != nil {
			return fmt.Errorf("this.AppSKey != nil && that1.AppSKey == nil")
		}
	} else if !this.AppSKey.Equal(*that1.AppSKey) {
		return fmt.Errorf("AppSKey this(%v) Not Equal that(%v)", this.AppSKey, that1.AppSKey)
	}
	if that1.AppKey == nil {
		if this.AppKey != nil {
			return fmt.Errorf("this.AppKey != nil && that1.AppKey == nil")
		}
	} else if !this.AppKey.Equal(*that1.AppKey) {
		return fmt.Errorf("AppKey this(%v) Not Equal that(%v)", this.AppKey, that1.AppKey)
	}
	if this.FCntUp != that1.FCntUp {
		return fmt.Errorf("FCntUp this(%v) Not Equal that(%v)", this.FCntUp, that1.FCntUp)
	}
	if this.FCntDown != that1.FCntDown {
		return fmt.Errorf("FCntDown this(%v) Not Equal that(%v)", this.FCntDown, that1.FCntDown)
	}
	if this.DisableFCntCheck != that1.DisableFCntCheck {
		return fmt.Errorf("DisableFCntCheck this(%v) Not Equal that(%v)", this.DisableFCntCheck, that1.DisableFCntCheck)
	}
	if this.Uses32BitFCnt != that1.Uses32BitFCnt {
		return fmt.Errorf("Uses32BitFCnt this(%v) Not Equal that(%v)", this.Uses32BitFCnt, that1.Uses32BitFCnt)
	}
	if this.ActivationConstraints != that1.ActivationConstraints {
		return fmt.Errorf("ActivationConstraints this(%v) Not Equal that(%v)", this.ActivationConstraints, that1.ActivationConstraints)
	}
	if len(this.UsedDevNonces) != len(that1.UsedDevNonces) {
		return fmt.Errorf("UsedDevNonces this(%v) Not Equal that(%v)", len(this.UsedDevNonces), len(that1.UsedDevNonces))
	}
	for i := range this.UsedDevNonces {
		if !this.UsedDevNonces[i].Equal(that1.UsedDevNonces[i]) {
			return fmt.Errorf("UsedDevNonces this[%v](%v) Not Equal that[%v](%v)", i, this.UsedDevNonces[i], i, that1.UsedDevNonces[i])
		}
	}
	if len(this.UsedAppNonces) != len(that1.UsedAppNonces) {
		return fmt.Errorf("UsedAppNonces this(%v) Not Equal that(%v)", len(this.UsedAppNonces), len(that1.UsedAppNonces))
	}
	for i := range this.UsedAppNonces {
		if !this.UsedAppNonces[i].Equal(that1.UsedAppNonces[i]) {
			return fmt.Errorf("UsedAppNonces this[%v](%v) Not Equal that[%v](%v)", i, this.UsedAppNonces[i], i, that1.UsedAppNonces[i])
		}
	}
	if this.LastSeen != that1.LastSeen {
		return fmt.Errorf("LastSeen this(%v) Not Equal that(%v)", this.LastSeen, that1.LastSeen)
	}
	return nil
}
func (this *Device) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Device)
	if !ok {
		that2, ok := that.(Device)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AppEUI.Equal(that1.AppEUI) {
		return false
	}
	if !this.DevEUI.Equal(that1.DevEUI) {
		return false
	}
	if this.AppID != that1.AppID {
		return false
	}
	if this.DevID != that1.DevID {
		return false
	}
	if that1.DevAddr == nil {
		if this.DevAddr != nil {
			return false
		}
	} else if !this.DevAddr.Equal(*that1.DevAddr) {
		return false
	}
	if that1.NwkSKey == nil {
		if this.NwkSKey != nil {
			return false
		}
	} else if !this.NwkSKey.Equal(*that1.NwkSKey) {
		return false
	}
	if that1.AppSKey == nil {
		if this.AppSKey != nil {
			return false
		}
	} else if !this.AppSKey.Equal(*that1.AppSKey) {
		return false
	}
	if that1.AppKey == nil {
		if this.AppKey != nil {
			return false
		}
	} else if !this.AppKey.Equal(*that1.AppKey) {
		return false
	}
	if this.FCntUp != that1.FCntUp {
		return false
	}
	if this.FCntDown != that1.FCntDown {
		return false
	}
	if this.DisableFCntCheck != that1.DisableFCntCheck {
		return false
	}
	if this.Uses32BitFCnt != that1.Uses32BitFCnt {
		return false
	}
	if this.ActivationConstraints != that1.ActivationConstraints {
		return false
	}
	if len(this.UsedDevNonces) != len(that1.UsedDevNonces) {
		return false
	}
	for i := range this.UsedDevNonces {
		if !this.UsedDevNonces[i].Equal(that1.UsedDevNonces[i]) {
			return false
		}
	}
	if len(this.UsedAppNonces) != len(that1.UsedAppNonces) {
		return false
	}
	for i := range this.UsedAppNonces {
		if !this.UsedAppNonces[i].Equal(that1.UsedAppNonces[i]) {
			return false
		}
	}
	if this.LastSeen != that1.LastSeen {
		return false
	}
	return true
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for DeviceManager service

type DeviceManagerClient interface {
	GetDevice(ctx context.Context, in *DeviceIdentifier, opts ...grpc.CallOption) (*Device, error)
	SetDevice(ctx context.Context, in *Device, opts ...grpc.CallOption) (*types.Empty, error)
	DeleteDevice(ctx context.Context, in *DeviceIdentifier, opts ...grpc.CallOption) (*types.Empty, error)
}

type deviceManagerClient struct {
	cc *grpc.ClientConn
}

func NewDeviceManagerClient(cc *grpc.ClientConn) DeviceManagerClient {
	return &deviceManagerClient{cc}
}

func (c *deviceManagerClient) GetDevice(ctx context.Context, in *DeviceIdentifier, opts ...grpc.CallOption) (*Device, error) {
	out := new(Device)
	err := c.cc.Invoke(ctx, "/lorawan.DeviceManager/GetDevice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceManagerClient) SetDevice(ctx context.Context, in *Device, opts ...grpc.CallOption) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.cc.Invoke(ctx, "/lorawan.DeviceManager/SetDevice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceManagerClient) DeleteDevice(ctx context.Context, in *DeviceIdentifier, opts ...grpc.CallOption) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.cc.Invoke(ctx, "/lorawan.DeviceManager/DeleteDevice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for DeviceManager service

type DeviceManagerServer interface {
	GetDevice(context.Context, *DeviceIdentifier) (*Device, error)
	SetDevice(context.Context, *Device) (*types.Empty, error)
	DeleteDevice(context.Context, *DeviceIdentifier) (*types.Empty, error)
}

func RegisterDeviceManagerServer(s *grpc.Server, srv DeviceManagerServer) {
	s.RegisterService(&_DeviceManager_serviceDesc, srv)
}

func _DeviceManager_GetDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeviceIdentifier)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceManagerServer).GetDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lorawan.DeviceManager/GetDevice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceManagerServer).GetDevice(ctx, req.(*DeviceIdentifier))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceManager_SetDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Device)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceManagerServer).SetDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lorawan.DeviceManager/SetDevice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceManagerServer).SetDevice(ctx, req.(*Device))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceManager_DeleteDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeviceIdentifier)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceManagerServer).DeleteDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lorawan.DeviceManager/DeleteDevice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceManagerServer).DeleteDevice(ctx, req.(*DeviceIdentifier))
	}
	return interceptor(ctx, in, info, handler)
}

var _DeviceManager_serviceDesc = grpc.ServiceDesc{
	ServiceName: "lorawan.DeviceManager",
	HandlerType: (*DeviceManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetDevice",
			Handler:    _DeviceManager_GetDevice_Handler,
		},
		{
			MethodName: "SetDevice",
			Handler:    _DeviceManager_SetDevice_Handler,
		},
		{
			MethodName: "DeleteDevice",
			Handler:    _DeviceManager_DeleteDevice_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "github.com/TheThingsNetwork/api/protocol/lorawan/device.proto",
}

func (m *DeviceIdentifier) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeviceIdentifier) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintDevice(dAtA, i, uint64(m.AppEUI.Size()))
	n1, err := m.AppEUI.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n1
	dAtA[i] = 0x12
	i++
	i = encodeVarintDevice(dAtA, i, uint64(m.DevEUI.Size()))
	n2, err := m.DevEUI.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n2
	return i, nil
}

func (m *Device) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Device) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintDevice(dAtA, i, uint64(m.AppEUI.Size()))
	n3, err := m.AppEUI.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n3
	dAtA[i] = 0x12
	i++
	i = encodeVarintDevice(dAtA, i, uint64(m.DevEUI.Size()))
	n4, err := m.DevEUI.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n4
	if len(m.AppID) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintDevice(dAtA, i, uint64(len(m.AppID)))
		i += copy(dAtA[i:], m.AppID)
	}
	if len(m.DevID) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintDevice(dAtA, i, uint64(len(m.DevID)))
		i += copy(dAtA[i:], m.DevID)
	}
	if m.DevAddr != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintDevice(dAtA, i, uint64(m.DevAddr.Size()))
		n5, err := m.DevAddr.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	if m.NwkSKey != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintDevice(dAtA, i, uint64(m.NwkSKey.Size()))
		n6, err := m.NwkSKey.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	if m.AppSKey != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintDevice(dAtA, i, uint64(m.AppSKey.Size()))
		n7, err := m.AppSKey.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n7
	}
	if m.AppKey != nil {
		dAtA[i] = 0x42
		i++
		i = encodeVarintDevice(dAtA, i, uint64(m.AppKey.Size()))
		n8, err := m.AppKey.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n8
	}
	if m.FCntUp != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintDevice(dAtA, i, uint64(m.FCntUp))
	}
	if m.FCntDown != 0 {
		dAtA[i] = 0x50
		i++
		i = encodeVarintDevice(dAtA, i, uint64(m.FCntDown))
	}
	if m.DisableFCntCheck {
		dAtA[i] = 0x58
		i++
		if m.DisableFCntCheck {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Uses32BitFCnt {
		dAtA[i] = 0x60
		i++
		if m.Uses32BitFCnt {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.ActivationConstraints) > 0 {
		dAtA[i] = 0x6a
		i++
		i = encodeVarintDevice(dAtA, i, uint64(len(m.ActivationConstraints)))
		i += copy(dAtA[i:], m.ActivationConstraints)
	}
	if len(m.UsedDevNonces) > 0 {
		for _, msg := range m.UsedDevNonces {
			dAtA[i] = 0x72
			i++
			i = encodeVarintDevice(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.UsedAppNonces) > 0 {
		for _, msg := range m.UsedAppNonces {
			dAtA[i] = 0x7a
			i++
			i = encodeVarintDevice(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.LastSeen != 0 {
		dAtA[i] = 0xa8
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintDevice(dAtA, i, uint64(m.LastSeen))
	}
	return i, nil
}

func encodeVarintDevice(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *DeviceIdentifier) Size() (n int) {
	var l int
	_ = l
	l = m.AppEUI.Size()
	n += 1 + l + sovDevice(uint64(l))
	l = m.DevEUI.Size()
	n += 1 + l + sovDevice(uint64(l))
	return n
}

func (m *Device) Size() (n int) {
	var l int
	_ = l
	l = m.AppEUI.Size()
	n += 1 + l + sovDevice(uint64(l))
	l = m.DevEUI.Size()
	n += 1 + l + sovDevice(uint64(l))
	l = len(m.AppID)
	if l > 0 {
		n += 1 + l + sovDevice(uint64(l))
	}
	l = len(m.DevID)
	if l > 0 {
		n += 1 + l + sovDevice(uint64(l))
	}
	if m.DevAddr != nil {
		l = m.DevAddr.Size()
		n += 1 + l + sovDevice(uint64(l))
	}
	if m.NwkSKey != nil {
		l = m.NwkSKey.Size()
		n += 1 + l + sovDevice(uint64(l))
	}
	if m.AppSKey != nil {
		l = m.AppSKey.Size()
		n += 1 + l + sovDevice(uint64(l))
	}
	if m.AppKey != nil {
		l = m.AppKey.Size()
		n += 1 + l + sovDevice(uint64(l))
	}
	if m.FCntUp != 0 {
		n += 1 + sovDevice(uint64(m.FCntUp))
	}
	if m.FCntDown != 0 {
		n += 1 + sovDevice(uint64(m.FCntDown))
	}
	if m.DisableFCntCheck {
		n += 2
	}
	if m.Uses32BitFCnt {
		n += 2
	}
	l = len(m.ActivationConstraints)
	if l > 0 {
		n += 1 + l + sovDevice(uint64(l))
	}
	if len(m.UsedDevNonces) > 0 {
		for _, e := range m.UsedDevNonces {
			l = e.Size()
			n += 1 + l + sovDevice(uint64(l))
		}
	}
	if len(m.UsedAppNonces) > 0 {
		for _, e := range m.UsedAppNonces {
			l = e.Size()
			n += 1 + l + sovDevice(uint64(l))
		}
	}
	if m.LastSeen != 0 {
		n += 2 + sovDevice(uint64(m.LastSeen))
	}
	return n
}

func sovDevice(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozDevice(x uint64) (n int) {
	return sovDevice(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *DeviceIdentifier) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DeviceIdentifier{`,
		`AppEUI:` + fmt.Sprintf("%v", this.AppEUI) + `,`,
		`DevEUI:` + fmt.Sprintf("%v", this.DevEUI) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Device) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Device{`,
		`AppEUI:` + fmt.Sprintf("%v", this.AppEUI) + `,`,
		`DevEUI:` + fmt.Sprintf("%v", this.DevEUI) + `,`,
		`AppID:` + fmt.Sprintf("%v", this.AppID) + `,`,
		`DevID:` + fmt.Sprintf("%v", this.DevID) + `,`,
		`DevAddr:` + fmt.Sprintf("%v", this.DevAddr) + `,`,
		`NwkSKey:` + fmt.Sprintf("%v", this.NwkSKey) + `,`,
		`AppSKey:` + fmt.Sprintf("%v", this.AppSKey) + `,`,
		`AppKey:` + fmt.Sprintf("%v", this.AppKey) + `,`,
		`FCntUp:` + fmt.Sprintf("%v", this.FCntUp) + `,`,
		`FCntDown:` + fmt.Sprintf("%v", this.FCntDown) + `,`,
		`DisableFCntCheck:` + fmt.Sprintf("%v", this.DisableFCntCheck) + `,`,
		`Uses32BitFCnt:` + fmt.Sprintf("%v", this.Uses32BitFCnt) + `,`,
		`ActivationConstraints:` + fmt.Sprintf("%v", this.ActivationConstraints) + `,`,
		`UsedDevNonces:` + fmt.Sprintf("%v", this.UsedDevNonces) + `,`,
		`UsedAppNonces:` + fmt.Sprintf("%v", this.UsedAppNonces) + `,`,
		`LastSeen:` + fmt.Sprintf("%v", this.LastSeen) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringDevice(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *DeviceIdentifier) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDevice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeviceIdentifier: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeviceIdentifier: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppEUI", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDevice
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.AppEUI.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DevEUI", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDevice
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.DevEUI.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDevice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDevice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Device) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDevice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Device: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Device: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppEUI", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDevice
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.AppEUI.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DevEUI", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDevice
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.DevEUI.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDevice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AppID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DevID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDevice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DevID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DevAddr", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDevice
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v github_com_TheThingsNetwork_ttn_core_types.DevAddr
			m.DevAddr = &v
			if err := m.DevAddr.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NwkSKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDevice
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v github_com_TheThingsNetwork_ttn_core_types.NwkSKey
			m.NwkSKey = &v
			if err := m.NwkSKey.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppSKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDevice
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v github_com_TheThingsNetwork_ttn_core_types.AppSKey
			m.AppSKey = &v
			if err := m.AppSKey.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDevice
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v github_com_TheThingsNetwork_ttn_core_types.AppKey
			m.AppKey = &v
			if err := m.AppKey.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FCntUp", wireType)
			}
			m.FCntUp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FCntUp |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FCntDown", wireType)
			}
			m.FCntDown = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FCntDown |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisableFCntCheck", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DisableFCntCheck = bool(v != 0)
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uses32BitFCnt", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Uses32BitFCnt = bool(v != 0)
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActivationConstraints", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDevice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ActivationConstraints = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UsedDevNonces", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDevice
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v github_com_TheThingsNetwork_ttn_core_types.DevNonce
			m.UsedDevNonces = append(m.UsedDevNonces, v)
			if err := m.UsedDevNonces[len(m.UsedDevNonces)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UsedAppNonces", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDevice
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v github_com_TheThingsNetwork_ttn_core_types.AppNonce
			m.UsedAppNonces = append(m.UsedAppNonces, v)
			if err := m.UsedAppNonces[len(m.UsedAppNonces)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 21:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastSeen", wireType)
			}
			m.LastSeen = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastSeen |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDevice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDevice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipDevice(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowDevice
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDevice
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDevice
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthDevice
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowDevice
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipDevice(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthDevice = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowDevice   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("github.com/TheThingsNetwork/api/protocol/lorawan/device.proto", fileDescriptor_device_f8bb24d14d8a73ce)
}

var fileDescriptor_device_f8bb24d14d8a73ce = []byte{
	// 744 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xd4, 0x55, 0x4f, 0x8f, 0xe3, 0x34,
	0x14, 0x1f, 0xef, 0x30, 0xfd, 0x63, 0x66, 0x98, 0x91, 0xd1, 0xae, 0xc2, 0x2c, 0x4a, 0xab, 0x15,
	0x12, 0xe5, 0xb0, 0x09, 0xcc, 0xb0, 0xec, 0x89, 0x43, 0xfa, 0x07, 0x54, 0x01, 0x55, 0xc9, 0xec,
	0x0a, 0x09, 0x21, 0x45, 0x6e, 0xfc, 0x9a, 0x5a, 0xed, 0xda, 0x56, 0xe2, 0xb4, 0xea, 0x8d, 0x8f,
	0xc0, 0xc7, 0x40, 0x7c, 0x04, 0x6e, 0xdc, 0xf6, 0x84, 0x38, 0xa2, 0x39, 0x54, 0xbb, 0xe5, 0x53,
	0x70, 0x43, 0x8e, 0x53, 0x3a, 0xaa, 0x04, 0xa8, 0xbd, 0x71, 0x7b, 0x7e, 0xbf, 0xdf, 0xfb, 0xfd,
	0xfc, 0x6c, 0xe7, 0x05, 0x7f, 0x9a, 0x70, 0x3d, 0xc9, 0x47, 0x5e, 0x2c, 0x5f, 0xf8, 0xcf, 0x26,
	0xf0, 0x6c, 0xc2, 0x45, 0x92, 0x0d, 0x40, 0x2f, 0x64, 0x3a, 0xf5, 0xa9, 0xe2, 0xbe, 0x4a, 0xa5,
	0x96, 0xb1, 0x9c, 0xf9, 0x33, 0x99, 0xd2, 0x05, 0x15, 0x3e, 0x83, 0x39, 0x8f, 0xc1, 0x2b, 0xf2,
	0xa4, 0x5a, 0x66, 0x2f, 0x1f, 0x26, 0x52, 0x26, 0x33, 0xb0, 0xf4, 0x51, 0x3e, 0xf6, 0xe1, 0x85,
	0xd2, 0x4b, 0xcb, 0xba, 0x7c, 0x7c, 0xc7, 0x24, 0x91, 0x89, 0xdc, 0xb2, 0xcc, 0xaa, 0x58, 0x14,
	0x91, 0xa5, 0x3f, 0xfa, 0x15, 0xe1, 0x8b, 0x6e, 0xe1, 0xd2, 0x67, 0x20, 0x34, 0x1f, 0x73, 0x48,
	0xc9, 0x77, 0xb8, 0x4a, 0x95, 0x8a, 0x20, 0xe7, 0x0e, 0x6a, 0xa2, 0xd6, 0x69, 0xbb, 0xf3, 0x72,
	0xd5, 0x38, 0xba, 0x5d, 0x35, 0x3e, 0xfa, 0xb7, 0x0e, 0xb4, 0x16, 0x7e, 0x2c, 0x53, 0xf0, 0xf5,
	0x52, 0x41, 0xe6, 0x05, 0x4a, 0xf5, 0x9e, 0xf7, 0xd7, 0xab, 0x46, 0xc5, 0x46, 0x61, 0x85, 0x2a,
	0xd5, 0xcb, 0xb9, 0x51, 0x67, 0x30, 0x2f, 0xd4, 0xef, 0x1d, 0xac, 0xde, 0x85, 0x79, 0xa9, 0x6e,
	0xa3, 0xb0, 0xc2, 0x60, 0xde, 0xcb, 0xf9, 0xa3, 0x3f, 0xab, 0xb8, 0x62, 0x1b, 0xfa, 0x3f, 0xb7,
	0x41, 0x9a, 0xd8, 0xf8, 0x44, 0x9c, 0x39, 0xc7, 0x4d, 0xd4, 0xaa, 0xb7, 0xeb, 0xeb, 0x55, 0xe3,
	0x24, 0x50, 0xaa, 0xdf, 0x0d, 0x4f, 0xa8, 0x52, 0x7d, 0x66, 0x18, 0xc6, 0x9f, 0x33, 0xe7, 0x8d,
	0x2d, 0xa3, 0x0b, 0x73, 0xc3, 0x60, 0x30, 0xef, 0x33, 0xf2, 0x35, 0xae, 0x19, 0x06, 0x65, 0x2c,
	0x75, 0x4e, 0x8a, 0x2d, 0x7e, 0x72, 0xbb, 0x6a, 0x5c, 0xed, 0xb7, 0xbd, 0x80, 0xb1, 0x34, 0x34,
	0x9d, 0x9a, 0x80, 0x84, 0xb8, 0x2e, 0x16, 0xd3, 0x28, 0x8b, 0xa6, 0xb0, 0x74, 0x2a, 0x07, 0x69,
	0x0e, 0x16, 0xd3, 0x9b, 0x2f, 0x60, 0x19, 0x56, 0x85, 0x0d, 0x8c, 0xa6, 0x69, 0xd5, 0x6a, 0x56,
	0x0f, 0xd2, 0x0c, 0x94, 0xb2, 0x9a, 0xd4, 0x06, 0x64, 0x60, 0xaf, 0xde, 0x28, 0xd6, 0x0a, 0xc5,
	0x27, 0xfb, 0x5f, 0xbb, 0x11, 0x34, 0x97, 0x60, 0xf4, 0x1c, 0x5c, 0x1b, 0x47, 0xb1, 0xd0, 0x51,
	0xae, 0x9c, 0x7a, 0x13, 0xb5, 0xce, 0xc2, 0xca, 0xb8, 0x23, 0xf4, 0x73, 0x45, 0xde, 0xc5, 0xd8,
	0x22, 0x4c, 0x2e, 0x84, 0x83, 0x0b, 0xac, 0x66, 0xb0, 0xae, 0x5c, 0x08, 0xf2, 0x18, 0xbf, 0xcd,
	0x78, 0x46, 0x47, 0x33, 0x88, 0x2c, 0x2b, 0x9e, 0x40, 0x3c, 0x75, 0xde, 0x6c, 0xa2, 0x56, 0x2d,
	0xbc, 0x28, 0xa1, 0xcf, 0x3a, 0x42, 0x77, 0x4c, 0x9e, 0xbc, 0x8f, 0x2f, 0xf2, 0x0c, 0xb2, 0xeb,
	0xab, 0x68, 0xc4, 0xb5, 0xad, 0x70, 0x4e, 0x0b, 0xee, 0x99, 0xcd, 0xb7, 0xb9, 0x36, 0x6c, 0xf2,
	0x04, 0x3f, 0xa0, 0xb1, 0xe6, 0x73, 0xaa, 0xb9, 0x14, 0x51, 0x2c, 0x45, 0xa6, 0x53, 0xca, 0x85,
	0xce, 0x9c, 0x33, 0xf3, 0x18, 0xc2, 0xfb, 0x5b, 0xb4, 0xb3, 0x05, 0x49, 0x84, 0xcf, 0xf3, 0x0c,
	0x58, 0x64, 0x9e, 0x85, 0x90, 0x22, 0x86, 0xcc, 0x79, 0xab, 0x79, 0xdc, 0x3a, 0x6d, 0x3f, 0xbd,
	0x5d, 0x35, 0xae, 0xf7, 0x7b, 0x18, 0x03, 0x53, 0x5f, 0xec, 0x8b, 0x6d, 0x56, 0x5b, 0x03, 0x73,
	0xf8, 0xa5, 0xc1, 0xf9, 0x41, 0x06, 0x81, 0x52, 0x77, 0x0c, 0x36, 0xab, 0x8c, 0x3c, 0xc4, 0xf5,
	0x19, 0xcd, 0x74, 0x94, 0x01, 0x08, 0xe7, 0x7e, 0x13, 0xb5, 0x8e, 0xc3, 0x9a, 0x49, 0xdc, 0x00,
	0x88, 0xab, 0x5f, 0x10, 0x3e, 0xb3, 0xdf, 0xfe, 0x57, 0x54, 0xd0, 0x04, 0x52, 0xf2, 0x14, 0xd7,
	0x3f, 0x07, 0x5d, 0xce, 0x83, 0x77, 0xbc, 0x72, 0x82, 0x7a, 0xbb, 0x13, 0xef, 0xf2, 0x7c, 0x07,
	0x22, 0x1f, 0xe3, 0xfa, 0xcd, 0xdf, 0x85, 0xbb, 0xe8, 0xe5, 0x03, 0xcf, 0x8e, 0x60, 0x6f, 0x33,
	0x5c, 0xbd, 0x9e, 0x19, 0xc1, 0x24, 0xc0, 0xa7, 0x5d, 0x98, 0x81, 0x86, 0xff, 0x76, 0xfc, 0x07,
	0x89, 0xf6, 0xcf, 0xe8, 0xf7, 0xd7, 0xee, 0xd1, 0xab, 0xd7, 0x2e, 0xfa, 0x7e, 0xed, 0xa2, 0x1f,
	0xd7, 0x2e, 0x7a, 0xb9, 0x76, 0xd1, 0x6f, 0x6b, 0x17, 0xbd, 0x5a, 0xbb, 0xe8, 0x87, 0x3f, 0xdc,
	0x23, 0xfc, 0x81, 0x4c, 0x13, 0x4f, 0x4f, 0x40, 0x17, 0x07, 0x28, 0xec, 0x01, 0x7a, 0x54, 0x71,
	0x6f, 0xf3, 0x03, 0xd9, 0xd8, 0xb6, 0xc9, 0x97, 0x32, 0xa4, 0xdf, 0x04, 0x03, 0x6b, 0x3f, 0x34,
	0xf0, 0x10, 0x7d, 0xfb, 0xe1, 0xbe, 0x3f, 0xa2, 0x9f, 0xee, 0xbd, 0xb7, 0xcb, 0xf3, 0x82, 0x61,
	0xdf, 0x2b, 0xd5, 0x87, 0x25, 0x7d, 0x54, 0x29, 0x0a, 0xaf, 0xff, 0x0a, 0x00, 0x00, 0xff, 0xff,
	0x0f, 0xd1, 0x69, 0x60, 0xea, 0x06, 0x00, 0x00,
}
