// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: github.com/TheThingsNetwork/api/protocol/lorawan/device_address.proto

package lorawan // import "github.com/TheThingsNetwork/api/protocol/lorawan"

import proto "github.com/gogo/protobuf/proto"
import golang_proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import github_com_TheThingsNetwork_ttn_core_types "github.com/TheThingsNetwork/ttn/core/types"

import context "golang.org/x/net/context"
import grpc "google.golang.org/grpc"

import strings "strings"
import reflect "reflect"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type PrefixesRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PrefixesRequest) Reset()      { *m = PrefixesRequest{} }
func (*PrefixesRequest) ProtoMessage() {}
func (*PrefixesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_device_address_d53db1848c7a591e, []int{0}
}
func (m *PrefixesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PrefixesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PrefixesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *PrefixesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PrefixesRequest.Merge(dst, src)
}
func (m *PrefixesRequest) XXX_Size() int {
	return m.Size()
}
func (m *PrefixesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PrefixesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PrefixesRequest proto.InternalMessageInfo

type PrefixesResponse struct {
	// The prefixes that are in use or available
	Prefixes             []*PrefixesResponse_PrefixMapping `protobuf:"bytes,1,rep,name=prefixes" json:"prefixes,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                          `json:"-"`
	XXX_sizecache        int32                             `json:"-"`
}

func (m *PrefixesResponse) Reset()      { *m = PrefixesResponse{} }
func (*PrefixesResponse) ProtoMessage() {}
func (*PrefixesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_device_address_d53db1848c7a591e, []int{1}
}
func (m *PrefixesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PrefixesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PrefixesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *PrefixesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PrefixesResponse.Merge(dst, src)
}
func (m *PrefixesResponse) XXX_Size() int {
	return m.Size()
}
func (m *PrefixesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_PrefixesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_PrefixesResponse proto.InternalMessageInfo

func (m *PrefixesResponse) GetPrefixes() []*PrefixesResponse_PrefixMapping {
	if m != nil {
		return m.Prefixes
	}
	return nil
}

type PrefixesResponse_PrefixMapping struct {
	// The prefix that can be used
	Prefix string `protobuf:"bytes,1,opt,name=prefix,proto3" json:"prefix,omitempty"`
	// Usage constraints of this prefix (see activation_constraints in device.proto)
	Usage                []string `protobuf:"bytes,2,rep,name=usage" json:"usage,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PrefixesResponse_PrefixMapping) Reset()      { *m = PrefixesResponse_PrefixMapping{} }
func (*PrefixesResponse_PrefixMapping) ProtoMessage() {}
func (*PrefixesResponse_PrefixMapping) Descriptor() ([]byte, []int) {
	return fileDescriptor_device_address_d53db1848c7a591e, []int{1, 0}
}
func (m *PrefixesResponse_PrefixMapping) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PrefixesResponse_PrefixMapping) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PrefixesResponse_PrefixMapping.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *PrefixesResponse_PrefixMapping) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PrefixesResponse_PrefixMapping.Merge(dst, src)
}
func (m *PrefixesResponse_PrefixMapping) XXX_Size() int {
	return m.Size()
}
func (m *PrefixesResponse_PrefixMapping) XXX_DiscardUnknown() {
	xxx_messageInfo_PrefixesResponse_PrefixMapping.DiscardUnknown(m)
}

var xxx_messageInfo_PrefixesResponse_PrefixMapping proto.InternalMessageInfo

func (m *PrefixesResponse_PrefixMapping) GetPrefix() string {
	if m != nil {
		return m.Prefix
	}
	return ""
}

func (m *PrefixesResponse_PrefixMapping) GetUsage() []string {
	if m != nil {
		return m.Usage
	}
	return nil
}

type DevAddrRequest struct {
	// The usage constraints (see activation_constraints in device.proto)
	Usage                []string `protobuf:"bytes,1,rep,name=usage" json:"usage,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DevAddrRequest) Reset()      { *m = DevAddrRequest{} }
func (*DevAddrRequest) ProtoMessage() {}
func (*DevAddrRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_device_address_d53db1848c7a591e, []int{2}
}
func (m *DevAddrRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DevAddrRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DevAddrRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *DevAddrRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DevAddrRequest.Merge(dst, src)
}
func (m *DevAddrRequest) XXX_Size() int {
	return m.Size()
}
func (m *DevAddrRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DevAddrRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DevAddrRequest proto.InternalMessageInfo

func (m *DevAddrRequest) GetUsage() []string {
	if m != nil {
		return m.Usage
	}
	return nil
}

type DevAddrResponse struct {
	DevAddr              github_com_TheThingsNetwork_ttn_core_types.DevAddr `protobuf:"bytes,1,opt,name=dev_addr,json=devAddr,proto3,customtype=github.com/TheThingsNetwork/ttn/core/types.DevAddr" json:"dev_addr"`
	XXX_NoUnkeyedLiteral struct{}                                           `json:"-"`
	XXX_sizecache        int32                                              `json:"-"`
}

func (m *DevAddrResponse) Reset()      { *m = DevAddrResponse{} }
func (*DevAddrResponse) ProtoMessage() {}
func (*DevAddrResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_device_address_d53db1848c7a591e, []int{3}
}
func (m *DevAddrResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DevAddrResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DevAddrResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *DevAddrResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DevAddrResponse.Merge(dst, src)
}
func (m *DevAddrResponse) XXX_Size() int {
	return m.Size()
}
func (m *DevAddrResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_DevAddrResponse.DiscardUnknown(m)
}

var xxx_messageInfo_DevAddrResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*PrefixesRequest)(nil), "lorawan.PrefixesRequest")
	golang_proto.RegisterType((*PrefixesRequest)(nil), "lorawan.PrefixesRequest")
	proto.RegisterType((*PrefixesResponse)(nil), "lorawan.PrefixesResponse")
	golang_proto.RegisterType((*PrefixesResponse)(nil), "lorawan.PrefixesResponse")
	proto.RegisterType((*PrefixesResponse_PrefixMapping)(nil), "lorawan.PrefixesResponse.PrefixMapping")
	golang_proto.RegisterType((*PrefixesResponse_PrefixMapping)(nil), "lorawan.PrefixesResponse.PrefixMapping")
	proto.RegisterType((*DevAddrRequest)(nil), "lorawan.DevAddrRequest")
	golang_proto.RegisterType((*DevAddrRequest)(nil), "lorawan.DevAddrRequest")
	proto.RegisterType((*DevAddrResponse)(nil), "lorawan.DevAddrResponse")
	golang_proto.RegisterType((*DevAddrResponse)(nil), "lorawan.DevAddrResponse")
}
func (this *PrefixesRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PrefixesRequest)
	if !ok {
		that2, ok := that.(PrefixesRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *PrefixesResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PrefixesResponse)
	if !ok {
		that2, ok := that.(PrefixesResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Prefixes) != len(that1.Prefixes) {
		return false
	}
	for i := range this.Prefixes {
		if !this.Prefixes[i].Equal(that1.Prefixes[i]) {
			return false
		}
	}
	return true
}
func (this *PrefixesResponse_PrefixMapping) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PrefixesResponse_PrefixMapping)
	if !ok {
		that2, ok := that.(PrefixesResponse_PrefixMapping)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Prefix != that1.Prefix {
		return false
	}
	if len(this.Usage) != len(that1.Usage) {
		return false
	}
	for i := range this.Usage {
		if this.Usage[i] != that1.Usage[i] {
			return false
		}
	}
	return true
}
func (this *DevAddrRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DevAddrRequest)
	if !ok {
		that2, ok := that.(DevAddrRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Usage) != len(that1.Usage) {
		return false
	}
	for i := range this.Usage {
		if this.Usage[i] != that1.Usage[i] {
			return false
		}
	}
	return true
}
func (this *DevAddrResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DevAddrResponse)
	if !ok {
		that2, ok := that.(DevAddrResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DevAddr.Equal(that1.DevAddr) {
		return false
	}
	return true
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for DevAddrManager service

type DevAddrManagerClient interface {
	// Get all prefixes that are in use or available
	GetPrefixes(ctx context.Context, in *PrefixesRequest, opts ...grpc.CallOption) (*PrefixesResponse, error)
	// Request a device address
	GetDevAddr(ctx context.Context, in *DevAddrRequest, opts ...grpc.CallOption) (*DevAddrResponse, error)
}

type devAddrManagerClient struct {
	cc *grpc.ClientConn
}

func NewDevAddrManagerClient(cc *grpc.ClientConn) DevAddrManagerClient {
	return &devAddrManagerClient{cc}
}

func (c *devAddrManagerClient) GetPrefixes(ctx context.Context, in *PrefixesRequest, opts ...grpc.CallOption) (*PrefixesResponse, error) {
	out := new(PrefixesResponse)
	err := c.cc.Invoke(ctx, "/lorawan.DevAddrManager/GetPrefixes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *devAddrManagerClient) GetDevAddr(ctx context.Context, in *DevAddrRequest, opts ...grpc.CallOption) (*DevAddrResponse, error) {
	out := new(DevAddrResponse)
	err := c.cc.Invoke(ctx, "/lorawan.DevAddrManager/GetDevAddr", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for DevAddrManager service

type DevAddrManagerServer interface {
	// Get all prefixes that are in use or available
	GetPrefixes(context.Context, *PrefixesRequest) (*PrefixesResponse, error)
	// Request a device address
	GetDevAddr(context.Context, *DevAddrRequest) (*DevAddrResponse, error)
}

func RegisterDevAddrManagerServer(s *grpc.Server, srv DevAddrManagerServer) {
	s.RegisterService(&_DevAddrManager_serviceDesc, srv)
}

func _DevAddrManager_GetPrefixes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PrefixesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DevAddrManagerServer).GetPrefixes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lorawan.DevAddrManager/GetPrefixes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DevAddrManagerServer).GetPrefixes(ctx, req.(*PrefixesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DevAddrManager_GetDevAddr_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DevAddrRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DevAddrManagerServer).GetDevAddr(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lorawan.DevAddrManager/GetDevAddr",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DevAddrManagerServer).GetDevAddr(ctx, req.(*DevAddrRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _DevAddrManager_serviceDesc = grpc.ServiceDesc{
	ServiceName: "lorawan.DevAddrManager",
	HandlerType: (*DevAddrManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPrefixes",
			Handler:    _DevAddrManager_GetPrefixes_Handler,
		},
		{
			MethodName: "GetDevAddr",
			Handler:    _DevAddrManager_GetDevAddr_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "github.com/TheThingsNetwork/api/protocol/lorawan/device_address.proto",
}

func (m *PrefixesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PrefixesRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *PrefixesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PrefixesResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Prefixes) > 0 {
		for _, msg := range m.Prefixes {
			dAtA[i] = 0xa
			i++
			i = encodeVarintDeviceAddress(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *PrefixesResponse_PrefixMapping) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PrefixesResponse_PrefixMapping) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Prefix) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintDeviceAddress(dAtA, i, uint64(len(m.Prefix)))
		i += copy(dAtA[i:], m.Prefix)
	}
	if len(m.Usage) > 0 {
		for _, s := range m.Usage {
			dAtA[i] = 0x12
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	return i, nil
}

func (m *DevAddrRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DevAddrRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Usage) > 0 {
		for _, s := range m.Usage {
			dAtA[i] = 0xa
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	return i, nil
}

func (m *DevAddrResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DevAddrResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintDeviceAddress(dAtA, i, uint64(m.DevAddr.Size()))
	n1, err := m.DevAddr.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n1
	return i, nil
}

func encodeVarintDeviceAddress(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *PrefixesRequest) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *PrefixesResponse) Size() (n int) {
	var l int
	_ = l
	if len(m.Prefixes) > 0 {
		for _, e := range m.Prefixes {
			l = e.Size()
			n += 1 + l + sovDeviceAddress(uint64(l))
		}
	}
	return n
}

func (m *PrefixesResponse_PrefixMapping) Size() (n int) {
	var l int
	_ = l
	l = len(m.Prefix)
	if l > 0 {
		n += 1 + l + sovDeviceAddress(uint64(l))
	}
	if len(m.Usage) > 0 {
		for _, s := range m.Usage {
			l = len(s)
			n += 1 + l + sovDeviceAddress(uint64(l))
		}
	}
	return n
}

func (m *DevAddrRequest) Size() (n int) {
	var l int
	_ = l
	if len(m.Usage) > 0 {
		for _, s := range m.Usage {
			l = len(s)
			n += 1 + l + sovDeviceAddress(uint64(l))
		}
	}
	return n
}

func (m *DevAddrResponse) Size() (n int) {
	var l int
	_ = l
	l = m.DevAddr.Size()
	n += 1 + l + sovDeviceAddress(uint64(l))
	return n
}

func sovDeviceAddress(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozDeviceAddress(x uint64) (n int) {
	return sovDeviceAddress(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *PrefixesRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PrefixesRequest{`,
		`}`,
	}, "")
	return s
}
func (this *PrefixesResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PrefixesResponse{`,
		`Prefixes:` + strings.Replace(fmt.Sprintf("%v", this.Prefixes), "PrefixesResponse_PrefixMapping", "PrefixesResponse_PrefixMapping", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PrefixesResponse_PrefixMapping) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PrefixesResponse_PrefixMapping{`,
		`Prefix:` + fmt.Sprintf("%v", this.Prefix) + `,`,
		`Usage:` + fmt.Sprintf("%v", this.Usage) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DevAddrRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DevAddrRequest{`,
		`Usage:` + fmt.Sprintf("%v", this.Usage) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DevAddrResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DevAddrResponse{`,
		`DevAddr:` + fmt.Sprintf("%v", this.DevAddr) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringDeviceAddress(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *PrefixesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDeviceAddress
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PrefixesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PrefixesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipDeviceAddress(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDeviceAddress
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PrefixesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDeviceAddress
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PrefixesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PrefixesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Prefixes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDeviceAddress
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDeviceAddress
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Prefixes = append(m.Prefixes, &PrefixesResponse_PrefixMapping{})
			if err := m.Prefixes[len(m.Prefixes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDeviceAddress(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDeviceAddress
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PrefixesResponse_PrefixMapping) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDeviceAddress
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PrefixMapping: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PrefixMapping: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Prefix", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDeviceAddress
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDeviceAddress
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Prefix = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Usage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDeviceAddress
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDeviceAddress
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Usage = append(m.Usage, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDeviceAddress(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDeviceAddress
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DevAddrRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDeviceAddress
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DevAddrRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DevAddrRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Usage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDeviceAddress
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDeviceAddress
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Usage = append(m.Usage, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDeviceAddress(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDeviceAddress
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DevAddrResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDeviceAddress
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DevAddrResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DevAddrResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DevAddr", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDeviceAddress
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDeviceAddress
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.DevAddr.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDeviceAddress(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDeviceAddress
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipDeviceAddress(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowDeviceAddress
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDeviceAddress
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDeviceAddress
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthDeviceAddress
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowDeviceAddress
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipDeviceAddress(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthDeviceAddress = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowDeviceAddress   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("github.com/TheThingsNetwork/api/protocol/lorawan/device_address.proto", fileDescriptor_device_address_d53db1848c7a591e)
}
func init() {
	golang_proto.RegisterFile("github.com/TheThingsNetwork/api/protocol/lorawan/device_address.proto", fileDescriptor_device_address_d53db1848c7a591e)
}

var fileDescriptor_device_address_d53db1848c7a591e = []byte{
	// 520 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x53, 0x3b, 0x6c, 0x13, 0x41,
	0x10, 0xdd, 0x71, 0x44, 0x3e, 0x1b, 0x20, 0x70, 0x42, 0xe0, 0xb8, 0x98, 0x58, 0x16, 0x02, 0x53,
	0xb0, 0x87, 0x4c, 0x87, 0x84, 0x90, 0x4d, 0x50, 0x84, 0x44, 0x22, 0xcb, 0x0a, 0x42, 0xa2, 0x41,
	0x6b, 0xdf, 0xe6, 0x7c, 0x22, 0xdc, 0x1e, 0x77, 0x6b, 0x07, 0xba, 0x94, 0x29, 0x69, 0x82, 0x28,
	0x29, 0x23, 0xaa, 0x94, 0x29, 0x53, 0xba, 0x4c, 0x19, 0x51, 0x44, 0xb9, 0xbd, 0x26, 0x65, 0xca,
	0x94, 0x88, 0xbd, 0xb5, 0xf3, 0xe1, 0x23, 0xa5, 0xdb, 0x99, 0xf7, 0xe6, 0xcd, 0xbb, 0xa7, 0x39,
	0xfa, 0xc2, 0x0f, 0x54, 0xb7, 0xd7, 0x66, 0x1d, 0xf9, 0xc1, 0x5d, 0xee, 0x8a, 0xe5, 0x6e, 0x10,
	0xfa, 0xc9, 0x92, 0x50, 0x6b, 0x32, 0x7e, 0xef, 0xf2, 0x28, 0x70, 0xa3, 0x58, 0x2a, 0xd9, 0x91,
	0xab, 0xee, 0xaa, 0x8c, 0xf9, 0x1a, 0x0f, 0x5d, 0x4f, 0xf4, 0x83, 0x8e, 0x78, 0xc7, 0x3d, 0x2f,
	0x16, 0x49, 0xc2, 0x0c, 0xee, 0x4c, 0x58, 0xb4, 0xf4, 0xf0, 0x8c, 0x9e, 0x2f, 0x7d, 0x99, 0xcf,
	0xb7, 0x7b, 0x2b, 0xa6, 0x32, 0x85, 0x79, 0xe5, 0x73, 0x95, 0x9b, 0x74, 0xa6, 0x19, 0x8b, 0x95,
	0xe0, 0x93, 0x48, 0x5a, 0xe2, 0x63, 0x4f, 0x24, 0xaa, 0xf2, 0x15, 0xe8, 0x8d, 0xd3, 0x5e, 0x12,
	0xc9, 0x30, 0x11, 0xce, 0x73, 0x3a, 0x19, 0xd9, 0x5e, 0x11, 0xca, 0x63, 0xd5, 0xe9, 0xda, 0x7d,
	0x66, 0x57, 0xb2, 0x8b, 0x64, 0xdb, 0x58, 0xe4, 0x51, 0x14, 0x84, 0x7e, 0x6b, 0x34, 0x58, 0x7a,
	0x4a, 0xaf, 0x9d, 0x83, 0x9c, 0xdb, 0x74, 0x3c, 0x07, 0x8b, 0x50, 0x86, 0xea, 0x54, 0xcb, 0x56,
	0xce, 0x2d, 0x7a, 0xa5, 0x97, 0x70, 0x5f, 0x14, 0x0b, 0xe5, 0xb1, 0xea, 0x54, 0x2b, 0x2f, 0x2a,
	0xf7, 0xe8, 0xf5, 0x79, 0xd1, 0xaf, 0x7b, 0x5e, 0x6c, 0xad, 0x9e, 0xf2, 0xe0, 0x2c, 0xaf, 0x4b,
	0x67, 0x46, 0x3c, 0x6b, 0xff, 0x35, 0x9d, 0xf4, 0x44, 0xdf, 0x64, 0x66, 0x56, 0x5d, 0x6d, 0x3c,
	0x19, 0x1c, 0xcc, 0x91, 0x9f, 0x07, 0x73, 0xb5, 0xff, 0xe5, 0xaf, 0x54, 0xe8, 0x76, 0x64, 0x2c,
	0x5c, 0xf5, 0x39, 0x12, 0x09, 0x1b, 0xaa, 0x4e, 0x78, 0xf9, 0xa3, 0xb6, 0x09, 0x23, 0x4b, 0x8b,
	0x3c, 0xe4, 0xbe, 0x88, 0x9d, 0x06, 0x9d, 0x5e, 0x10, 0x6a, 0x18, 0x89, 0x53, 0xfc, 0x4b, 0x4a,
	0xc6, 0x7b, 0x69, 0xf6, 0x9f, 0xf9, 0x39, 0xcf, 0x28, 0x5d, 0x10, 0xca, 0x0a, 0x3b, 0x77, 0x46,
	0xc4, 0xf3, 0x5f, 0x5f, 0x2a, 0xfe, 0x09, 0xe4, 0x02, 0x8d, 0xcd, 0xc2, 0x20, 0x45, 0xd8, 0x4b,
	0x11, 0xf6, 0x53, 0x24, 0x87, 0x29, 0x92, 0xa3, 0x14, 0xc9, 0x71, 0x8a, 0xe4, 0x24, 0x45, 0xb2,
	0xae, 0x11, 0x36, 0x34, 0x92, 0x2d, 0x8d, 0xb0, 0xad, 0x91, 0xec, 0x68, 0x24, 0xbb, 0x1a, 0xc9,
	0x40, 0x23, 0xec, 0x69, 0x84, 0x7d, 0x8d, 0xe4, 0x50, 0x23, 0x1c, 0x69, 0x24, 0xc7, 0x1a, 0xe1,
	0x44, 0x23, 0x59, 0xcf, 0x90, 0x6c, 0x64, 0x08, 0x5f, 0x32, 0x24, 0xdf, 0x32, 0x84, 0xef, 0x19,
	0x92, 0xad, 0x0c, 0xc9, 0x76, 0x86, 0xb0, 0x93, 0x21, 0xec, 0x66, 0x08, 0xf4, 0x81, 0x8c, 0x7d,
	0xa6, 0xba, 0x42, 0x99, 0x10, 0xc3, 0x3c, 0x44, 0xc6, 0xa3, 0x80, 0x0d, 0x8f, 0x78, 0xe8, 0xb8,
	0x31, 0xfb, 0x4a, 0xb6, 0xf8, 0x9b, 0xfa, 0xd2, 0xbc, 0x39, 0xe6, 0x7a, 0x7e, 0xcb, 0xcd, 0xdf,
	0xac, 0x26, 0xbc, 0x7d, 0x74, 0xd9, 0x7f, 0xe2, 0x47, 0xe1, 0xee, 0x45, 0x1e, 0xab, 0x37, 0x5f,
	0x32, 0xbb, 0xa4, 0x69, 0xe9, 0xed, 0x71, 0x33, 0xf8, 0xf8, 0x57, 0x00, 0x00, 0x00, 0xff, 0xff,
	0xa0, 0xe1, 0x3e, 0xda, 0x75, 0x03, 0x00, 0x00,
}
