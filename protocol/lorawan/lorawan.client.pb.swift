/*
 * DO NOT EDIT.
 *
 * Generated by the protocol buffer compiler.
 * Source: github.com/TheThingsNetwork/api/protocol/lorawan/device.proto
 *
 */

/*
 * Copyright 2017, gRPC Authors All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import Foundation
import Dispatch
import gRPC

/// Type for errors thrown from generated client code.
internal enum Lorawan_DeviceManagerClientError : Error {
  case endOfStream
  case invalidMessageReceived
  case error(c: CallResult)
}

/// GetDevice (Unary)
internal class Lorawan_DeviceManagerGetDeviceCall {
  private var call : Call

  /// Create a call.
  fileprivate init(_ channel: Channel) {
    self.call = channel.makeCall("/lorawan.DeviceManager/GetDevice")
  }

  /// Run the call. Blocks until the reply is received.
  fileprivate func run(request: Lorawan_DeviceIdentifier,
                       metadata: Metadata) throws -> Lorawan_Device {
    let sem = DispatchSemaphore(value: 0)
    var returnCallResult : CallResult!
    var returnResponse : Lorawan_Device?
    _ = try start(request:request, metadata:metadata) {response, callResult in
      returnResponse = response
      returnCallResult = callResult
      sem.signal()
    }
    _ = sem.wait(timeout: DispatchTime.distantFuture)
    if let returnResponse = returnResponse {
      return returnResponse
    } else {
      throw Lorawan_DeviceManagerClientError.error(c: returnCallResult)
    }
  }

  /// Start the call. Nonblocking.
  fileprivate func start(request: Lorawan_DeviceIdentifier,
                         metadata: Metadata,
                         completion: @escaping (Lorawan_Device?, CallResult)->())
    throws -> Lorawan_DeviceManagerGetDeviceCall {

      let requestData = try request.serializedData()
      try call.start(.unary,
                     metadata:metadata,
                     message:requestData)
      {(callResult) in
        if let responseData = callResult.resultData,
          let response = try? Lorawan_Device(serializedData:responseData) {
          completion(response, callResult)
        } else {
          completion(nil, callResult)
        }
      }
      return self
  }
}

/// SetDevice (Unary)
internal class Lorawan_DeviceManagerSetDeviceCall {
  private var call : Call

  /// Create a call.
  fileprivate init(_ channel: Channel) {
    self.call = channel.makeCall("/lorawan.DeviceManager/SetDevice")
  }

  /// Run the call. Blocks until the reply is received.
  fileprivate func run(request: Lorawan_Device,
                       metadata: Metadata) throws -> Google_Protobuf_Empty {
    let sem = DispatchSemaphore(value: 0)
    var returnCallResult : CallResult!
    var returnResponse : Google_Protobuf_Empty?
    _ = try start(request:request, metadata:metadata) {response, callResult in
      returnResponse = response
      returnCallResult = callResult
      sem.signal()
    }
    _ = sem.wait(timeout: DispatchTime.distantFuture)
    if let returnResponse = returnResponse {
      return returnResponse
    } else {
      throw Lorawan_DeviceManagerClientError.error(c: returnCallResult)
    }
  }

  /// Start the call. Nonblocking.
  fileprivate func start(request: Lorawan_Device,
                         metadata: Metadata,
                         completion: @escaping (Google_Protobuf_Empty?, CallResult)->())
    throws -> Lorawan_DeviceManagerSetDeviceCall {

      let requestData = try request.serializedData()
      try call.start(.unary,
                     metadata:metadata,
                     message:requestData)
      {(callResult) in
        if let responseData = callResult.resultData,
          let response = try? Google_Protobuf_Empty(serializedData:responseData) {
          completion(response, callResult)
        } else {
          completion(nil, callResult)
        }
      }
      return self
  }
}

/// DeleteDevice (Unary)
internal class Lorawan_DeviceManagerDeleteDeviceCall {
  private var call : Call

  /// Create a call.
  fileprivate init(_ channel: Channel) {
    self.call = channel.makeCall("/lorawan.DeviceManager/DeleteDevice")
  }

  /// Run the call. Blocks until the reply is received.
  fileprivate func run(request: Lorawan_DeviceIdentifier,
                       metadata: Metadata) throws -> Google_Protobuf_Empty {
    let sem = DispatchSemaphore(value: 0)
    var returnCallResult : CallResult!
    var returnResponse : Google_Protobuf_Empty?
    _ = try start(request:request, metadata:metadata) {response, callResult in
      returnResponse = response
      returnCallResult = callResult
      sem.signal()
    }
    _ = sem.wait(timeout: DispatchTime.distantFuture)
    if let returnResponse = returnResponse {
      return returnResponse
    } else {
      throw Lorawan_DeviceManagerClientError.error(c: returnCallResult)
    }
  }

  /// Start the call. Nonblocking.
  fileprivate func start(request: Lorawan_DeviceIdentifier,
                         metadata: Metadata,
                         completion: @escaping (Google_Protobuf_Empty?, CallResult)->())
    throws -> Lorawan_DeviceManagerDeleteDeviceCall {

      let requestData = try request.serializedData()
      try call.start(.unary,
                     metadata:metadata,
                     message:requestData)
      {(callResult) in
        if let responseData = callResult.resultData,
          let response = try? Google_Protobuf_Empty(serializedData:responseData) {
          completion(response, callResult)
        } else {
          completion(nil, callResult)
        }
      }
      return self
  }
}

/// Call methods of this class to make API calls.
internal class Lorawan_DeviceManagerService {
  private var channel: Channel

  /// This metadata will be sent with all requests.
  internal var metadata : Metadata

  /// This property allows the service host name to be overridden.
  /// For example, it can be used to make calls to "localhost:8080"
  /// appear to be to "example.com".
  internal var host : String {
    get {
      return self.channel.host
    }
    set {
      self.channel.host = newValue
    }
  }

  /// Create a client that makes insecure connections.
  internal init(address: String) {
    gRPC.initialize()
    channel = Channel(address:address)
    metadata = Metadata()
  }

  /// Create a client that makes secure connections.
  internal init(address: String, certificates: String?, host: String?) {
    gRPC.initialize()
    channel = Channel(address:address, certificates:certificates, host:host)
    metadata = Metadata()
  }

  /// Synchronous. Unary.
  internal func getdevice(_ request: Lorawan_DeviceIdentifier)
    throws
    -> Lorawan_Device {
      return try Lorawan_DeviceManagerGetDeviceCall(channel).run(request:request, metadata:metadata)
  }
  /// Asynchronous. Unary.
  internal func getdevice(_ request: Lorawan_DeviceIdentifier,
                  completion: @escaping (Lorawan_Device?, CallResult)->())
    throws
    -> Lorawan_DeviceManagerGetDeviceCall {
      return try Lorawan_DeviceManagerGetDeviceCall(channel).start(request:request,
                                                 metadata:metadata,
                                                 completion:completion)
  }
  /// Synchronous. Unary.
  internal func setdevice(_ request: Lorawan_Device)
    throws
    -> Google_Protobuf_Empty {
      return try Lorawan_DeviceManagerSetDeviceCall(channel).run(request:request, metadata:metadata)
  }
  /// Asynchronous. Unary.
  internal func setdevice(_ request: Lorawan_Device,
                  completion: @escaping (Google_Protobuf_Empty?, CallResult)->())
    throws
    -> Lorawan_DeviceManagerSetDeviceCall {
      return try Lorawan_DeviceManagerSetDeviceCall(channel).start(request:request,
                                                 metadata:metadata,
                                                 completion:completion)
  }
  /// Synchronous. Unary.
  internal func deletedevice(_ request: Lorawan_DeviceIdentifier)
    throws
    -> Google_Protobuf_Empty {
      return try Lorawan_DeviceManagerDeleteDeviceCall(channel).run(request:request, metadata:metadata)
  }
  /// Asynchronous. Unary.
  internal func deletedevice(_ request: Lorawan_DeviceIdentifier,
                  completion: @escaping (Google_Protobuf_Empty?, CallResult)->())
    throws
    -> Lorawan_DeviceManagerDeleteDeviceCall {
      return try Lorawan_DeviceManagerDeleteDeviceCall(channel).start(request:request,
                                                 metadata:metadata,
                                                 completion:completion)
  }
}
