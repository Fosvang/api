// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: github.com/TheThingsNetwork/api/protocol/lorawan/lorawan.proto

/*
	Package lorawan is a generated protocol buffer package.

	It is generated from these files:
		github.com/TheThingsNetwork/api/protocol/lorawan/lorawan.proto

	It has these top-level messages:
		Metadata
		TxConfiguration
		ActivationMetadata
		Message
		MHDR
		MACPayload
		FHDR
		FCtrl
		MACCommand
		JoinRequestPayload
		JoinAcceptPayload
		DLSettings
		CFList
*/
package lorawan

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import github_com_TheThingsNetwork_ttn_core_types "github.com/TheThingsNetwork/ttn/core/types"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type Modulation int32

const (
	Modulation_LORA Modulation = 0
	Modulation_FSK  Modulation = 1
)

var Modulation_name = map[int32]string{
	0: "LORA",
	1: "FSK",
}
var Modulation_value = map[string]int32{
	"LORA": 0,
	"FSK":  1,
}

func (x Modulation) String() string {
	return proto.EnumName(Modulation_name, int32(x))
}
func (Modulation) EnumDescriptor() ([]byte, []int) { return fileDescriptorLorawan, []int{0} }

type FrequencyPlan int32

const (
	FrequencyPlan_EU_863_870 FrequencyPlan = 0
	FrequencyPlan_US_902_928 FrequencyPlan = 1
	FrequencyPlan_CN_779_787 FrequencyPlan = 2
	FrequencyPlan_EU_433     FrequencyPlan = 3
	FrequencyPlan_AU_915_928 FrequencyPlan = 4
	FrequencyPlan_CN_470_510 FrequencyPlan = 5
	FrequencyPlan_AS_923     FrequencyPlan = 6
	FrequencyPlan_AS_920_923 FrequencyPlan = 61
	FrequencyPlan_AS_923_925 FrequencyPlan = 62
	FrequencyPlan_KR_920_923 FrequencyPlan = 7
	FrequencyPlan_IN_865_867 FrequencyPlan = 8
)

var FrequencyPlan_name = map[int32]string{
	0:  "EU_863_870",
	1:  "US_902_928",
	2:  "CN_779_787",
	3:  "EU_433",
	4:  "AU_915_928",
	5:  "CN_470_510",
	6:  "AS_923",
	61: "AS_920_923",
	62: "AS_923_925",
	7:  "KR_920_923",
	8:  "IN_865_867",
}
var FrequencyPlan_value = map[string]int32{
	"EU_863_870": 0,
	"US_902_928": 1,
	"CN_779_787": 2,
	"EU_433":     3,
	"AU_915_928": 4,
	"CN_470_510": 5,
	"AS_923":     6,
	"AS_920_923": 61,
	"AS_923_925": 62,
	"KR_920_923": 7,
	"IN_865_867": 8,
}

func (x FrequencyPlan) String() string {
	return proto.EnumName(FrequencyPlan_name, int32(x))
}
func (FrequencyPlan) EnumDescriptor() ([]byte, []int) { return fileDescriptorLorawan, []int{1} }

type Major int32

const (
	Major_LORAWAN_R1 Major = 0
)

var Major_name = map[int32]string{
	0: "LORAWAN_R1",
}
var Major_value = map[string]int32{
	"LORAWAN_R1": 0,
}

func (x Major) String() string {
	return proto.EnumName(Major_name, int32(x))
}
func (Major) EnumDescriptor() ([]byte, []int) { return fileDescriptorLorawan, []int{2} }

type MType int32

const (
	MType_JOIN_REQUEST     MType = 0
	MType_JOIN_ACCEPT      MType = 1
	MType_UNCONFIRMED_UP   MType = 2
	MType_UNCONFIRMED_DOWN MType = 3
	MType_CONFIRMED_UP     MType = 4
	MType_CONFIRMED_DOWN   MType = 5
)

var MType_name = map[int32]string{
	0: "JOIN_REQUEST",
	1: "JOIN_ACCEPT",
	2: "UNCONFIRMED_UP",
	3: "UNCONFIRMED_DOWN",
	4: "CONFIRMED_UP",
	5: "CONFIRMED_DOWN",
}
var MType_value = map[string]int32{
	"JOIN_REQUEST":     0,
	"JOIN_ACCEPT":      1,
	"UNCONFIRMED_UP":   2,
	"UNCONFIRMED_DOWN": 3,
	"CONFIRMED_UP":     4,
	"CONFIRMED_DOWN":   5,
}

func (x MType) String() string {
	return proto.EnumName(MType_name, int32(x))
}
func (MType) EnumDescriptor() ([]byte, []int) { return fileDescriptorLorawan, []int{3} }

type Metadata struct {
	Modulation Modulation `protobuf:"varint,11,opt,name=modulation,proto3,enum=lorawan.Modulation" json:"modulation,omitempty"`
	// LoRa data rate - SF{spreadingfactor}BW{bandwidth}
	DataRate string `protobuf:"bytes,12,opt,name=data_rate,json=dataRate,proto3" json:"data_rate,omitempty"`
	// FSK bit rate in bit/s
	BitRate uint32 `protobuf:"varint,13,opt,name=bit_rate,json=bitRate,proto3" json:"bit_rate,omitempty"`
	// LoRa coding rate
	CodingRate string `protobuf:"bytes,14,opt,name=coding_rate,json=codingRate,proto3" json:"coding_rate,omitempty"`
	// Store the full 32 bit FCnt (deprecated; do not use)
	FCnt          uint32        `protobuf:"varint,15,opt,name=f_cnt,json=fCnt,proto3" json:"f_cnt,omitempty"`
	FrequencyPlan FrequencyPlan `protobuf:"varint,16,opt,name=frequency_plan,json=frequencyPlan,proto3,enum=lorawan.FrequencyPlan" json:"frequency_plan,omitempty"`
}

func (m *Metadata) Reset()                    { *m = Metadata{} }
func (m *Metadata) String() string            { return proto.CompactTextString(m) }
func (*Metadata) ProtoMessage()               {}
func (*Metadata) Descriptor() ([]byte, []int) { return fileDescriptorLorawan, []int{0} }

func (m *Metadata) GetModulation() Modulation {
	if m != nil {
		return m.Modulation
	}
	return Modulation_LORA
}

func (m *Metadata) GetDataRate() string {
	if m != nil {
		return m.DataRate
	}
	return ""
}

func (m *Metadata) GetBitRate() uint32 {
	if m != nil {
		return m.BitRate
	}
	return 0
}

func (m *Metadata) GetCodingRate() string {
	if m != nil {
		return m.CodingRate
	}
	return ""
}

func (m *Metadata) GetFCnt() uint32 {
	if m != nil {
		return m.FCnt
	}
	return 0
}

func (m *Metadata) GetFrequencyPlan() FrequencyPlan {
	if m != nil {
		return m.FrequencyPlan
	}
	return FrequencyPlan_EU_863_870
}

type TxConfiguration struct {
	Modulation Modulation `protobuf:"varint,11,opt,name=modulation,proto3,enum=lorawan.Modulation" json:"modulation,omitempty"`
	// LoRa data rate - SF{spreadingfactor}BW{bandwidth}
	DataRate string `protobuf:"bytes,12,opt,name=data_rate,json=dataRate,proto3" json:"data_rate,omitempty"`
	// FSK bit rate in bit/s
	BitRate uint32 `protobuf:"varint,13,opt,name=bit_rate,json=bitRate,proto3" json:"bit_rate,omitempty"`
	// LoRa coding rate
	CodingRate string `protobuf:"bytes,14,opt,name=coding_rate,json=codingRate,proto3" json:"coding_rate,omitempty"`
	// Store the full 32 bit FCnt (deprecated; do not use)
	FCnt uint32 `protobuf:"varint,15,opt,name=f_cnt,json=fCnt,proto3" json:"f_cnt,omitempty"`
}

func (m *TxConfiguration) Reset()                    { *m = TxConfiguration{} }
func (m *TxConfiguration) String() string            { return proto.CompactTextString(m) }
func (*TxConfiguration) ProtoMessage()               {}
func (*TxConfiguration) Descriptor() ([]byte, []int) { return fileDescriptorLorawan, []int{1} }

func (m *TxConfiguration) GetModulation() Modulation {
	if m != nil {
		return m.Modulation
	}
	return Modulation_LORA
}

func (m *TxConfiguration) GetDataRate() string {
	if m != nil {
		return m.DataRate
	}
	return ""
}

func (m *TxConfiguration) GetBitRate() uint32 {
	if m != nil {
		return m.BitRate
	}
	return 0
}

func (m *TxConfiguration) GetCodingRate() string {
	if m != nil {
		return m.CodingRate
	}
	return ""
}

func (m *TxConfiguration) GetFCnt() uint32 {
	if m != nil {
		return m.FCnt
	}
	return 0
}

type ActivationMetadata struct {
	AppEUI        *github_com_TheThingsNetwork_ttn_core_types.AppEUI  `protobuf:"bytes,1,opt,name=app_eui,json=appEui,proto3,customtype=github.com/TheThingsNetwork/ttn/core/types.AppEUI" json:"app_eui,omitempty"`
	DevEUI        *github_com_TheThingsNetwork_ttn_core_types.DevEUI  `protobuf:"bytes,2,opt,name=dev_eui,json=devEui,proto3,customtype=github.com/TheThingsNetwork/ttn/core/types.DevEUI" json:"dev_eui,omitempty"`
	DevAddr       *github_com_TheThingsNetwork_ttn_core_types.DevAddr `protobuf:"bytes,3,opt,name=dev_addr,json=devAddr,proto3,customtype=github.com/TheThingsNetwork/ttn/core/types.DevAddr" json:"dev_addr,omitempty"`
	NwkSKey       *github_com_TheThingsNetwork_ttn_core_types.NwkSKey `protobuf:"bytes,4,opt,name=nwk_s_key,json=nwkSKey,proto3,customtype=github.com/TheThingsNetwork/ttn/core/types.NwkSKey" json:"nwk_s_key,omitempty"`
	Rx1DROffset   uint32                                              `protobuf:"varint,11,opt,name=rx1_dr_offset,json=rx1DrOffset,proto3" json:"rx1_dr_offset,omitempty"`
	Rx2DR         uint32                                              `protobuf:"varint,12,opt,name=rx2_dr,json=rx2Dr,proto3" json:"rx2_dr,omitempty"`
	RxDelay       uint32                                              `protobuf:"varint,13,opt,name=rx_delay,json=rxDelay,proto3" json:"rx_delay,omitempty"`
	CFList        *CFList                                             `protobuf:"bytes,14,opt,name=cf_list,json=cfList" json:"cf_list,omitempty"`
	FrequencyPlan FrequencyPlan                                       `protobuf:"varint,15,opt,name=frequency_plan,json=frequencyPlan,proto3,enum=lorawan.FrequencyPlan" json:"frequency_plan,omitempty"`
}

func (m *ActivationMetadata) Reset()                    { *m = ActivationMetadata{} }
func (m *ActivationMetadata) String() string            { return proto.CompactTextString(m) }
func (*ActivationMetadata) ProtoMessage()               {}
func (*ActivationMetadata) Descriptor() ([]byte, []int) { return fileDescriptorLorawan, []int{2} }

func (m *ActivationMetadata) GetRx1DROffset() uint32 {
	if m != nil {
		return m.Rx1DROffset
	}
	return 0
}

func (m *ActivationMetadata) GetRx2DR() uint32 {
	if m != nil {
		return m.Rx2DR
	}
	return 0
}

func (m *ActivationMetadata) GetRxDelay() uint32 {
	if m != nil {
		return m.RxDelay
	}
	return 0
}

func (m *ActivationMetadata) GetCFList() *CFList {
	if m != nil {
		return m.CFList
	}
	return nil
}

func (m *ActivationMetadata) GetFrequencyPlan() FrequencyPlan {
	if m != nil {
		return m.FrequencyPlan
	}
	return FrequencyPlan_EU_863_870
}

type Message struct {
	MHDR `protobuf:"bytes,1,opt,name=m_hdr,json=mHdr,embedded=m_hdr" json:"m_hdr"`
	MIC  []byte `protobuf:"bytes,2,opt,name=mic,proto3" json:"mic,omitempty"`
	// Types that are valid to be assigned to Payload:
	//	*Message_MACPayload
	//	*Message_JoinRequestPayload
	//	*Message_JoinAcceptPayload
	Payload isMessage_Payload `protobuf_oneof:"Payload"`
}

func (m *Message) Reset()                    { *m = Message{} }
func (m *Message) String() string            { return proto.CompactTextString(m) }
func (*Message) ProtoMessage()               {}
func (*Message) Descriptor() ([]byte, []int) { return fileDescriptorLorawan, []int{3} }

type isMessage_Payload interface {
	isMessage_Payload()
	MarshalTo([]byte) (int, error)
	Size() int
}

type Message_MACPayload struct {
	MACPayload *MACPayload `protobuf:"bytes,3,opt,name=mac_payload,json=macPayload,oneof"`
}
type Message_JoinRequestPayload struct {
	JoinRequestPayload *JoinRequestPayload `protobuf:"bytes,4,opt,name=join_request_payload,json=joinRequestPayload,oneof"`
}
type Message_JoinAcceptPayload struct {
	JoinAcceptPayload *JoinAcceptPayload `protobuf:"bytes,5,opt,name=join_accept_payload,json=joinAcceptPayload,oneof"`
}

func (*Message_MACPayload) isMessage_Payload()         {}
func (*Message_JoinRequestPayload) isMessage_Payload() {}
func (*Message_JoinAcceptPayload) isMessage_Payload()  {}

func (m *Message) GetPayload() isMessage_Payload {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (m *Message) GetMIC() []byte {
	if m != nil {
		return m.MIC
	}
	return nil
}

func (m *Message) GetMACPayload() *MACPayload {
	if x, ok := m.GetPayload().(*Message_MACPayload); ok {
		return x.MACPayload
	}
	return nil
}

func (m *Message) GetJoinRequestPayload() *JoinRequestPayload {
	if x, ok := m.GetPayload().(*Message_JoinRequestPayload); ok {
		return x.JoinRequestPayload
	}
	return nil
}

func (m *Message) GetJoinAcceptPayload() *JoinAcceptPayload {
	if x, ok := m.GetPayload().(*Message_JoinAcceptPayload); ok {
		return x.JoinAcceptPayload
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Message) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _Message_OneofMarshaler, _Message_OneofUnmarshaler, _Message_OneofSizer, []interface{}{
		(*Message_MACPayload)(nil),
		(*Message_JoinRequestPayload)(nil),
		(*Message_JoinAcceptPayload)(nil),
	}
}

func _Message_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Message)
	// Payload
	switch x := m.Payload.(type) {
	case *Message_MACPayload:
		_ = b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.MACPayload); err != nil {
			return err
		}
	case *Message_JoinRequestPayload:
		_ = b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.JoinRequestPayload); err != nil {
			return err
		}
	case *Message_JoinAcceptPayload:
		_ = b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.JoinAcceptPayload); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("Message.Payload has unexpected type %T", x)
	}
	return nil
}

func _Message_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Message)
	switch tag {
	case 3: // Payload.mac_payload
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(MACPayload)
		err := b.DecodeMessage(msg)
		m.Payload = &Message_MACPayload{msg}
		return true, err
	case 4: // Payload.join_request_payload
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(JoinRequestPayload)
		err := b.DecodeMessage(msg)
		m.Payload = &Message_JoinRequestPayload{msg}
		return true, err
	case 5: // Payload.join_accept_payload
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(JoinAcceptPayload)
		err := b.DecodeMessage(msg)
		m.Payload = &Message_JoinAcceptPayload{msg}
		return true, err
	default:
		return false, nil
	}
}

func _Message_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*Message)
	// Payload
	switch x := m.Payload.(type) {
	case *Message_MACPayload:
		s := proto.Size(x.MACPayload)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Message_JoinRequestPayload:
		s := proto.Size(x.JoinRequestPayload)
		n += proto.SizeVarint(4<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Message_JoinAcceptPayload:
		s := proto.Size(x.JoinAcceptPayload)
		n += proto.SizeVarint(5<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type MHDR struct {
	MType MType `protobuf:"varint,1,opt,name=m_type,json=mType,proto3,enum=lorawan.MType" json:"m_type,omitempty"`
	Major Major `protobuf:"varint,2,opt,name=major,proto3,enum=lorawan.Major" json:"major,omitempty"`
}

func (m *MHDR) Reset()                    { *m = MHDR{} }
func (m *MHDR) String() string            { return proto.CompactTextString(m) }
func (*MHDR) ProtoMessage()               {}
func (*MHDR) Descriptor() ([]byte, []int) { return fileDescriptorLorawan, []int{4} }

func (m *MHDR) GetMType() MType {
	if m != nil {
		return m.MType
	}
	return MType_JOIN_REQUEST
}

func (m *MHDR) GetMajor() Major {
	if m != nil {
		return m.Major
	}
	return Major_LORAWAN_R1
}

type MACPayload struct {
	FHDR       `protobuf:"bytes,1,opt,name=f_hdr,json=fHdr,embedded=f_hdr" json:"f_hdr"`
	FPort      int32  `protobuf:"varint,2,opt,name=f_port,json=fPort,proto3" json:"f_port,omitempty"`
	FRMPayload []byte `protobuf:"bytes,3,opt,name=frm_payload,json=frmPayload,proto3" json:"frm_payload,omitempty"`
}

func (m *MACPayload) Reset()                    { *m = MACPayload{} }
func (m *MACPayload) String() string            { return proto.CompactTextString(m) }
func (*MACPayload) ProtoMessage()               {}
func (*MACPayload) Descriptor() ([]byte, []int) { return fileDescriptorLorawan, []int{5} }

func (m *MACPayload) GetFPort() int32 {
	if m != nil {
		return m.FPort
	}
	return 0
}

func (m *MACPayload) GetFRMPayload() []byte {
	if m != nil {
		return m.FRMPayload
	}
	return nil
}

type FHDR struct {
	DevAddr github_com_TheThingsNetwork_ttn_core_types.DevAddr `protobuf:"bytes,1,opt,name=dev_addr,json=devAddr,proto3,customtype=github.com/TheThingsNetwork/ttn/core/types.DevAddr" json:"dev_addr"`
	FCtrl   `protobuf:"bytes,2,opt,name=f_ctrl,json=fCtrl,embedded=f_ctrl" json:"f_ctrl"`
	FCnt    uint32       `protobuf:"varint,3,opt,name=f_cnt,json=fCnt,proto3" json:"f_cnt,omitempty"`
	FOpts   []MACCommand `protobuf:"bytes,4,rep,name=f_opts,json=fOpts" json:"f_opts"`
}

func (m *FHDR) Reset()                    { *m = FHDR{} }
func (m *FHDR) String() string            { return proto.CompactTextString(m) }
func (*FHDR) ProtoMessage()               {}
func (*FHDR) Descriptor() ([]byte, []int) { return fileDescriptorLorawan, []int{6} }

func (m *FHDR) GetFCnt() uint32 {
	if m != nil {
		return m.FCnt
	}
	return 0
}

func (m *FHDR) GetFOpts() []MACCommand {
	if m != nil {
		return m.FOpts
	}
	return nil
}

type FCtrl struct {
	ADR       bool `protobuf:"varint,1,opt,name=adr,proto3" json:"adr,omitempty"`
	ADRAckReq bool `protobuf:"varint,2,opt,name=adr_ack_req,json=adrAckReq,proto3" json:"adr_ack_req,omitempty"`
	Ack       bool `protobuf:"varint,3,opt,name=ack,proto3" json:"ack,omitempty"`
	FPending  bool `protobuf:"varint,4,opt,name=f_pending,json=fPending,proto3" json:"f_pending,omitempty"`
}

func (m *FCtrl) Reset()                    { *m = FCtrl{} }
func (m *FCtrl) String() string            { return proto.CompactTextString(m) }
func (*FCtrl) ProtoMessage()               {}
func (*FCtrl) Descriptor() ([]byte, []int) { return fileDescriptorLorawan, []int{7} }

func (m *FCtrl) GetADR() bool {
	if m != nil {
		return m.ADR
	}
	return false
}

func (m *FCtrl) GetADRAckReq() bool {
	if m != nil {
		return m.ADRAckReq
	}
	return false
}

func (m *FCtrl) GetAck() bool {
	if m != nil {
		return m.Ack
	}
	return false
}

func (m *FCtrl) GetFPending() bool {
	if m != nil {
		return m.FPending
	}
	return false
}

type MACCommand struct {
	CID     uint32 `protobuf:"varint,1,opt,name=cid,proto3" json:"cid,omitempty"`
	Payload []byte `protobuf:"bytes,2,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (m *MACCommand) Reset()                    { *m = MACCommand{} }
func (m *MACCommand) String() string            { return proto.CompactTextString(m) }
func (*MACCommand) ProtoMessage()               {}
func (*MACCommand) Descriptor() ([]byte, []int) { return fileDescriptorLorawan, []int{8} }

func (m *MACCommand) GetCID() uint32 {
	if m != nil {
		return m.CID
	}
	return 0
}

func (m *MACCommand) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

type JoinRequestPayload struct {
	AppEUI   github_com_TheThingsNetwork_ttn_core_types.AppEUI   `protobuf:"bytes,1,opt,name=app_eui,json=appEui,proto3,customtype=github.com/TheThingsNetwork/ttn/core/types.AppEUI" json:"app_eui"`
	DevEUI   github_com_TheThingsNetwork_ttn_core_types.DevEUI   `protobuf:"bytes,2,opt,name=dev_eui,json=devEui,proto3,customtype=github.com/TheThingsNetwork/ttn/core/types.DevEUI" json:"dev_eui"`
	DevNonce github_com_TheThingsNetwork_ttn_core_types.DevNonce `protobuf:"bytes,3,opt,name=dev_nonce,json=devNonce,proto3,customtype=github.com/TheThingsNetwork/ttn/core/types.DevNonce" json:"dev_nonce"`
}

func (m *JoinRequestPayload) Reset()                    { *m = JoinRequestPayload{} }
func (m *JoinRequestPayload) String() string            { return proto.CompactTextString(m) }
func (*JoinRequestPayload) ProtoMessage()               {}
func (*JoinRequestPayload) Descriptor() ([]byte, []int) { return fileDescriptorLorawan, []int{9} }

type JoinAcceptPayload struct {
	Encrypted  []byte                                              `protobuf:"bytes,1,opt,name=encrypted,proto3" json:"encrypted,omitempty"`
	AppNonce   github_com_TheThingsNetwork_ttn_core_types.AppNonce `protobuf:"bytes,2,opt,name=app_nonce,json=appNonce,proto3,customtype=github.com/TheThingsNetwork/ttn/core/types.AppNonce" json:"app_nonce"`
	NetID      github_com_TheThingsNetwork_ttn_core_types.NetID    `protobuf:"bytes,3,opt,name=net_id,json=netId,proto3,customtype=github.com/TheThingsNetwork/ttn/core/types.NetID" json:"net_id"`
	DevAddr    github_com_TheThingsNetwork_ttn_core_types.DevAddr  `protobuf:"bytes,4,opt,name=dev_addr,json=devAddr,proto3,customtype=github.com/TheThingsNetwork/ttn/core/types.DevAddr" json:"dev_addr"`
	DLSettings `protobuf:"bytes,5,opt,name=dl_settings,json=dlSettings,embedded=dl_settings" json:"dl_settings"`
	RxDelay    uint32  `protobuf:"varint,6,opt,name=rx_delay,json=rxDelay,proto3" json:"rx_delay,omitempty"`
	CFList     *CFList `protobuf:"bytes,7,opt,name=cf_list,json=cfList" json:"cf_list,omitempty"`
}

func (m *JoinAcceptPayload) Reset()                    { *m = JoinAcceptPayload{} }
func (m *JoinAcceptPayload) String() string            { return proto.CompactTextString(m) }
func (*JoinAcceptPayload) ProtoMessage()               {}
func (*JoinAcceptPayload) Descriptor() ([]byte, []int) { return fileDescriptorLorawan, []int{10} }

func (m *JoinAcceptPayload) GetEncrypted() []byte {
	if m != nil {
		return m.Encrypted
	}
	return nil
}

func (m *JoinAcceptPayload) GetRxDelay() uint32 {
	if m != nil {
		return m.RxDelay
	}
	return 0
}

func (m *JoinAcceptPayload) GetCFList() *CFList {
	if m != nil {
		return m.CFList
	}
	return nil
}

type DLSettings struct {
	Rx1DROffset uint32 `protobuf:"varint,1,opt,name=rx1_dr_offset,json=rx1DrOffset,proto3" json:"rx1_dr_offset,omitempty"`
	Rx2DR       uint32 `protobuf:"varint,2,opt,name=rx2_dr,json=rx2Dr,proto3" json:"rx2_dr,omitempty"`
}

func (m *DLSettings) Reset()                    { *m = DLSettings{} }
func (m *DLSettings) String() string            { return proto.CompactTextString(m) }
func (*DLSettings) ProtoMessage()               {}
func (*DLSettings) Descriptor() ([]byte, []int) { return fileDescriptorLorawan, []int{11} }

func (m *DLSettings) GetRx1DROffset() uint32 {
	if m != nil {
		return m.Rx1DROffset
	}
	return 0
}

func (m *DLSettings) GetRx2DR() uint32 {
	if m != nil {
		return m.Rx2DR
	}
	return 0
}

type CFList struct {
	Freq []uint32 `protobuf:"varint,1,rep,packed,name=freq" json:"freq,omitempty"`
}

func (m *CFList) Reset()                    { *m = CFList{} }
func (m *CFList) String() string            { return proto.CompactTextString(m) }
func (*CFList) ProtoMessage()               {}
func (*CFList) Descriptor() ([]byte, []int) { return fileDescriptorLorawan, []int{12} }

func (m *CFList) GetFreq() []uint32 {
	if m != nil {
		return m.Freq
	}
	return nil
}

func init() {
	proto.RegisterType((*Metadata)(nil), "lorawan.Metadata")
	proto.RegisterType((*TxConfiguration)(nil), "lorawan.TxConfiguration")
	proto.RegisterType((*ActivationMetadata)(nil), "lorawan.ActivationMetadata")
	proto.RegisterType((*Message)(nil), "lorawan.Message")
	proto.RegisterType((*MHDR)(nil), "lorawan.MHDR")
	proto.RegisterType((*MACPayload)(nil), "lorawan.MACPayload")
	proto.RegisterType((*FHDR)(nil), "lorawan.FHDR")
	proto.RegisterType((*FCtrl)(nil), "lorawan.FCtrl")
	proto.RegisterType((*MACCommand)(nil), "lorawan.MACCommand")
	proto.RegisterType((*JoinRequestPayload)(nil), "lorawan.JoinRequestPayload")
	proto.RegisterType((*JoinAcceptPayload)(nil), "lorawan.JoinAcceptPayload")
	proto.RegisterType((*DLSettings)(nil), "lorawan.DLSettings")
	proto.RegisterType((*CFList)(nil), "lorawan.CFList")
	proto.RegisterEnum("lorawan.Modulation", Modulation_name, Modulation_value)
	proto.RegisterEnum("lorawan.FrequencyPlan", FrequencyPlan_name, FrequencyPlan_value)
	proto.RegisterEnum("lorawan.Major", Major_name, Major_value)
	proto.RegisterEnum("lorawan.MType", MType_name, MType_value)
}
func (m *Metadata) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Metadata) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Modulation != 0 {
		dAtA[i] = 0x58
		i++
		i = encodeVarintLorawan(dAtA, i, uint64(m.Modulation))
	}
	if len(m.DataRate) > 0 {
		dAtA[i] = 0x62
		i++
		i = encodeVarintLorawan(dAtA, i, uint64(len(m.DataRate)))
		i += copy(dAtA[i:], m.DataRate)
	}
	if m.BitRate != 0 {
		dAtA[i] = 0x68
		i++
		i = encodeVarintLorawan(dAtA, i, uint64(m.BitRate))
	}
	if len(m.CodingRate) > 0 {
		dAtA[i] = 0x72
		i++
		i = encodeVarintLorawan(dAtA, i, uint64(len(m.CodingRate)))
		i += copy(dAtA[i:], m.CodingRate)
	}
	if m.FCnt != 0 {
		dAtA[i] = 0x78
		i++
		i = encodeVarintLorawan(dAtA, i, uint64(m.FCnt))
	}
	if m.FrequencyPlan != 0 {
		dAtA[i] = 0x80
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintLorawan(dAtA, i, uint64(m.FrequencyPlan))
	}
	return i, nil
}

func (m *TxConfiguration) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TxConfiguration) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Modulation != 0 {
		dAtA[i] = 0x58
		i++
		i = encodeVarintLorawan(dAtA, i, uint64(m.Modulation))
	}
	if len(m.DataRate) > 0 {
		dAtA[i] = 0x62
		i++
		i = encodeVarintLorawan(dAtA, i, uint64(len(m.DataRate)))
		i += copy(dAtA[i:], m.DataRate)
	}
	if m.BitRate != 0 {
		dAtA[i] = 0x68
		i++
		i = encodeVarintLorawan(dAtA, i, uint64(m.BitRate))
	}
	if len(m.CodingRate) > 0 {
		dAtA[i] = 0x72
		i++
		i = encodeVarintLorawan(dAtA, i, uint64(len(m.CodingRate)))
		i += copy(dAtA[i:], m.CodingRate)
	}
	if m.FCnt != 0 {
		dAtA[i] = 0x78
		i++
		i = encodeVarintLorawan(dAtA, i, uint64(m.FCnt))
	}
	return i, nil
}

func (m *ActivationMetadata) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ActivationMetadata) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.AppEUI != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintLorawan(dAtA, i, uint64(m.AppEUI.Size()))
		n1, err := m.AppEUI.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.DevEUI != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintLorawan(dAtA, i, uint64(m.DevEUI.Size()))
		n2, err := m.DevEUI.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if m.DevAddr != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintLorawan(dAtA, i, uint64(m.DevAddr.Size()))
		n3, err := m.DevAddr.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	if m.NwkSKey != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintLorawan(dAtA, i, uint64(m.NwkSKey.Size()))
		n4, err := m.NwkSKey.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	if m.Rx1DROffset != 0 {
		dAtA[i] = 0x58
		i++
		i = encodeVarintLorawan(dAtA, i, uint64(m.Rx1DROffset))
	}
	if m.Rx2DR != 0 {
		dAtA[i] = 0x60
		i++
		i = encodeVarintLorawan(dAtA, i, uint64(m.Rx2DR))
	}
	if m.RxDelay != 0 {
		dAtA[i] = 0x68
		i++
		i = encodeVarintLorawan(dAtA, i, uint64(m.RxDelay))
	}
	if m.CFList != nil {
		dAtA[i] = 0x72
		i++
		i = encodeVarintLorawan(dAtA, i, uint64(m.CFList.Size()))
		n5, err := m.CFList.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	if m.FrequencyPlan != 0 {
		dAtA[i] = 0x78
		i++
		i = encodeVarintLorawan(dAtA, i, uint64(m.FrequencyPlan))
	}
	return i, nil
}

func (m *Message) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Message) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintLorawan(dAtA, i, uint64(m.MHDR.Size()))
	n6, err := m.MHDR.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n6
	if len(m.MIC) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintLorawan(dAtA, i, uint64(len(m.MIC)))
		i += copy(dAtA[i:], m.MIC)
	}
	if m.Payload != nil {
		nn7, err := m.Payload.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn7
	}
	return i, nil
}

func (m *Message_MACPayload) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.MACPayload != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintLorawan(dAtA, i, uint64(m.MACPayload.Size()))
		n8, err := m.MACPayload.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n8
	}
	return i, nil
}
func (m *Message_JoinRequestPayload) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.JoinRequestPayload != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintLorawan(dAtA, i, uint64(m.JoinRequestPayload.Size()))
		n9, err := m.JoinRequestPayload.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n9
	}
	return i, nil
}
func (m *Message_JoinAcceptPayload) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.JoinAcceptPayload != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintLorawan(dAtA, i, uint64(m.JoinAcceptPayload.Size()))
		n10, err := m.JoinAcceptPayload.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n10
	}
	return i, nil
}
func (m *MHDR) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MHDR) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.MType != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintLorawan(dAtA, i, uint64(m.MType))
	}
	if m.Major != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintLorawan(dAtA, i, uint64(m.Major))
	}
	return i, nil
}

func (m *MACPayload) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MACPayload) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintLorawan(dAtA, i, uint64(m.FHDR.Size()))
	n11, err := m.FHDR.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n11
	if m.FPort != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintLorawan(dAtA, i, uint64(m.FPort))
	}
	if len(m.FRMPayload) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintLorawan(dAtA, i, uint64(len(m.FRMPayload)))
		i += copy(dAtA[i:], m.FRMPayload)
	}
	return i, nil
}

func (m *FHDR) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FHDR) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintLorawan(dAtA, i, uint64(m.DevAddr.Size()))
	n12, err := m.DevAddr.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n12
	dAtA[i] = 0x12
	i++
	i = encodeVarintLorawan(dAtA, i, uint64(m.FCtrl.Size()))
	n13, err := m.FCtrl.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n13
	if m.FCnt != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintLorawan(dAtA, i, uint64(m.FCnt))
	}
	if len(m.FOpts) > 0 {
		for _, msg := range m.FOpts {
			dAtA[i] = 0x22
			i++
			i = encodeVarintLorawan(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *FCtrl) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FCtrl) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ADR {
		dAtA[i] = 0x8
		i++
		if m.ADR {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.ADRAckReq {
		dAtA[i] = 0x10
		i++
		if m.ADRAckReq {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Ack {
		dAtA[i] = 0x18
		i++
		if m.Ack {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.FPending {
		dAtA[i] = 0x20
		i++
		if m.FPending {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *MACCommand) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MACCommand) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.CID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintLorawan(dAtA, i, uint64(m.CID))
	}
	if len(m.Payload) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintLorawan(dAtA, i, uint64(len(m.Payload)))
		i += copy(dAtA[i:], m.Payload)
	}
	return i, nil
}

func (m *JoinRequestPayload) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *JoinRequestPayload) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintLorawan(dAtA, i, uint64(m.AppEUI.Size()))
	n14, err := m.AppEUI.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n14
	dAtA[i] = 0x12
	i++
	i = encodeVarintLorawan(dAtA, i, uint64(m.DevEUI.Size()))
	n15, err := m.DevEUI.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n15
	dAtA[i] = 0x1a
	i++
	i = encodeVarintLorawan(dAtA, i, uint64(m.DevNonce.Size()))
	n16, err := m.DevNonce.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n16
	return i, nil
}

func (m *JoinAcceptPayload) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *JoinAcceptPayload) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Encrypted) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintLorawan(dAtA, i, uint64(len(m.Encrypted)))
		i += copy(dAtA[i:], m.Encrypted)
	}
	dAtA[i] = 0x12
	i++
	i = encodeVarintLorawan(dAtA, i, uint64(m.AppNonce.Size()))
	n17, err := m.AppNonce.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n17
	dAtA[i] = 0x1a
	i++
	i = encodeVarintLorawan(dAtA, i, uint64(m.NetID.Size()))
	n18, err := m.NetID.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n18
	dAtA[i] = 0x22
	i++
	i = encodeVarintLorawan(dAtA, i, uint64(m.DevAddr.Size()))
	n19, err := m.DevAddr.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n19
	dAtA[i] = 0x2a
	i++
	i = encodeVarintLorawan(dAtA, i, uint64(m.DLSettings.Size()))
	n20, err := m.DLSettings.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n20
	if m.RxDelay != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintLorawan(dAtA, i, uint64(m.RxDelay))
	}
	if m.CFList != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintLorawan(dAtA, i, uint64(m.CFList.Size()))
		n21, err := m.CFList.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n21
	}
	return i, nil
}

func (m *DLSettings) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DLSettings) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Rx1DROffset != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintLorawan(dAtA, i, uint64(m.Rx1DROffset))
	}
	if m.Rx2DR != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintLorawan(dAtA, i, uint64(m.Rx2DR))
	}
	return i, nil
}

func (m *CFList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CFList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Freq) > 0 {
		dAtA23 := make([]byte, len(m.Freq)*10)
		var j22 int
		for _, num := range m.Freq {
			for num >= 1<<7 {
				dAtA23[j22] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j22++
			}
			dAtA23[j22] = uint8(num)
			j22++
		}
		dAtA[i] = 0xa
		i++
		i = encodeVarintLorawan(dAtA, i, uint64(j22))
		i += copy(dAtA[i:], dAtA23[:j22])
	}
	return i, nil
}

func encodeFixed64Lorawan(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Lorawan(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintLorawan(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Metadata) Size() (n int) {
	var l int
	_ = l
	if m.Modulation != 0 {
		n += 1 + sovLorawan(uint64(m.Modulation))
	}
	l = len(m.DataRate)
	if l > 0 {
		n += 1 + l + sovLorawan(uint64(l))
	}
	if m.BitRate != 0 {
		n += 1 + sovLorawan(uint64(m.BitRate))
	}
	l = len(m.CodingRate)
	if l > 0 {
		n += 1 + l + sovLorawan(uint64(l))
	}
	if m.FCnt != 0 {
		n += 1 + sovLorawan(uint64(m.FCnt))
	}
	if m.FrequencyPlan != 0 {
		n += 2 + sovLorawan(uint64(m.FrequencyPlan))
	}
	return n
}

func (m *TxConfiguration) Size() (n int) {
	var l int
	_ = l
	if m.Modulation != 0 {
		n += 1 + sovLorawan(uint64(m.Modulation))
	}
	l = len(m.DataRate)
	if l > 0 {
		n += 1 + l + sovLorawan(uint64(l))
	}
	if m.BitRate != 0 {
		n += 1 + sovLorawan(uint64(m.BitRate))
	}
	l = len(m.CodingRate)
	if l > 0 {
		n += 1 + l + sovLorawan(uint64(l))
	}
	if m.FCnt != 0 {
		n += 1 + sovLorawan(uint64(m.FCnt))
	}
	return n
}

func (m *ActivationMetadata) Size() (n int) {
	var l int
	_ = l
	if m.AppEUI != nil {
		l = m.AppEUI.Size()
		n += 1 + l + sovLorawan(uint64(l))
	}
	if m.DevEUI != nil {
		l = m.DevEUI.Size()
		n += 1 + l + sovLorawan(uint64(l))
	}
	if m.DevAddr != nil {
		l = m.DevAddr.Size()
		n += 1 + l + sovLorawan(uint64(l))
	}
	if m.NwkSKey != nil {
		l = m.NwkSKey.Size()
		n += 1 + l + sovLorawan(uint64(l))
	}
	if m.Rx1DROffset != 0 {
		n += 1 + sovLorawan(uint64(m.Rx1DROffset))
	}
	if m.Rx2DR != 0 {
		n += 1 + sovLorawan(uint64(m.Rx2DR))
	}
	if m.RxDelay != 0 {
		n += 1 + sovLorawan(uint64(m.RxDelay))
	}
	if m.CFList != nil {
		l = m.CFList.Size()
		n += 1 + l + sovLorawan(uint64(l))
	}
	if m.FrequencyPlan != 0 {
		n += 1 + sovLorawan(uint64(m.FrequencyPlan))
	}
	return n
}

func (m *Message) Size() (n int) {
	var l int
	_ = l
	l = m.MHDR.Size()
	n += 1 + l + sovLorawan(uint64(l))
	l = len(m.MIC)
	if l > 0 {
		n += 1 + l + sovLorawan(uint64(l))
	}
	if m.Payload != nil {
		n += m.Payload.Size()
	}
	return n
}

func (m *Message_MACPayload) Size() (n int) {
	var l int
	_ = l
	if m.MACPayload != nil {
		l = m.MACPayload.Size()
		n += 1 + l + sovLorawan(uint64(l))
	}
	return n
}
func (m *Message_JoinRequestPayload) Size() (n int) {
	var l int
	_ = l
	if m.JoinRequestPayload != nil {
		l = m.JoinRequestPayload.Size()
		n += 1 + l + sovLorawan(uint64(l))
	}
	return n
}
func (m *Message_JoinAcceptPayload) Size() (n int) {
	var l int
	_ = l
	if m.JoinAcceptPayload != nil {
		l = m.JoinAcceptPayload.Size()
		n += 1 + l + sovLorawan(uint64(l))
	}
	return n
}
func (m *MHDR) Size() (n int) {
	var l int
	_ = l
	if m.MType != 0 {
		n += 1 + sovLorawan(uint64(m.MType))
	}
	if m.Major != 0 {
		n += 1 + sovLorawan(uint64(m.Major))
	}
	return n
}

func (m *MACPayload) Size() (n int) {
	var l int
	_ = l
	l = m.FHDR.Size()
	n += 1 + l + sovLorawan(uint64(l))
	if m.FPort != 0 {
		n += 1 + sovLorawan(uint64(m.FPort))
	}
	l = len(m.FRMPayload)
	if l > 0 {
		n += 1 + l + sovLorawan(uint64(l))
	}
	return n
}

func (m *FHDR) Size() (n int) {
	var l int
	_ = l
	l = m.DevAddr.Size()
	n += 1 + l + sovLorawan(uint64(l))
	l = m.FCtrl.Size()
	n += 1 + l + sovLorawan(uint64(l))
	if m.FCnt != 0 {
		n += 1 + sovLorawan(uint64(m.FCnt))
	}
	if len(m.FOpts) > 0 {
		for _, e := range m.FOpts {
			l = e.Size()
			n += 1 + l + sovLorawan(uint64(l))
		}
	}
	return n
}

func (m *FCtrl) Size() (n int) {
	var l int
	_ = l
	if m.ADR {
		n += 2
	}
	if m.ADRAckReq {
		n += 2
	}
	if m.Ack {
		n += 2
	}
	if m.FPending {
		n += 2
	}
	return n
}

func (m *MACCommand) Size() (n int) {
	var l int
	_ = l
	if m.CID != 0 {
		n += 1 + sovLorawan(uint64(m.CID))
	}
	l = len(m.Payload)
	if l > 0 {
		n += 1 + l + sovLorawan(uint64(l))
	}
	return n
}

func (m *JoinRequestPayload) Size() (n int) {
	var l int
	_ = l
	l = m.AppEUI.Size()
	n += 1 + l + sovLorawan(uint64(l))
	l = m.DevEUI.Size()
	n += 1 + l + sovLorawan(uint64(l))
	l = m.DevNonce.Size()
	n += 1 + l + sovLorawan(uint64(l))
	return n
}

func (m *JoinAcceptPayload) Size() (n int) {
	var l int
	_ = l
	l = len(m.Encrypted)
	if l > 0 {
		n += 1 + l + sovLorawan(uint64(l))
	}
	l = m.AppNonce.Size()
	n += 1 + l + sovLorawan(uint64(l))
	l = m.NetID.Size()
	n += 1 + l + sovLorawan(uint64(l))
	l = m.DevAddr.Size()
	n += 1 + l + sovLorawan(uint64(l))
	l = m.DLSettings.Size()
	n += 1 + l + sovLorawan(uint64(l))
	if m.RxDelay != 0 {
		n += 1 + sovLorawan(uint64(m.RxDelay))
	}
	if m.CFList != nil {
		l = m.CFList.Size()
		n += 1 + l + sovLorawan(uint64(l))
	}
	return n
}

func (m *DLSettings) Size() (n int) {
	var l int
	_ = l
	if m.Rx1DROffset != 0 {
		n += 1 + sovLorawan(uint64(m.Rx1DROffset))
	}
	if m.Rx2DR != 0 {
		n += 1 + sovLorawan(uint64(m.Rx2DR))
	}
	return n
}

func (m *CFList) Size() (n int) {
	var l int
	_ = l
	if len(m.Freq) > 0 {
		l = 0
		for _, e := range m.Freq {
			l += sovLorawan(uint64(e))
		}
		n += 1 + sovLorawan(uint64(l)) + l
	}
	return n
}

func sovLorawan(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozLorawan(x uint64) (n int) {
	return sovLorawan(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Metadata) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLorawan
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Metadata: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Metadata: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Modulation", wireType)
			}
			m.Modulation = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Modulation |= (Modulation(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataRate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLorawan
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DataRate = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BitRate", wireType)
			}
			m.BitRate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BitRate |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CodingRate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLorawan
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CodingRate = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FCnt", wireType)
			}
			m.FCnt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FCnt |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FrequencyPlan", wireType)
			}
			m.FrequencyPlan = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FrequencyPlan |= (FrequencyPlan(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLorawan(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLorawan
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TxConfiguration) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLorawan
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TxConfiguration: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TxConfiguration: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Modulation", wireType)
			}
			m.Modulation = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Modulation |= (Modulation(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataRate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLorawan
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DataRate = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BitRate", wireType)
			}
			m.BitRate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BitRate |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CodingRate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLorawan
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CodingRate = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FCnt", wireType)
			}
			m.FCnt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FCnt |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLorawan(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLorawan
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ActivationMetadata) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLorawan
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ActivationMetadata: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ActivationMetadata: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppEUI", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthLorawan
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v github_com_TheThingsNetwork_ttn_core_types.AppEUI
			m.AppEUI = &v
			if err := m.AppEUI.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DevEUI", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthLorawan
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v github_com_TheThingsNetwork_ttn_core_types.DevEUI
			m.DevEUI = &v
			if err := m.DevEUI.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DevAddr", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthLorawan
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v github_com_TheThingsNetwork_ttn_core_types.DevAddr
			m.DevAddr = &v
			if err := m.DevAddr.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NwkSKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthLorawan
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v github_com_TheThingsNetwork_ttn_core_types.NwkSKey
			m.NwkSKey = &v
			if err := m.NwkSKey.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rx1DROffset", wireType)
			}
			m.Rx1DROffset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Rx1DROffset |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rx2DR", wireType)
			}
			m.Rx2DR = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Rx2DR |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RxDelay", wireType)
			}
			m.RxDelay = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RxDelay |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CFList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLorawan
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CFList == nil {
				m.CFList = &CFList{}
			}
			if err := m.CFList.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FrequencyPlan", wireType)
			}
			m.FrequencyPlan = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FrequencyPlan |= (FrequencyPlan(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLorawan(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLorawan
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Message) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLorawan
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Message: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Message: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MHDR", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLorawan
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MHDR.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MIC", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthLorawan
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MIC = append(m.MIC[:0], dAtA[iNdEx:postIndex]...)
			if m.MIC == nil {
				m.MIC = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MACPayload", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLorawan
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &MACPayload{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Payload = &Message_MACPayload{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JoinRequestPayload", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLorawan
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &JoinRequestPayload{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Payload = &Message_JoinRequestPayload{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JoinAcceptPayload", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLorawan
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &JoinAcceptPayload{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Payload = &Message_JoinAcceptPayload{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLorawan(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLorawan
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MHDR) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLorawan
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MHDR: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MHDR: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MType", wireType)
			}
			m.MType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MType |= (MType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Major", wireType)
			}
			m.Major = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Major |= (Major(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLorawan(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLorawan
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MACPayload) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLorawan
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MACPayload: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MACPayload: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FHDR", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLorawan
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.FHDR.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FPort", wireType)
			}
			m.FPort = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FPort |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FRMPayload", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthLorawan
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FRMPayload = append(m.FRMPayload[:0], dAtA[iNdEx:postIndex]...)
			if m.FRMPayload == nil {
				m.FRMPayload = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLorawan(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLorawan
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FHDR) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLorawan
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FHDR: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FHDR: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DevAddr", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthLorawan
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.DevAddr.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FCtrl", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLorawan
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.FCtrl.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FCnt", wireType)
			}
			m.FCnt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FCnt |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FOpts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLorawan
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FOpts = append(m.FOpts, MACCommand{})
			if err := m.FOpts[len(m.FOpts)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLorawan(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLorawan
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FCtrl) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLorawan
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FCtrl: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FCtrl: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ADR", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ADR = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ADRAckReq", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ADRAckReq = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ack", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Ack = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FPending", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.FPending = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipLorawan(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLorawan
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MACCommand) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLorawan
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MACCommand: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MACCommand: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CID", wireType)
			}
			m.CID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CID |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Payload", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthLorawan
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Payload = append(m.Payload[:0], dAtA[iNdEx:postIndex]...)
			if m.Payload == nil {
				m.Payload = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLorawan(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLorawan
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *JoinRequestPayload) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLorawan
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: JoinRequestPayload: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: JoinRequestPayload: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppEUI", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthLorawan
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.AppEUI.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DevEUI", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthLorawan
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.DevEUI.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DevNonce", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthLorawan
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.DevNonce.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLorawan(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLorawan
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *JoinAcceptPayload) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLorawan
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: JoinAcceptPayload: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: JoinAcceptPayload: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Encrypted", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthLorawan
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Encrypted = append(m.Encrypted[:0], dAtA[iNdEx:postIndex]...)
			if m.Encrypted == nil {
				m.Encrypted = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppNonce", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthLorawan
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.AppNonce.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NetID", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthLorawan
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.NetID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DevAddr", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthLorawan
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.DevAddr.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DLSettings", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLorawan
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.DLSettings.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RxDelay", wireType)
			}
			m.RxDelay = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RxDelay |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CFList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLorawan
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CFList == nil {
				m.CFList = &CFList{}
			}
			if err := m.CFList.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLorawan(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLorawan
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DLSettings) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLorawan
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DLSettings: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DLSettings: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rx1DROffset", wireType)
			}
			m.Rx1DROffset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Rx1DROffset |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rx2DR", wireType)
			}
			m.Rx2DR = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Rx2DR |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLorawan(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLorawan
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CFList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLorawan
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CFList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CFList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowLorawan
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (uint32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Freq = append(m.Freq, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowLorawan
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthLorawan
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowLorawan
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (uint32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Freq = append(m.Freq, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Freq", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLorawan(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLorawan
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipLorawan(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowLorawan
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthLorawan
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowLorawan
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipLorawan(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthLorawan = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowLorawan   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("github.com/TheThingsNetwork/api/protocol/lorawan/lorawan.proto", fileDescriptorLorawan)
}

var fileDescriptorLorawan = []byte{
	// 1478 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x57, 0xcd, 0x6f, 0x22, 0xc9,
	0x15, 0x77, 0x03, 0xcd, 0xc7, 0xc3, 0xe0, 0xde, 0x9a, 0x49, 0x42, 0x76, 0x57, 0x83, 0x85, 0x36,
	0xd2, 0x64, 0x94, 0x05, 0x0c, 0xe3, 0xaf, 0x44, 0x3b, 0x51, 0xf3, 0xa5, 0x61, 0xc7, 0xc6, 0x6c,
	0xd9, 0x68, 0x46, 0xd1, 0x4a, 0xa5, 0x76, 0x77, 0x35, 0x6e, 0x1b, 0xba, 0x7b, 0x8a, 0xb2, 0x0d,
	0x39, 0x45, 0xf9, 0x6b, 0xa2, 0x3d, 0x47, 0xca, 0x3f, 0x90, 0xc3, 0x5e, 0x22, 0xed, 0x25, 0x39,
	0xec, 0x01, 0x45, 0x9c, 0xf3, 0x47, 0x44, 0x55, 0xdd, 0x7c, 0x18, 0xcf, 0x46, 0xb1, 0xb3, 0x87,
	0x9c, 0xfa, 0x7d, 0xd5, 0xaf, 0x5e, 0xd5, 0xfb, 0xbd, 0x7a, 0x00, 0xaf, 0xfa, 0x0e, 0xbf, 0xb8,
	0x3e, 0x2f, 0x9a, 0xde, 0xb0, 0x74, 0x76, 0x41, 0xcf, 0x2e, 0x1c, 0xb7, 0x3f, 0xea, 0x50, 0x7e,
	0xeb, 0xb1, 0xab, 0x92, 0xe1, 0x3b, 0x25, 0x9f, 0x79, 0xdc, 0x33, 0xbd, 0x41, 0x69, 0xe0, 0x31,
	0xe3, 0xd6, 0x70, 0xe7, 0xdf, 0xa2, 0x74, 0xa0, 0x44, 0xa8, 0x7e, 0xfc, 0xf9, 0x0a, 0x50, 0xdf,
	0xeb, 0x7b, 0xc1, 0xc2, 0xf3, 0x6b, 0x5b, 0x6a, 0x52, 0x91, 0x52, 0xb0, 0xae, 0xf0, 0x2f, 0x05,
	0x92, 0xc7, 0x94, 0x1b, 0x96, 0xc1, 0x0d, 0x54, 0x05, 0x18, 0x7a, 0xd6, 0xf5, 0xc0, 0xe0, 0x8e,
	0xe7, 0xe6, 0xd2, 0xdb, 0xca, 0xf3, 0x6c, 0xe5, 0x49, 0x71, 0xbe, 0xd1, 0xf1, 0xc2, 0x85, 0x57,
	0xc2, 0xd0, 0x27, 0x90, 0x12, 0x8b, 0x09, 0x33, 0x38, 0xcd, 0x6d, 0x6e, 0x2b, 0xcf, 0x53, 0x38,
	0x29, 0x0c, 0xd8, 0xe0, 0x14, 0xfd, 0x1c, 0x92, 0xe7, 0x0e, 0x0f, 0x7c, 0x99, 0x6d, 0xe5, 0x79,
	0x06, 0x27, 0xce, 0x1d, 0x2e, 0x5d, 0x79, 0x48, 0x9b, 0x9e, 0xe5, 0xb8, 0xfd, 0xc0, 0x9b, 0x95,
	0x2b, 0x21, 0x30, 0xc9, 0x80, 0x27, 0xa0, 0xda, 0xc4, 0x74, 0x79, 0x6e, 0x4b, 0x2e, 0x8c, 0xd9,
	0x75, 0x97, 0xa3, 0x2f, 0x20, 0x6b, 0x33, 0xfa, 0xfe, 0x9a, 0xba, 0xe6, 0x84, 0xf8, 0x03, 0xc3,
	0xcd, 0x69, 0x32, 0xcd, 0x9f, 0x2e, 0xd2, 0x6c, 0xcd, 0xdd, 0xdd, 0x81, 0xe1, 0xe2, 0x8c, 0xbd,
	0xaa, 0x16, 0xfe, 0xac, 0xc0, 0xd6, 0xd9, 0xb8, 0xee, 0xb9, 0xb6, 0xd3, 0xbf, 0x66, 0xc1, 0x01,
	0xfe, 0xff, 0x4f, 0x5d, 0xf8, 0x47, 0x0c, 0x90, 0x6e, 0x72, 0xe7, 0x46, 0x6e, 0xbe, 0xa8, 0xd7,
	0x3b, 0x48, 0x18, 0xbe, 0x4f, 0xe8, 0xb5, 0x93, 0x53, 0xb6, 0x95, 0xe7, 0x9b, 0xb5, 0xdf, 0x7e,
	0x3f, 0xcd, 0xef, 0xfc, 0x27, 0x26, 0x71, 0xee, 0x96, 0x4c, 0x8f, 0xd1, 0x12, 0x9f, 0xf8, 0x74,
	0x54, 0xd4, 0x7d, 0xbf, 0xd9, 0x6b, 0xcf, 0xa6, 0xf9, 0x78, 0x20, 0xe1, 0xb8, 0xe1, 0xfb, 0xcd,
	0x6b, 0x47, 0x20, 0x5b, 0xf4, 0x46, 0x22, 0x47, 0x1e, 0x85, 0xdc, 0xa0, 0x37, 0x21, 0x72, 0x20,
	0xe1, 0xb8, 0x45, 0x6f, 0x04, 0xf2, 0x57, 0x90, 0x14, 0xc8, 0x86, 0x65, 0xb1, 0x5c, 0x54, 0x42,
	0xef, 0x7d, 0x3f, 0xcd, 0x57, 0x1e, 0x06, 0xad, 0x5b, 0x16, 0xc3, 0x22, 0x43, 0x21, 0x20, 0x0c,
	0x29, 0xf7, 0xf6, 0x8a, 0x8c, 0xc8, 0x15, 0x9d, 0xe4, 0x62, 0x8f, 0xc2, 0xec, 0xdc, 0x5e, 0x9d,
	0xbe, 0xa1, 0x13, 0x9c, 0x70, 0x03, 0x01, 0x55, 0x21, 0xc3, 0xc6, 0x3b, 0xc4, 0x62, 0xc4, 0xb3,
	0xed, 0x11, 0xe5, 0x92, 0x17, 0x99, 0xda, 0xd6, 0x6c, 0x9a, 0x4f, 0xe3, 0xf1, 0x4e, 0x03, 0x9f,
	0x48, 0x33, 0x4e, 0xb3, 0xf1, 0x4e, 0x83, 0x05, 0x0a, 0xda, 0x86, 0x38, 0x1b, 0x57, 0x88, 0xc5,
	0x24, 0x23, 0x32, 0xb5, 0xd4, 0x6c, 0x9a, 0x57, 0xf1, 0xb8, 0xd2, 0xc0, 0x58, 0x65, 0xe3, 0x4a,
	0x83, 0x09, 0x66, 0xb0, 0x31, 0xb1, 0xe8, 0xc0, 0x98, 0xcc, 0x99, 0xc1, 0xc6, 0x0d, 0xa1, 0xa2,
	0x97, 0x90, 0x30, 0x6d, 0x32, 0x70, 0x46, 0x5c, 0xb2, 0x22, 0x5d, 0xd9, 0x5a, 0x70, 0xb0, 0xde,
	0x3a, 0x72, 0x46, 0xbc, 0x06, 0xe2, 0x3a, 0x03, 0x19, 0xc7, 0x4d, 0x5b, 0x7c, 0x3f, 0xd0, 0x0f,
	0x5b, 0x0f, 0xe9, 0x87, 0xbf, 0x46, 0x20, 0x71, 0x4c, 0x47, 0x23, 0xa3, 0x4f, 0xd1, 0xaf, 0x40,
	0x1d, 0x92, 0x0b, 0x8b, 0x49, 0x2e, 0xa5, 0x2b, 0x99, 0x65, 0x0b, 0xbc, 0x6e, 0xe0, 0x5a, 0xf2,
	0xdb, 0x69, 0x7e, 0xe3, 0xbb, 0x69, 0x5e, 0xc1, 0xb1, 0xe1, 0x6b, 0x4b, 0x9c, 0x24, 0x3a, 0x74,
	0xcc, 0x90, 0x1d, 0x89, 0xd9, 0x34, 0x1f, 0x3d, 0x6e, 0xd7, 0xb1, 0xb0, 0xa1, 0x16, 0xa4, 0x87,
	0x86, 0x49, 0x7c, 0x63, 0x32, 0xf0, 0x0c, 0x4b, 0x56, 0x39, 0xbd, 0xda, 0x51, 0x7a, 0xbd, 0x1b,
	0xb8, 0x6a, 0xd9, 0xd9, 0x34, 0x0f, 0x4b, 0xfd, 0xf5, 0x06, 0x86, 0xa1, 0x61, 0x86, 0x1a, 0x3a,
	0x81, 0xa7, 0x97, 0x9e, 0xe3, 0x12, 0x99, 0xf1, 0x88, 0x2f, 0x00, 0x63, 0x12, 0xf0, 0x93, 0x05,
	0xe0, 0x97, 0x9e, 0xe3, 0xe2, 0x20, 0x66, 0x09, 0x84, 0x2e, 0xef, 0x59, 0xd1, 0x11, 0x3c, 0x91,
	0x80, 0x86, 0x69, 0x52, 0x7f, 0x89, 0xa7, 0x4a, 0xbc, 0x8f, 0xef, 0xe0, 0xe9, 0x32, 0x64, 0x09,
	0xf7, 0xd1, 0xe5, 0xba, 0xb1, 0x96, 0x82, 0x44, 0x28, 0x16, 0x4e, 0x21, 0x26, 0x2e, 0x09, 0xfd,
	0x02, 0xe2, 0x43, 0x22, 0x18, 0x25, 0xef, 0x30, 0x5b, 0xc9, 0x2e, 0x0f, 0x7d, 0x36, 0xf1, 0x29,
	0x56, 0x87, 0xe2, 0x83, 0x3e, 0x03, 0x75, 0x68, 0x5c, 0x7a, 0x4c, 0xde, 0xde, 0x9d, 0x28, 0x61,
	0xc5, 0x81, 0xb3, 0xf0, 0x47, 0x05, 0x56, 0xee, 0x46, 0x94, 0xc7, 0xfe, 0x60, 0x79, 0x5a, 0x6b,
	0xe5, 0xb1, 0x45, 0x79, 0x7e, 0x02, 0x71, 0x9b, 0xf8, 0x1e, 0xe3, 0x72, 0x0f, 0x15, 0xab, 0x76,
	0xd7, 0x63, 0x1c, 0x95, 0x20, 0x6d, 0xb3, 0xe1, 0x9d, 0xd2, 0x6c, 0x06, 0x55, 0x68, 0xe1, 0xe3,
	0x70, 0x27, 0x0c, 0x36, 0x1b, 0xce, 0x4f, 0xf6, 0x77, 0x05, 0x62, 0x62, 0x03, 0xd4, 0x5b, 0xe9,
	0xdb, 0xe0, 0xb1, 0xf9, 0xb5, 0xd8, 0xf2, 0x7f, 0xed, 0xdd, 0x92, 0xc8, 0xd3, 0xe4, 0x6c, 0x20,
	0xf3, 0x4c, 0xaf, 0xdc, 0x45, 0xab, 0xce, 0xd9, 0x60, 0xe5, 0x5c, 0xaa, 0x2d, 0x0c, 0xcb, 0xf7,
	0x31, 0xba, 0x32, 0x15, 0xca, 0x02, 0xc5, 0xf3, 0xf9, 0x28, 0x17, 0xdb, 0x8e, 0xae, 0x93, 0xad,
	0xee, 0x0d, 0x87, 0x86, 0x6b, 0xd5, 0x62, 0x02, 0x0a, 0xab, 0xf6, 0x89, 0xcf, 0x47, 0x85, 0x3f,
	0x28, 0xa0, 0xca, 0x1d, 0x04, 0x91, 0x8d, 0xf0, 0x4c, 0xc9, 0x80, 0xc8, 0x7a, 0x03, 0x63, 0x61,
	0x43, 0x9f, 0x43, 0xda, 0xb0, 0x18, 0x31, 0xcc, 0x2b, 0xc1, 0x41, 0x99, 0x61, 0xb2, 0x96, 0x99,
	0x4d, 0xf3, 0x29, 0xbd, 0x81, 0x75, 0xf3, 0x0a, 0xd3, 0xf7, 0x38, 0x65, 0x58, 0x2c, 0x10, 0x91,
	0x06, 0x51, 0xc3, 0xbc, 0x92, 0x89, 0x25, 0xb1, 0x10, 0xc5, 0x94, 0xb0, 0x89, 0x4f, 0x5d, 0xf1,
	0xba, 0x4b, 0xda, 0x26, 0x71, 0xd2, 0xee, 0x06, 0x7a, 0x41, 0x97, 0xe5, 0x0d, 0xb3, 0x13, 0x69,
	0x98, 0x8e, 0x25, 0xd3, 0xc8, 0x04, 0x69, 0xd4, 0xdb, 0x0d, 0x2c, 0x6c, 0x28, 0x07, 0x89, 0x79,
	0xc1, 0x64, 0xbb, 0xe1, 0xb9, 0x5a, 0xf8, 0x26, 0x02, 0xe8, 0x3e, 0xfb, 0xd1, 0xd7, 0xeb, 0x73,
	0xa1, 0x1e, 0x96, 0xea, 0x47, 0x99, 0x0d, 0x5f, 0xaf, 0xcf, 0x86, 0xc7, 0xa0, 0xff, 0xe0, 0x7c,
	0x78, 0x07, 0x29, 0x81, 0xee, 0x7a, 0xae, 0x49, 0x43, 0x7e, 0xfe, 0x26, 0xc4, 0xaf, 0x3e, 0x0c,
	0xbf, 0x23, 0x20, 0xb0, 0x60, 0xad, 0x94, 0x0a, 0x7f, 0x8b, 0xc2, 0x47, 0xf7, 0x5a, 0x1b, 0x7d,
	0x0a, 0x29, 0xea, 0x9a, 0x6c, 0xe2, 0x73, 0x1a, 0xdc, 0xfe, 0x26, 0x5e, 0x1a, 0x44, 0x36, 0xe2,
	0x26, 0x83, 0x6c, 0x22, 0x8f, 0xce, 0x46, 0xf7, 0xfd, 0x30, 0x1b, 0x23, 0x94, 0xd0, 0x3b, 0x88,
	0xbb, 0x94, 0x13, 0x67, 0xde, 0x84, 0x7a, 0x08, 0x5b, 0x7e, 0xc8, 0xd4, 0xa2, 0xbc, 0xdd, 0x10,
	0x33, 0x46, 0x0a, 0x58, 0x75, 0x29, 0x6f, 0x5b, 0x77, 0x3a, 0x35, 0xf6, 0xe3, 0x75, 0xea, 0x2b,
	0x48, 0x5b, 0x03, 0x32, 0xa2, 0x9c, 0x8b, 0x55, 0xe1, 0xa3, 0xb9, 0x6c, 0xb4, 0xc6, 0xd1, 0x69,
	0xe8, 0x5a, 0xe9, 0x59, 0xb0, 0x06, 0x73, 0xeb, 0x9d, 0xd1, 0x17, 0xff, 0xc1, 0xd1, 0x97, 0xf8,
	0xaf, 0x47, 0x5f, 0xc1, 0x04, 0x58, 0x6e, 0x7a, 0x7f, 0x60, 0x2b, 0x0f, 0x1a, 0xd8, 0x91, 0x0f,
	0x0f, 0xec, 0xc2, 0xa7, 0x10, 0x6e, 0x8b, 0x10, 0xc4, 0xc4, 0xec, 0xcc, 0x29, 0xdb, 0x51, 0xf9,
	0xee, 0x30, 0xfa, 0xfe, 0x45, 0x1e, 0x60, 0xf9, 0xfb, 0x10, 0x25, 0x21, 0x76, 0x74, 0x82, 0x75,
	0x6d, 0x03, 0x25, 0x20, 0xda, 0x3a, 0x7d, 0xa3, 0x29, 0x2f, 0xfe, 0xa2, 0x40, 0xe6, 0xce, 0x00,
	0x46, 0x59, 0x80, 0x66, 0x8f, 0x1c, 0xec, 0x55, 0xc9, 0xc1, 0x7e, 0x59, 0xdb, 0x10, 0x7a, 0xef,
	0x94, 0x1c, 0x96, 0x2b, 0xe4, 0xb0, 0x72, 0xa0, 0x29, 0x42, 0xaf, 0x77, 0xc8, 0xfe, 0xfe, 0x21,
	0xd9, 0x3f, 0xd8, 0xd7, 0x22, 0x08, 0x20, 0xde, 0xec, 0x91, 0x97, 0xd5, 0xaa, 0x16, 0x15, 0x3e,
	0xbd, 0x47, 0x0e, 0x77, 0x76, 0x65, 0x6c, 0x2c, 0x8c, 0x7d, 0xb9, 0x5f, 0x26, 0xbb, 0x3b, 0x65,
	0x4d, 0x15, 0xb1, 0xfa, 0x29, 0x39, 0xac, 0x54, 0xb5, 0xb8, 0x8c, 0x15, 0x72, 0x59, 0xea, 0x5f,
	0x2c, 0xf4, 0x2a, 0x39, 0xac, 0xec, 0x6a, 0xaf, 0x84, 0xfe, 0x06, 0x2f, 0xfc, 0x09, 0xa1, 0xb7,
	0x3b, 0xe4, 0x60, 0x6f, 0x97, 0x1c, 0xec, 0xed, 0x6b, 0xc9, 0x17, 0x3f, 0x03, 0x55, 0x4e, 0x23,
	0xe1, 0x10, 0xa7, 0x7a, 0xab, 0x77, 0x08, 0xde, 0xd1, 0x36, 0x5e, 0xfc, 0x1e, 0x54, 0x39, 0xcc,
	0x90, 0x06, 0x9b, 0x5f, 0x9e, 0xb4, 0x3b, 0x04, 0x37, 0xbf, 0xea, 0x35, 0x4f, 0xcf, 0xb4, 0x0d,
	0xb4, 0x05, 0x69, 0x69, 0xd1, 0xeb, 0xf5, 0x66, 0xf7, 0x4c, 0x53, 0x10, 0x82, 0x6c, 0xaf, 0x53,
	0x3f, 0xe9, 0xb4, 0xda, 0xf8, 0xb8, 0xd9, 0x20, 0xbd, 0xae, 0x16, 0x41, 0x4f, 0x41, 0x5b, 0xb5,
	0x35, 0x4e, 0xde, 0x76, 0xb4, 0xa8, 0x00, 0xbb, 0x13, 0x17, 0x13, 0x6b, 0xd7, 0xa2, 0xd4, 0xda,
	0x9f, 0x94, 0x6f, 0x67, 0xcf, 0x94, 0xef, 0x66, 0xcf, 0x94, 0x7f, 0xce, 0x9e, 0x29, 0xf0, 0x4b,
	0x8f, 0xf5, 0x8b, 0xfc, 0x82, 0x72, 0x49, 0x64, 0x37, 0x20, 0x72, 0xd1, 0xf0, 0x9d, 0xe2, 0xfc,
	0xdf, 0xd2, 0x9c, 0x47, 0xb5, 0xa7, 0x47, 0x1e, 0x36, 0xde, 0xea, 0x9d, 0x6e, 0xe8, 0x90, 0xdf,
	0xae, 0xf2, 0xbb, 0xf2, 0x43, 0xff, 0x77, 0x7d, 0x13, 0xf9, 0x6c, 0x3d, 0xae, 0xa8, 0x77, 0xdb,
	0xc5, 0x35, 0xfc, 0xf3, 0xb8, 0x5c, 0x58, 0xfd, 0x77, 0x00, 0x00, 0x00, 0xff, 0xff, 0xf6, 0x63,
	0xac, 0x9b, 0xd9, 0x0d, 0x00, 0x00,
}
