// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: github.com/TheThingsNetwork/api/protocol/lorawan/lorawan.proto

package lorawan // import "github.com/TheThingsNetwork/api/protocol/lorawan"

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import github_com_TheThingsNetwork_ttn_core_types "github.com/TheThingsNetwork/ttn/core/types"

import bytes "bytes"

import strings "strings"
import reflect "reflect"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type Modulation int32

const (
	Modulation_LORA Modulation = 0
	Modulation_FSK  Modulation = 1
)

var Modulation_name = map[int32]string{
	0: "LORA",
	1: "FSK",
}
var Modulation_value = map[string]int32{
	"LORA": 0,
	"FSK":  1,
}

func (x Modulation) String() string {
	return proto.EnumName(Modulation_name, int32(x))
}
func (Modulation) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_lorawan_5bc247b0efabec7d, []int{0}
}

type FrequencyPlan int32

const (
	FrequencyPlan_EU_863_870 FrequencyPlan = 0
	FrequencyPlan_US_902_928 FrequencyPlan = 1
	FrequencyPlan_CN_779_787 FrequencyPlan = 2
	FrequencyPlan_EU_433     FrequencyPlan = 3
	FrequencyPlan_AU_915_928 FrequencyPlan = 4
	FrequencyPlan_CN_470_510 FrequencyPlan = 5
	FrequencyPlan_AS_923     FrequencyPlan = 6
	FrequencyPlan_AS_920_923 FrequencyPlan = 61
	FrequencyPlan_AS_923_925 FrequencyPlan = 62
	FrequencyPlan_KR_920_923 FrequencyPlan = 7
	FrequencyPlan_IN_865_867 FrequencyPlan = 8
	FrequencyPlan_RU_864_870 FrequencyPlan = 9
)

var FrequencyPlan_name = map[int32]string{
	0:  "EU_863_870",
	1:  "US_902_928",
	2:  "CN_779_787",
	3:  "EU_433",
	4:  "AU_915_928",
	5:  "CN_470_510",
	6:  "AS_923",
	61: "AS_920_923",
	62: "AS_923_925",
	7:  "KR_920_923",
	8:  "IN_865_867",
	9:  "RU_864_870",
}
var FrequencyPlan_value = map[string]int32{
	"EU_863_870": 0,
	"US_902_928": 1,
	"CN_779_787": 2,
	"EU_433":     3,
	"AU_915_928": 4,
	"CN_470_510": 5,
	"AS_923":     6,
	"AS_920_923": 61,
	"AS_923_925": 62,
	"KR_920_923": 7,
	"IN_865_867": 8,
	"RU_864_870": 9,
}

func (x FrequencyPlan) String() string {
	return proto.EnumName(FrequencyPlan_name, int32(x))
}
func (FrequencyPlan) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_lorawan_5bc247b0efabec7d, []int{1}
}

type Major int32

const (
	Major_LORAWAN_R1 Major = 0
)

var Major_name = map[int32]string{
	0: "LORAWAN_R1",
}
var Major_value = map[string]int32{
	"LORAWAN_R1": 0,
}

func (x Major) String() string {
	return proto.EnumName(Major_name, int32(x))
}
func (Major) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_lorawan_5bc247b0efabec7d, []int{2}
}

type MType int32

const (
	MType_JOIN_REQUEST     MType = 0
	MType_JOIN_ACCEPT      MType = 1
	MType_UNCONFIRMED_UP   MType = 2
	MType_UNCONFIRMED_DOWN MType = 3
	MType_CONFIRMED_UP     MType = 4
	MType_CONFIRMED_DOWN   MType = 5
)

var MType_name = map[int32]string{
	0: "JOIN_REQUEST",
	1: "JOIN_ACCEPT",
	2: "UNCONFIRMED_UP",
	3: "UNCONFIRMED_DOWN",
	4: "CONFIRMED_UP",
	5: "CONFIRMED_DOWN",
}
var MType_value = map[string]int32{
	"JOIN_REQUEST":     0,
	"JOIN_ACCEPT":      1,
	"UNCONFIRMED_UP":   2,
	"UNCONFIRMED_DOWN": 3,
	"CONFIRMED_UP":     4,
	"CONFIRMED_DOWN":   5,
}

func (x MType) String() string {
	return proto.EnumName(MType_name, int32(x))
}
func (MType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_lorawan_5bc247b0efabec7d, []int{3}
}

type Metadata struct {
	Modulation Modulation `protobuf:"varint,11,opt,name=modulation,proto3,enum=lorawan.Modulation" json:"modulation,omitempty"`
	// LoRa data rate - SF{spreadingfactor}BW{bandwidth}
	DataRate string `protobuf:"bytes,12,opt,name=data_rate,json=dataRate,proto3" json:"data_rate,omitempty"`
	// FSK bit rate in bit/s
	BitRate uint32 `protobuf:"varint,13,opt,name=bit_rate,json=bitRate,proto3" json:"bit_rate,omitempty"`
	// LoRa coding rate
	CodingRate string `protobuf:"bytes,14,opt,name=coding_rate,json=codingRate,proto3" json:"coding_rate,omitempty"`
	// Store the full 32 bit FCnt (deprecated; do not use)
	FCnt                 uint32        `protobuf:"varint,15,opt,name=f_cnt,json=fCnt,proto3" json:"f_cnt,omitempty"`
	FrequencyPlan        FrequencyPlan `protobuf:"varint,16,opt,name=frequency_plan,json=frequencyPlan,proto3,enum=lorawan.FrequencyPlan" json:"frequency_plan,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *Metadata) Reset()      { *m = Metadata{} }
func (*Metadata) ProtoMessage() {}
func (*Metadata) Descriptor() ([]byte, []int) {
	return fileDescriptor_lorawan_5bc247b0efabec7d, []int{0}
}
func (m *Metadata) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Metadata) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Metadata.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Metadata) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Metadata.Merge(dst, src)
}
func (m *Metadata) XXX_Size() int {
	return m.Size()
}
func (m *Metadata) XXX_DiscardUnknown() {
	xxx_messageInfo_Metadata.DiscardUnknown(m)
}

var xxx_messageInfo_Metadata proto.InternalMessageInfo

func (m *Metadata) GetModulation() Modulation {
	if m != nil {
		return m.Modulation
	}
	return Modulation_LORA
}

func (m *Metadata) GetDataRate() string {
	if m != nil {
		return m.DataRate
	}
	return ""
}

func (m *Metadata) GetBitRate() uint32 {
	if m != nil {
		return m.BitRate
	}
	return 0
}

func (m *Metadata) GetCodingRate() string {
	if m != nil {
		return m.CodingRate
	}
	return ""
}

func (m *Metadata) GetFCnt() uint32 {
	if m != nil {
		return m.FCnt
	}
	return 0
}

func (m *Metadata) GetFrequencyPlan() FrequencyPlan {
	if m != nil {
		return m.FrequencyPlan
	}
	return FrequencyPlan_EU_863_870
}

type TxConfiguration struct {
	Modulation Modulation `protobuf:"varint,11,opt,name=modulation,proto3,enum=lorawan.Modulation" json:"modulation,omitempty"`
	// LoRa data rate - SF{spreadingfactor}BW{bandwidth}
	DataRate string `protobuf:"bytes,12,opt,name=data_rate,json=dataRate,proto3" json:"data_rate,omitempty"`
	// FSK bit rate in bit/s
	BitRate uint32 `protobuf:"varint,13,opt,name=bit_rate,json=bitRate,proto3" json:"bit_rate,omitempty"`
	// LoRa coding rate
	CodingRate string `protobuf:"bytes,14,opt,name=coding_rate,json=codingRate,proto3" json:"coding_rate,omitempty"`
	// Store the full 32 bit FCnt (deprecated; do not use)
	FCnt                 uint32   `protobuf:"varint,15,opt,name=f_cnt,json=fCnt,proto3" json:"f_cnt,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TxConfiguration) Reset()      { *m = TxConfiguration{} }
func (*TxConfiguration) ProtoMessage() {}
func (*TxConfiguration) Descriptor() ([]byte, []int) {
	return fileDescriptor_lorawan_5bc247b0efabec7d, []int{1}
}
func (m *TxConfiguration) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TxConfiguration) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TxConfiguration.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *TxConfiguration) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TxConfiguration.Merge(dst, src)
}
func (m *TxConfiguration) XXX_Size() int {
	return m.Size()
}
func (m *TxConfiguration) XXX_DiscardUnknown() {
	xxx_messageInfo_TxConfiguration.DiscardUnknown(m)
}

var xxx_messageInfo_TxConfiguration proto.InternalMessageInfo

func (m *TxConfiguration) GetModulation() Modulation {
	if m != nil {
		return m.Modulation
	}
	return Modulation_LORA
}

func (m *TxConfiguration) GetDataRate() string {
	if m != nil {
		return m.DataRate
	}
	return ""
}

func (m *TxConfiguration) GetBitRate() uint32 {
	if m != nil {
		return m.BitRate
	}
	return 0
}

func (m *TxConfiguration) GetCodingRate() string {
	if m != nil {
		return m.CodingRate
	}
	return ""
}

func (m *TxConfiguration) GetFCnt() uint32 {
	if m != nil {
		return m.FCnt
	}
	return 0
}

type ActivationMetadata struct {
	AppEUI               github_com_TheThingsNetwork_ttn_core_types.AppEUI   `protobuf:"bytes,1,opt,name=app_eui,json=appEui,proto3,customtype=github.com/TheThingsNetwork/ttn/core/types.AppEUI" json:"app_eui"`
	DevEUI               github_com_TheThingsNetwork_ttn_core_types.DevEUI   `protobuf:"bytes,2,opt,name=dev_eui,json=devEui,proto3,customtype=github.com/TheThingsNetwork/ttn/core/types.DevEUI" json:"dev_eui"`
	DevAddr              *github_com_TheThingsNetwork_ttn_core_types.DevAddr `protobuf:"bytes,3,opt,name=dev_addr,json=devAddr,proto3,customtype=github.com/TheThingsNetwork/ttn/core/types.DevAddr" json:"dev_addr,omitempty"`
	NwkSKey              *github_com_TheThingsNetwork_ttn_core_types.NwkSKey `protobuf:"bytes,4,opt,name=nwk_s_key,json=nwkSKey,proto3,customtype=github.com/TheThingsNetwork/ttn/core/types.NwkSKey" json:"nwk_s_key,omitempty"`
	Rx1DROffset          uint32                                              `protobuf:"varint,11,opt,name=rx1_dr_offset,json=rx1DrOffset,proto3" json:"rx1_dr_offset,omitempty"`
	Rx2DR                uint32                                              `protobuf:"varint,12,opt,name=rx2_dr,json=rx2Dr,proto3" json:"rx2_dr,omitempty"`
	RxDelay              uint32                                              `protobuf:"varint,13,opt,name=rx_delay,json=rxDelay,proto3" json:"rx_delay,omitempty"`
	CFList               *CFList                                             `protobuf:"bytes,14,opt,name=cf_list,json=cfList" json:"cf_list,omitempty"`
	FrequencyPlan        FrequencyPlan                                       `protobuf:"varint,15,opt,name=frequency_plan,json=frequencyPlan,proto3,enum=lorawan.FrequencyPlan" json:"frequency_plan,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                            `json:"-"`
	XXX_sizecache        int32                                               `json:"-"`
}

func (m *ActivationMetadata) Reset()      { *m = ActivationMetadata{} }
func (*ActivationMetadata) ProtoMessage() {}
func (*ActivationMetadata) Descriptor() ([]byte, []int) {
	return fileDescriptor_lorawan_5bc247b0efabec7d, []int{2}
}
func (m *ActivationMetadata) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ActivationMetadata) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ActivationMetadata.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ActivationMetadata) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ActivationMetadata.Merge(dst, src)
}
func (m *ActivationMetadata) XXX_Size() int {
	return m.Size()
}
func (m *ActivationMetadata) XXX_DiscardUnknown() {
	xxx_messageInfo_ActivationMetadata.DiscardUnknown(m)
}

var xxx_messageInfo_ActivationMetadata proto.InternalMessageInfo

func (m *ActivationMetadata) GetRx1DROffset() uint32 {
	if m != nil {
		return m.Rx1DROffset
	}
	return 0
}

func (m *ActivationMetadata) GetRx2DR() uint32 {
	if m != nil {
		return m.Rx2DR
	}
	return 0
}

func (m *ActivationMetadata) GetRxDelay() uint32 {
	if m != nil {
		return m.RxDelay
	}
	return 0
}

func (m *ActivationMetadata) GetCFList() *CFList {
	if m != nil {
		return m.CFList
	}
	return nil
}

func (m *ActivationMetadata) GetFrequencyPlan() FrequencyPlan {
	if m != nil {
		return m.FrequencyPlan
	}
	return FrequencyPlan_EU_863_870
}

type Message struct {
	MHDR `protobuf:"bytes,1,opt,name=m_hdr,json=mHdr,embedded=m_hdr" json:"m_hdr"`
	MIC  []byte `protobuf:"bytes,2,opt,name=mic,proto3" json:"mic,omitempty"`
	// Types that are valid to be assigned to Payload:
	//	*Message_MACPayload
	//	*Message_JoinRequestPayload
	//	*Message_JoinAcceptPayload
	Payload              isMessage_Payload `protobuf_oneof:"Payload"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *Message) Reset()      { *m = Message{} }
func (*Message) ProtoMessage() {}
func (*Message) Descriptor() ([]byte, []int) {
	return fileDescriptor_lorawan_5bc247b0efabec7d, []int{3}
}
func (m *Message) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Message) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Message.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Message) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Message.Merge(dst, src)
}
func (m *Message) XXX_Size() int {
	return m.Size()
}
func (m *Message) XXX_DiscardUnknown() {
	xxx_messageInfo_Message.DiscardUnknown(m)
}

var xxx_messageInfo_Message proto.InternalMessageInfo

type isMessage_Payload interface {
	isMessage_Payload()
	Equal(interface{}) bool
	VerboseEqual(interface{}) error
	MarshalTo([]byte) (int, error)
	Size() int
}

type Message_MACPayload struct {
	MACPayload *MACPayload `protobuf:"bytes,3,opt,name=mac_payload,json=macPayload,oneof"`
}
type Message_JoinRequestPayload struct {
	JoinRequestPayload *JoinRequestPayload `protobuf:"bytes,4,opt,name=join_request_payload,json=joinRequestPayload,oneof"`
}
type Message_JoinAcceptPayload struct {
	JoinAcceptPayload *JoinAcceptPayload `protobuf:"bytes,5,opt,name=join_accept_payload,json=joinAcceptPayload,oneof"`
}

func (*Message_MACPayload) isMessage_Payload()         {}
func (*Message_JoinRequestPayload) isMessage_Payload() {}
func (*Message_JoinAcceptPayload) isMessage_Payload()  {}

func (m *Message) GetPayload() isMessage_Payload {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (m *Message) GetMIC() []byte {
	if m != nil {
		return m.MIC
	}
	return nil
}

func (m *Message) GetMACPayload() *MACPayload {
	if x, ok := m.GetPayload().(*Message_MACPayload); ok {
		return x.MACPayload
	}
	return nil
}

func (m *Message) GetJoinRequestPayload() *JoinRequestPayload {
	if x, ok := m.GetPayload().(*Message_JoinRequestPayload); ok {
		return x.JoinRequestPayload
	}
	return nil
}

func (m *Message) GetJoinAcceptPayload() *JoinAcceptPayload {
	if x, ok := m.GetPayload().(*Message_JoinAcceptPayload); ok {
		return x.JoinAcceptPayload
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Message) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _Message_OneofMarshaler, _Message_OneofUnmarshaler, _Message_OneofSizer, []interface{}{
		(*Message_MACPayload)(nil),
		(*Message_JoinRequestPayload)(nil),
		(*Message_JoinAcceptPayload)(nil),
	}
}

func _Message_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Message)
	// Payload
	switch x := m.Payload.(type) {
	case *Message_MACPayload:
		_ = b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.MACPayload); err != nil {
			return err
		}
	case *Message_JoinRequestPayload:
		_ = b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.JoinRequestPayload); err != nil {
			return err
		}
	case *Message_JoinAcceptPayload:
		_ = b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.JoinAcceptPayload); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("Message.Payload has unexpected type %T", x)
	}
	return nil
}

func _Message_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Message)
	switch tag {
	case 3: // Payload.mac_payload
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(MACPayload)
		err := b.DecodeMessage(msg)
		m.Payload = &Message_MACPayload{msg}
		return true, err
	case 4: // Payload.join_request_payload
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(JoinRequestPayload)
		err := b.DecodeMessage(msg)
		m.Payload = &Message_JoinRequestPayload{msg}
		return true, err
	case 5: // Payload.join_accept_payload
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(JoinAcceptPayload)
		err := b.DecodeMessage(msg)
		m.Payload = &Message_JoinAcceptPayload{msg}
		return true, err
	default:
		return false, nil
	}
}

func _Message_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*Message)
	// Payload
	switch x := m.Payload.(type) {
	case *Message_MACPayload:
		s := proto.Size(x.MACPayload)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Message_JoinRequestPayload:
		s := proto.Size(x.JoinRequestPayload)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Message_JoinAcceptPayload:
		s := proto.Size(x.JoinAcceptPayload)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type MHDR struct {
	MType                MType    `protobuf:"varint,1,opt,name=m_type,json=mType,proto3,enum=lorawan.MType" json:"m_type,omitempty"`
	Major                Major    `protobuf:"varint,2,opt,name=major,proto3,enum=lorawan.Major" json:"major,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MHDR) Reset()      { *m = MHDR{} }
func (*MHDR) ProtoMessage() {}
func (*MHDR) Descriptor() ([]byte, []int) {
	return fileDescriptor_lorawan_5bc247b0efabec7d, []int{4}
}
func (m *MHDR) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MHDR) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MHDR.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *MHDR) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MHDR.Merge(dst, src)
}
func (m *MHDR) XXX_Size() int {
	return m.Size()
}
func (m *MHDR) XXX_DiscardUnknown() {
	xxx_messageInfo_MHDR.DiscardUnknown(m)
}

var xxx_messageInfo_MHDR proto.InternalMessageInfo

func (m *MHDR) GetMType() MType {
	if m != nil {
		return m.MType
	}
	return MType_JOIN_REQUEST
}

func (m *MHDR) GetMajor() Major {
	if m != nil {
		return m.Major
	}
	return Major_LORAWAN_R1
}

type MACPayload struct {
	FHDR                 `protobuf:"bytes,1,opt,name=f_hdr,json=fHdr,embedded=f_hdr" json:"f_hdr"`
	FPort                int32    `protobuf:"varint,2,opt,name=f_port,json=fPort,proto3" json:"f_port,omitempty"`
	FRMPayload           []byte   `protobuf:"bytes,3,opt,name=frm_payload,json=frmPayload,proto3" json:"frm_payload,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MACPayload) Reset()      { *m = MACPayload{} }
func (*MACPayload) ProtoMessage() {}
func (*MACPayload) Descriptor() ([]byte, []int) {
	return fileDescriptor_lorawan_5bc247b0efabec7d, []int{5}
}
func (m *MACPayload) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MACPayload) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MACPayload.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *MACPayload) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MACPayload.Merge(dst, src)
}
func (m *MACPayload) XXX_Size() int {
	return m.Size()
}
func (m *MACPayload) XXX_DiscardUnknown() {
	xxx_messageInfo_MACPayload.DiscardUnknown(m)
}

var xxx_messageInfo_MACPayload proto.InternalMessageInfo

func (m *MACPayload) GetFPort() int32 {
	if m != nil {
		return m.FPort
	}
	return 0
}

func (m *MACPayload) GetFRMPayload() []byte {
	if m != nil {
		return m.FRMPayload
	}
	return nil
}

type FHDR struct {
	DevAddr              github_com_TheThingsNetwork_ttn_core_types.DevAddr `protobuf:"bytes,1,opt,name=dev_addr,json=devAddr,proto3,customtype=github.com/TheThingsNetwork/ttn/core/types.DevAddr" json:"dev_addr"`
	FCtrl                `protobuf:"bytes,2,opt,name=f_ctrl,json=fCtrl,embedded=f_ctrl" json:"f_ctrl"`
	FCnt                 uint32       `protobuf:"varint,3,opt,name=f_cnt,json=fCnt,proto3" json:"f_cnt,omitempty"`
	FOpts                []MACCommand `protobuf:"bytes,4,rep,name=f_opts,json=fOpts" json:"f_opts"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *FHDR) Reset()      { *m = FHDR{} }
func (*FHDR) ProtoMessage() {}
func (*FHDR) Descriptor() ([]byte, []int) {
	return fileDescriptor_lorawan_5bc247b0efabec7d, []int{6}
}
func (m *FHDR) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FHDR) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FHDR.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *FHDR) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FHDR.Merge(dst, src)
}
func (m *FHDR) XXX_Size() int {
	return m.Size()
}
func (m *FHDR) XXX_DiscardUnknown() {
	xxx_messageInfo_FHDR.DiscardUnknown(m)
}

var xxx_messageInfo_FHDR proto.InternalMessageInfo

func (m *FHDR) GetFCnt() uint32 {
	if m != nil {
		return m.FCnt
	}
	return 0
}

func (m *FHDR) GetFOpts() []MACCommand {
	if m != nil {
		return m.FOpts
	}
	return nil
}

type FCtrl struct {
	ADR                  bool     `protobuf:"varint,1,opt,name=adr,proto3" json:"adr,omitempty"`
	ADRAckReq            bool     `protobuf:"varint,2,opt,name=adr_ack_req,json=adrAckReq,proto3" json:"adr_ack_req,omitempty"`
	Ack                  bool     `protobuf:"varint,3,opt,name=ack,proto3" json:"ack,omitempty"`
	FPending             bool     `protobuf:"varint,4,opt,name=f_pending,json=fPending,proto3" json:"f_pending,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FCtrl) Reset()      { *m = FCtrl{} }
func (*FCtrl) ProtoMessage() {}
func (*FCtrl) Descriptor() ([]byte, []int) {
	return fileDescriptor_lorawan_5bc247b0efabec7d, []int{7}
}
func (m *FCtrl) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FCtrl) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FCtrl.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *FCtrl) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FCtrl.Merge(dst, src)
}
func (m *FCtrl) XXX_Size() int {
	return m.Size()
}
func (m *FCtrl) XXX_DiscardUnknown() {
	xxx_messageInfo_FCtrl.DiscardUnknown(m)
}

var xxx_messageInfo_FCtrl proto.InternalMessageInfo

func (m *FCtrl) GetADR() bool {
	if m != nil {
		return m.ADR
	}
	return false
}

func (m *FCtrl) GetADRAckReq() bool {
	if m != nil {
		return m.ADRAckReq
	}
	return false
}

func (m *FCtrl) GetAck() bool {
	if m != nil {
		return m.Ack
	}
	return false
}

func (m *FCtrl) GetFPending() bool {
	if m != nil {
		return m.FPending
	}
	return false
}

type MACCommand struct {
	CID                  uint32   `protobuf:"varint,1,opt,name=cid,proto3" json:"cid,omitempty"`
	Payload              []byte   `protobuf:"bytes,2,opt,name=payload,proto3" json:"payload,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MACCommand) Reset()      { *m = MACCommand{} }
func (*MACCommand) ProtoMessage() {}
func (*MACCommand) Descriptor() ([]byte, []int) {
	return fileDescriptor_lorawan_5bc247b0efabec7d, []int{8}
}
func (m *MACCommand) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MACCommand) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MACCommand.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *MACCommand) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MACCommand.Merge(dst, src)
}
func (m *MACCommand) XXX_Size() int {
	return m.Size()
}
func (m *MACCommand) XXX_DiscardUnknown() {
	xxx_messageInfo_MACCommand.DiscardUnknown(m)
}

var xxx_messageInfo_MACCommand proto.InternalMessageInfo

func (m *MACCommand) GetCID() uint32 {
	if m != nil {
		return m.CID
	}
	return 0
}

func (m *MACCommand) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

type JoinRequestPayload struct {
	AppEUI               github_com_TheThingsNetwork_ttn_core_types.AppEUI   `protobuf:"bytes,1,opt,name=app_eui,json=appEui,proto3,customtype=github.com/TheThingsNetwork/ttn/core/types.AppEUI" json:"app_eui"`
	DevEUI               github_com_TheThingsNetwork_ttn_core_types.DevEUI   `protobuf:"bytes,2,opt,name=dev_eui,json=devEui,proto3,customtype=github.com/TheThingsNetwork/ttn/core/types.DevEUI" json:"dev_eui"`
	DevNonce             github_com_TheThingsNetwork_ttn_core_types.DevNonce `protobuf:"bytes,3,opt,name=dev_nonce,json=devNonce,proto3,customtype=github.com/TheThingsNetwork/ttn/core/types.DevNonce" json:"dev_nonce"`
	XXX_NoUnkeyedLiteral struct{}                                            `json:"-"`
	XXX_sizecache        int32                                               `json:"-"`
}

func (m *JoinRequestPayload) Reset()      { *m = JoinRequestPayload{} }
func (*JoinRequestPayload) ProtoMessage() {}
func (*JoinRequestPayload) Descriptor() ([]byte, []int) {
	return fileDescriptor_lorawan_5bc247b0efabec7d, []int{9}
}
func (m *JoinRequestPayload) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *JoinRequestPayload) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_JoinRequestPayload.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *JoinRequestPayload) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JoinRequestPayload.Merge(dst, src)
}
func (m *JoinRequestPayload) XXX_Size() int {
	return m.Size()
}
func (m *JoinRequestPayload) XXX_DiscardUnknown() {
	xxx_messageInfo_JoinRequestPayload.DiscardUnknown(m)
}

var xxx_messageInfo_JoinRequestPayload proto.InternalMessageInfo

type JoinAcceptPayload struct {
	Encrypted            []byte                                              `protobuf:"bytes,1,opt,name=encrypted,proto3" json:"encrypted,omitempty"`
	AppNonce             github_com_TheThingsNetwork_ttn_core_types.AppNonce `protobuf:"bytes,2,opt,name=app_nonce,json=appNonce,proto3,customtype=github.com/TheThingsNetwork/ttn/core/types.AppNonce" json:"app_nonce"`
	NetID                github_com_TheThingsNetwork_ttn_core_types.NetID    `protobuf:"bytes,3,opt,name=net_id,json=netId,proto3,customtype=github.com/TheThingsNetwork/ttn/core/types.NetID" json:"net_id"`
	DevAddr              github_com_TheThingsNetwork_ttn_core_types.DevAddr  `protobuf:"bytes,4,opt,name=dev_addr,json=devAddr,proto3,customtype=github.com/TheThingsNetwork/ttn/core/types.DevAddr" json:"dev_addr"`
	DLSettings           `protobuf:"bytes,5,opt,name=dl_settings,json=dlSettings,embedded=dl_settings" json:"dl_settings"`
	RxDelay              uint32   `protobuf:"varint,6,opt,name=rx_delay,json=rxDelay,proto3" json:"rx_delay,omitempty"`
	CFList               *CFList  `protobuf:"bytes,7,opt,name=cf_list,json=cfList" json:"cf_list,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *JoinAcceptPayload) Reset()      { *m = JoinAcceptPayload{} }
func (*JoinAcceptPayload) ProtoMessage() {}
func (*JoinAcceptPayload) Descriptor() ([]byte, []int) {
	return fileDescriptor_lorawan_5bc247b0efabec7d, []int{10}
}
func (m *JoinAcceptPayload) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *JoinAcceptPayload) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_JoinAcceptPayload.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *JoinAcceptPayload) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JoinAcceptPayload.Merge(dst, src)
}
func (m *JoinAcceptPayload) XXX_Size() int {
	return m.Size()
}
func (m *JoinAcceptPayload) XXX_DiscardUnknown() {
	xxx_messageInfo_JoinAcceptPayload.DiscardUnknown(m)
}

var xxx_messageInfo_JoinAcceptPayload proto.InternalMessageInfo

func (m *JoinAcceptPayload) GetEncrypted() []byte {
	if m != nil {
		return m.Encrypted
	}
	return nil
}

func (m *JoinAcceptPayload) GetRxDelay() uint32 {
	if m != nil {
		return m.RxDelay
	}
	return 0
}

func (m *JoinAcceptPayload) GetCFList() *CFList {
	if m != nil {
		return m.CFList
	}
	return nil
}

type DLSettings struct {
	Rx1DROffset          uint32   `protobuf:"varint,1,opt,name=rx1_dr_offset,json=rx1DrOffset,proto3" json:"rx1_dr_offset,omitempty"`
	Rx2DR                uint32   `protobuf:"varint,2,opt,name=rx2_dr,json=rx2Dr,proto3" json:"rx2_dr,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DLSettings) Reset()      { *m = DLSettings{} }
func (*DLSettings) ProtoMessage() {}
func (*DLSettings) Descriptor() ([]byte, []int) {
	return fileDescriptor_lorawan_5bc247b0efabec7d, []int{11}
}
func (m *DLSettings) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DLSettings) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DLSettings.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *DLSettings) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DLSettings.Merge(dst, src)
}
func (m *DLSettings) XXX_Size() int {
	return m.Size()
}
func (m *DLSettings) XXX_DiscardUnknown() {
	xxx_messageInfo_DLSettings.DiscardUnknown(m)
}

var xxx_messageInfo_DLSettings proto.InternalMessageInfo

func (m *DLSettings) GetRx1DROffset() uint32 {
	if m != nil {
		return m.Rx1DROffset
	}
	return 0
}

func (m *DLSettings) GetRx2DR() uint32 {
	if m != nil {
		return m.Rx2DR
	}
	return 0
}

type CFList struct {
	Freq                 []uint32 `protobuf:"varint,1,rep,packed,name=freq" json:"freq,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CFList) Reset()      { *m = CFList{} }
func (*CFList) ProtoMessage() {}
func (*CFList) Descriptor() ([]byte, []int) {
	return fileDescriptor_lorawan_5bc247b0efabec7d, []int{12}
}
func (m *CFList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CFList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CFList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *CFList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CFList.Merge(dst, src)
}
func (m *CFList) XXX_Size() int {
	return m.Size()
}
func (m *CFList) XXX_DiscardUnknown() {
	xxx_messageInfo_CFList.DiscardUnknown(m)
}

var xxx_messageInfo_CFList proto.InternalMessageInfo

func (m *CFList) GetFreq() []uint32 {
	if m != nil {
		return m.Freq
	}
	return nil
}

func init() {
	proto.RegisterType((*Metadata)(nil), "lorawan.Metadata")
	proto.RegisterType((*TxConfiguration)(nil), "lorawan.TxConfiguration")
	proto.RegisterType((*ActivationMetadata)(nil), "lorawan.ActivationMetadata")
	proto.RegisterType((*Message)(nil), "lorawan.Message")
	proto.RegisterType((*MHDR)(nil), "lorawan.MHDR")
	proto.RegisterType((*MACPayload)(nil), "lorawan.MACPayload")
	proto.RegisterType((*FHDR)(nil), "lorawan.FHDR")
	proto.RegisterType((*FCtrl)(nil), "lorawan.FCtrl")
	proto.RegisterType((*MACCommand)(nil), "lorawan.MACCommand")
	proto.RegisterType((*JoinRequestPayload)(nil), "lorawan.JoinRequestPayload")
	proto.RegisterType((*JoinAcceptPayload)(nil), "lorawan.JoinAcceptPayload")
	proto.RegisterType((*DLSettings)(nil), "lorawan.DLSettings")
	proto.RegisterType((*CFList)(nil), "lorawan.CFList")
	proto.RegisterEnum("lorawan.Modulation", Modulation_name, Modulation_value)
	proto.RegisterEnum("lorawan.FrequencyPlan", FrequencyPlan_name, FrequencyPlan_value)
	proto.RegisterEnum("lorawan.Major", Major_name, Major_value)
	proto.RegisterEnum("lorawan.MType", MType_name, MType_value)
}
func (this *Metadata) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*Metadata)
	if !ok {
		that2, ok := that.(Metadata)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *Metadata")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *Metadata but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *Metadata but is not nil && this == nil")
	}
	if this.Modulation != that1.Modulation {
		return fmt.Errorf("Modulation this(%v) Not Equal that(%v)", this.Modulation, that1.Modulation)
	}
	if this.DataRate != that1.DataRate {
		return fmt.Errorf("DataRate this(%v) Not Equal that(%v)", this.DataRate, that1.DataRate)
	}
	if this.BitRate != that1.BitRate {
		return fmt.Errorf("BitRate this(%v) Not Equal that(%v)", this.BitRate, that1.BitRate)
	}
	if this.CodingRate != that1.CodingRate {
		return fmt.Errorf("CodingRate this(%v) Not Equal that(%v)", this.CodingRate, that1.CodingRate)
	}
	if this.FCnt != that1.FCnt {
		return fmt.Errorf("FCnt this(%v) Not Equal that(%v)", this.FCnt, that1.FCnt)
	}
	if this.FrequencyPlan != that1.FrequencyPlan {
		return fmt.Errorf("FrequencyPlan this(%v) Not Equal that(%v)", this.FrequencyPlan, that1.FrequencyPlan)
	}
	return nil
}
func (this *Metadata) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Metadata)
	if !ok {
		that2, ok := that.(Metadata)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Modulation != that1.Modulation {
		return false
	}
	if this.DataRate != that1.DataRate {
		return false
	}
	if this.BitRate != that1.BitRate {
		return false
	}
	if this.CodingRate != that1.CodingRate {
		return false
	}
	if this.FCnt != that1.FCnt {
		return false
	}
	if this.FrequencyPlan != that1.FrequencyPlan {
		return false
	}
	return true
}
func (this *TxConfiguration) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*TxConfiguration)
	if !ok {
		that2, ok := that.(TxConfiguration)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *TxConfiguration")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *TxConfiguration but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *TxConfiguration but is not nil && this == nil")
	}
	if this.Modulation != that1.Modulation {
		return fmt.Errorf("Modulation this(%v) Not Equal that(%v)", this.Modulation, that1.Modulation)
	}
	if this.DataRate != that1.DataRate {
		return fmt.Errorf("DataRate this(%v) Not Equal that(%v)", this.DataRate, that1.DataRate)
	}
	if this.BitRate != that1.BitRate {
		return fmt.Errorf("BitRate this(%v) Not Equal that(%v)", this.BitRate, that1.BitRate)
	}
	if this.CodingRate != that1.CodingRate {
		return fmt.Errorf("CodingRate this(%v) Not Equal that(%v)", this.CodingRate, that1.CodingRate)
	}
	if this.FCnt != that1.FCnt {
		return fmt.Errorf("FCnt this(%v) Not Equal that(%v)", this.FCnt, that1.FCnt)
	}
	return nil
}
func (this *TxConfiguration) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TxConfiguration)
	if !ok {
		that2, ok := that.(TxConfiguration)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Modulation != that1.Modulation {
		return false
	}
	if this.DataRate != that1.DataRate {
		return false
	}
	if this.BitRate != that1.BitRate {
		return false
	}
	if this.CodingRate != that1.CodingRate {
		return false
	}
	if this.FCnt != that1.FCnt {
		return false
	}
	return true
}
func (this *ActivationMetadata) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*ActivationMetadata)
	if !ok {
		that2, ok := that.(ActivationMetadata)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *ActivationMetadata")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *ActivationMetadata but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *ActivationMetadata but is not nil && this == nil")
	}
	if !this.AppEUI.Equal(that1.AppEUI) {
		return fmt.Errorf("AppEUI this(%v) Not Equal that(%v)", this.AppEUI, that1.AppEUI)
	}
	if !this.DevEUI.Equal(that1.DevEUI) {
		return fmt.Errorf("DevEUI this(%v) Not Equal that(%v)", this.DevEUI, that1.DevEUI)
	}
	if that1.DevAddr == nil {
		if this.DevAddr != nil {
			return fmt.Errorf("this.DevAddr != nil && that1.DevAddr == nil")
		}
	} else if !this.DevAddr.Equal(*that1.DevAddr) {
		return fmt.Errorf("DevAddr this(%v) Not Equal that(%v)", this.DevAddr, that1.DevAddr)
	}
	if that1.NwkSKey == nil {
		if this.NwkSKey != nil {
			return fmt.Errorf("this.NwkSKey != nil && that1.NwkSKey == nil")
		}
	} else if !this.NwkSKey.Equal(*that1.NwkSKey) {
		return fmt.Errorf("NwkSKey this(%v) Not Equal that(%v)", this.NwkSKey, that1.NwkSKey)
	}
	if this.Rx1DROffset != that1.Rx1DROffset {
		return fmt.Errorf("Rx1DROffset this(%v) Not Equal that(%v)", this.Rx1DROffset, that1.Rx1DROffset)
	}
	if this.Rx2DR != that1.Rx2DR {
		return fmt.Errorf("Rx2DR this(%v) Not Equal that(%v)", this.Rx2DR, that1.Rx2DR)
	}
	if this.RxDelay != that1.RxDelay {
		return fmt.Errorf("RxDelay this(%v) Not Equal that(%v)", this.RxDelay, that1.RxDelay)
	}
	if !this.CFList.Equal(that1.CFList) {
		return fmt.Errorf("CFList this(%v) Not Equal that(%v)", this.CFList, that1.CFList)
	}
	if this.FrequencyPlan != that1.FrequencyPlan {
		return fmt.Errorf("FrequencyPlan this(%v) Not Equal that(%v)", this.FrequencyPlan, that1.FrequencyPlan)
	}
	return nil
}
func (this *ActivationMetadata) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ActivationMetadata)
	if !ok {
		that2, ok := that.(ActivationMetadata)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AppEUI.Equal(that1.AppEUI) {
		return false
	}
	if !this.DevEUI.Equal(that1.DevEUI) {
		return false
	}
	if that1.DevAddr == nil {
		if this.DevAddr != nil {
			return false
		}
	} else if !this.DevAddr.Equal(*that1.DevAddr) {
		return false
	}
	if that1.NwkSKey == nil {
		if this.NwkSKey != nil {
			return false
		}
	} else if !this.NwkSKey.Equal(*that1.NwkSKey) {
		return false
	}
	if this.Rx1DROffset != that1.Rx1DROffset {
		return false
	}
	if this.Rx2DR != that1.Rx2DR {
		return false
	}
	if this.RxDelay != that1.RxDelay {
		return false
	}
	if !this.CFList.Equal(that1.CFList) {
		return false
	}
	if this.FrequencyPlan != that1.FrequencyPlan {
		return false
	}
	return true
}
func (this *Message) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*Message)
	if !ok {
		that2, ok := that.(Message)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *Message")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *Message but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *Message but is not nil && this == nil")
	}
	if !this.MHDR.Equal(&that1.MHDR) {
		return fmt.Errorf("MHDR this(%v) Not Equal that(%v)", this.MHDR, that1.MHDR)
	}
	if !bytes.Equal(this.MIC, that1.MIC) {
		return fmt.Errorf("MIC this(%v) Not Equal that(%v)", this.MIC, that1.MIC)
	}
	if that1.Payload == nil {
		if this.Payload != nil {
			return fmt.Errorf("this.Payload != nil && that1.Payload == nil")
		}
	} else if this.Payload == nil {
		return fmt.Errorf("this.Payload == nil && that1.Payload != nil")
	} else if err := this.Payload.VerboseEqual(that1.Payload); err != nil {
		return err
	}
	return nil
}
func (this *Message_MACPayload) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*Message_MACPayload)
	if !ok {
		that2, ok := that.(Message_MACPayload)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *Message_MACPayload")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *Message_MACPayload but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *Message_MACPayload but is not nil && this == nil")
	}
	if !this.MACPayload.Equal(that1.MACPayload) {
		return fmt.Errorf("MACPayload this(%v) Not Equal that(%v)", this.MACPayload, that1.MACPayload)
	}
	return nil
}
func (this *Message_JoinRequestPayload) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*Message_JoinRequestPayload)
	if !ok {
		that2, ok := that.(Message_JoinRequestPayload)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *Message_JoinRequestPayload")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *Message_JoinRequestPayload but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *Message_JoinRequestPayload but is not nil && this == nil")
	}
	if !this.JoinRequestPayload.Equal(that1.JoinRequestPayload) {
		return fmt.Errorf("JoinRequestPayload this(%v) Not Equal that(%v)", this.JoinRequestPayload, that1.JoinRequestPayload)
	}
	return nil
}
func (this *Message_JoinAcceptPayload) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*Message_JoinAcceptPayload)
	if !ok {
		that2, ok := that.(Message_JoinAcceptPayload)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *Message_JoinAcceptPayload")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *Message_JoinAcceptPayload but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *Message_JoinAcceptPayload but is not nil && this == nil")
	}
	if !this.JoinAcceptPayload.Equal(that1.JoinAcceptPayload) {
		return fmt.Errorf("JoinAcceptPayload this(%v) Not Equal that(%v)", this.JoinAcceptPayload, that1.JoinAcceptPayload)
	}
	return nil
}
func (this *Message) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Message)
	if !ok {
		that2, ok := that.(Message)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.MHDR.Equal(&that1.MHDR) {
		return false
	}
	if !bytes.Equal(this.MIC, that1.MIC) {
		return false
	}
	if that1.Payload == nil {
		if this.Payload != nil {
			return false
		}
	} else if this.Payload == nil {
		return false
	} else if !this.Payload.Equal(that1.Payload) {
		return false
	}
	return true
}
func (this *Message_MACPayload) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Message_MACPayload)
	if !ok {
		that2, ok := that.(Message_MACPayload)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.MACPayload.Equal(that1.MACPayload) {
		return false
	}
	return true
}
func (this *Message_JoinRequestPayload) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Message_JoinRequestPayload)
	if !ok {
		that2, ok := that.(Message_JoinRequestPayload)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.JoinRequestPayload.Equal(that1.JoinRequestPayload) {
		return false
	}
	return true
}
func (this *Message_JoinAcceptPayload) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Message_JoinAcceptPayload)
	if !ok {
		that2, ok := that.(Message_JoinAcceptPayload)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.JoinAcceptPayload.Equal(that1.JoinAcceptPayload) {
		return false
	}
	return true
}
func (this *MHDR) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*MHDR)
	if !ok {
		that2, ok := that.(MHDR)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *MHDR")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *MHDR but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *MHDR but is not nil && this == nil")
	}
	if this.MType != that1.MType {
		return fmt.Errorf("MType this(%v) Not Equal that(%v)", this.MType, that1.MType)
	}
	if this.Major != that1.Major {
		return fmt.Errorf("Major this(%v) Not Equal that(%v)", this.Major, that1.Major)
	}
	return nil
}
func (this *MHDR) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MHDR)
	if !ok {
		that2, ok := that.(MHDR)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.MType != that1.MType {
		return false
	}
	if this.Major != that1.Major {
		return false
	}
	return true
}
func (this *MACPayload) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*MACPayload)
	if !ok {
		that2, ok := that.(MACPayload)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *MACPayload")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *MACPayload but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *MACPayload but is not nil && this == nil")
	}
	if !this.FHDR.Equal(&that1.FHDR) {
		return fmt.Errorf("FHDR this(%v) Not Equal that(%v)", this.FHDR, that1.FHDR)
	}
	if this.FPort != that1.FPort {
		return fmt.Errorf("FPort this(%v) Not Equal that(%v)", this.FPort, that1.FPort)
	}
	if !bytes.Equal(this.FRMPayload, that1.FRMPayload) {
		return fmt.Errorf("FRMPayload this(%v) Not Equal that(%v)", this.FRMPayload, that1.FRMPayload)
	}
	return nil
}
func (this *MACPayload) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MACPayload)
	if !ok {
		that2, ok := that.(MACPayload)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.FHDR.Equal(&that1.FHDR) {
		return false
	}
	if this.FPort != that1.FPort {
		return false
	}
	if !bytes.Equal(this.FRMPayload, that1.FRMPayload) {
		return false
	}
	return true
}
func (this *FHDR) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*FHDR)
	if !ok {
		that2, ok := that.(FHDR)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *FHDR")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *FHDR but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *FHDR but is not nil && this == nil")
	}
	if !this.DevAddr.Equal(that1.DevAddr) {
		return fmt.Errorf("DevAddr this(%v) Not Equal that(%v)", this.DevAddr, that1.DevAddr)
	}
	if !this.FCtrl.Equal(&that1.FCtrl) {
		return fmt.Errorf("FCtrl this(%v) Not Equal that(%v)", this.FCtrl, that1.FCtrl)
	}
	if this.FCnt != that1.FCnt {
		return fmt.Errorf("FCnt this(%v) Not Equal that(%v)", this.FCnt, that1.FCnt)
	}
	if len(this.FOpts) != len(that1.FOpts) {
		return fmt.Errorf("FOpts this(%v) Not Equal that(%v)", len(this.FOpts), len(that1.FOpts))
	}
	for i := range this.FOpts {
		if !this.FOpts[i].Equal(&that1.FOpts[i]) {
			return fmt.Errorf("FOpts this[%v](%v) Not Equal that[%v](%v)", i, this.FOpts[i], i, that1.FOpts[i])
		}
	}
	return nil
}
func (this *FHDR) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*FHDR)
	if !ok {
		that2, ok := that.(FHDR)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DevAddr.Equal(that1.DevAddr) {
		return false
	}
	if !this.FCtrl.Equal(&that1.FCtrl) {
		return false
	}
	if this.FCnt != that1.FCnt {
		return false
	}
	if len(this.FOpts) != len(that1.FOpts) {
		return false
	}
	for i := range this.FOpts {
		if !this.FOpts[i].Equal(&that1.FOpts[i]) {
			return false
		}
	}
	return true
}
func (this *FCtrl) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*FCtrl)
	if !ok {
		that2, ok := that.(FCtrl)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *FCtrl")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *FCtrl but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *FCtrl but is not nil && this == nil")
	}
	if this.ADR != that1.ADR {
		return fmt.Errorf("ADR this(%v) Not Equal that(%v)", this.ADR, that1.ADR)
	}
	if this.ADRAckReq != that1.ADRAckReq {
		return fmt.Errorf("ADRAckReq this(%v) Not Equal that(%v)", this.ADRAckReq, that1.ADRAckReq)
	}
	if this.Ack != that1.Ack {
		return fmt.Errorf("Ack this(%v) Not Equal that(%v)", this.Ack, that1.Ack)
	}
	if this.FPending != that1.FPending {
		return fmt.Errorf("FPending this(%v) Not Equal that(%v)", this.FPending, that1.FPending)
	}
	return nil
}
func (this *FCtrl) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*FCtrl)
	if !ok {
		that2, ok := that.(FCtrl)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ADR != that1.ADR {
		return false
	}
	if this.ADRAckReq != that1.ADRAckReq {
		return false
	}
	if this.Ack != that1.Ack {
		return false
	}
	if this.FPending != that1.FPending {
		return false
	}
	return true
}
func (this *MACCommand) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*MACCommand)
	if !ok {
		that2, ok := that.(MACCommand)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *MACCommand")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *MACCommand but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *MACCommand but is not nil && this == nil")
	}
	if this.CID != that1.CID {
		return fmt.Errorf("CID this(%v) Not Equal that(%v)", this.CID, that1.CID)
	}
	if !bytes.Equal(this.Payload, that1.Payload) {
		return fmt.Errorf("Payload this(%v) Not Equal that(%v)", this.Payload, that1.Payload)
	}
	return nil
}
func (this *MACCommand) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MACCommand)
	if !ok {
		that2, ok := that.(MACCommand)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.CID != that1.CID {
		return false
	}
	if !bytes.Equal(this.Payload, that1.Payload) {
		return false
	}
	return true
}
func (this *JoinRequestPayload) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*JoinRequestPayload)
	if !ok {
		that2, ok := that.(JoinRequestPayload)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *JoinRequestPayload")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *JoinRequestPayload but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *JoinRequestPayload but is not nil && this == nil")
	}
	if !this.AppEUI.Equal(that1.AppEUI) {
		return fmt.Errorf("AppEUI this(%v) Not Equal that(%v)", this.AppEUI, that1.AppEUI)
	}
	if !this.DevEUI.Equal(that1.DevEUI) {
		return fmt.Errorf("DevEUI this(%v) Not Equal that(%v)", this.DevEUI, that1.DevEUI)
	}
	if !this.DevNonce.Equal(that1.DevNonce) {
		return fmt.Errorf("DevNonce this(%v) Not Equal that(%v)", this.DevNonce, that1.DevNonce)
	}
	return nil
}
func (this *JoinRequestPayload) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*JoinRequestPayload)
	if !ok {
		that2, ok := that.(JoinRequestPayload)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AppEUI.Equal(that1.AppEUI) {
		return false
	}
	if !this.DevEUI.Equal(that1.DevEUI) {
		return false
	}
	if !this.DevNonce.Equal(that1.DevNonce) {
		return false
	}
	return true
}
func (this *JoinAcceptPayload) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*JoinAcceptPayload)
	if !ok {
		that2, ok := that.(JoinAcceptPayload)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *JoinAcceptPayload")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *JoinAcceptPayload but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *JoinAcceptPayload but is not nil && this == nil")
	}
	if !bytes.Equal(this.Encrypted, that1.Encrypted) {
		return fmt.Errorf("Encrypted this(%v) Not Equal that(%v)", this.Encrypted, that1.Encrypted)
	}
	if !this.AppNonce.Equal(that1.AppNonce) {
		return fmt.Errorf("AppNonce this(%v) Not Equal that(%v)", this.AppNonce, that1.AppNonce)
	}
	if !this.NetID.Equal(that1.NetID) {
		return fmt.Errorf("NetID this(%v) Not Equal that(%v)", this.NetID, that1.NetID)
	}
	if !this.DevAddr.Equal(that1.DevAddr) {
		return fmt.Errorf("DevAddr this(%v) Not Equal that(%v)", this.DevAddr, that1.DevAddr)
	}
	if !this.DLSettings.Equal(&that1.DLSettings) {
		return fmt.Errorf("DLSettings this(%v) Not Equal that(%v)", this.DLSettings, that1.DLSettings)
	}
	if this.RxDelay != that1.RxDelay {
		return fmt.Errorf("RxDelay this(%v) Not Equal that(%v)", this.RxDelay, that1.RxDelay)
	}
	if !this.CFList.Equal(that1.CFList) {
		return fmt.Errorf("CFList this(%v) Not Equal that(%v)", this.CFList, that1.CFList)
	}
	return nil
}
func (this *JoinAcceptPayload) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*JoinAcceptPayload)
	if !ok {
		that2, ok := that.(JoinAcceptPayload)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.Encrypted, that1.Encrypted) {
		return false
	}
	if !this.AppNonce.Equal(that1.AppNonce) {
		return false
	}
	if !this.NetID.Equal(that1.NetID) {
		return false
	}
	if !this.DevAddr.Equal(that1.DevAddr) {
		return false
	}
	if !this.DLSettings.Equal(&that1.DLSettings) {
		return false
	}
	if this.RxDelay != that1.RxDelay {
		return false
	}
	if !this.CFList.Equal(that1.CFList) {
		return false
	}
	return true
}
func (this *DLSettings) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*DLSettings)
	if !ok {
		that2, ok := that.(DLSettings)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *DLSettings")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *DLSettings but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *DLSettings but is not nil && this == nil")
	}
	if this.Rx1DROffset != that1.Rx1DROffset {
		return fmt.Errorf("Rx1DROffset this(%v) Not Equal that(%v)", this.Rx1DROffset, that1.Rx1DROffset)
	}
	if this.Rx2DR != that1.Rx2DR {
		return fmt.Errorf("Rx2DR this(%v) Not Equal that(%v)", this.Rx2DR, that1.Rx2DR)
	}
	return nil
}
func (this *DLSettings) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DLSettings)
	if !ok {
		that2, ok := that.(DLSettings)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Rx1DROffset != that1.Rx1DROffset {
		return false
	}
	if this.Rx2DR != that1.Rx2DR {
		return false
	}
	return true
}
func (this *CFList) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*CFList)
	if !ok {
		that2, ok := that.(CFList)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *CFList")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *CFList but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *CFList but is not nil && this == nil")
	}
	if len(this.Freq) != len(that1.Freq) {
		return fmt.Errorf("Freq this(%v) Not Equal that(%v)", len(this.Freq), len(that1.Freq))
	}
	for i := range this.Freq {
		if this.Freq[i] != that1.Freq[i] {
			return fmt.Errorf("Freq this[%v](%v) Not Equal that[%v](%v)", i, this.Freq[i], i, that1.Freq[i])
		}
	}
	return nil
}
func (this *CFList) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CFList)
	if !ok {
		that2, ok := that.(CFList)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Freq) != len(that1.Freq) {
		return false
	}
	for i := range this.Freq {
		if this.Freq[i] != that1.Freq[i] {
			return false
		}
	}
	return true
}
func (m *Metadata) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Metadata) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Modulation != 0 {
		dAtA[i] = 0x58
		i++
		i = encodeVarintLorawan(dAtA, i, uint64(m.Modulation))
	}
	if len(m.DataRate) > 0 {
		dAtA[i] = 0x62
		i++
		i = encodeVarintLorawan(dAtA, i, uint64(len(m.DataRate)))
		i += copy(dAtA[i:], m.DataRate)
	}
	if m.BitRate != 0 {
		dAtA[i] = 0x68
		i++
		i = encodeVarintLorawan(dAtA, i, uint64(m.BitRate))
	}
	if len(m.CodingRate) > 0 {
		dAtA[i] = 0x72
		i++
		i = encodeVarintLorawan(dAtA, i, uint64(len(m.CodingRate)))
		i += copy(dAtA[i:], m.CodingRate)
	}
	if m.FCnt != 0 {
		dAtA[i] = 0x78
		i++
		i = encodeVarintLorawan(dAtA, i, uint64(m.FCnt))
	}
	if m.FrequencyPlan != 0 {
		dAtA[i] = 0x80
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintLorawan(dAtA, i, uint64(m.FrequencyPlan))
	}
	return i, nil
}

func (m *TxConfiguration) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TxConfiguration) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Modulation != 0 {
		dAtA[i] = 0x58
		i++
		i = encodeVarintLorawan(dAtA, i, uint64(m.Modulation))
	}
	if len(m.DataRate) > 0 {
		dAtA[i] = 0x62
		i++
		i = encodeVarintLorawan(dAtA, i, uint64(len(m.DataRate)))
		i += copy(dAtA[i:], m.DataRate)
	}
	if m.BitRate != 0 {
		dAtA[i] = 0x68
		i++
		i = encodeVarintLorawan(dAtA, i, uint64(m.BitRate))
	}
	if len(m.CodingRate) > 0 {
		dAtA[i] = 0x72
		i++
		i = encodeVarintLorawan(dAtA, i, uint64(len(m.CodingRate)))
		i += copy(dAtA[i:], m.CodingRate)
	}
	if m.FCnt != 0 {
		dAtA[i] = 0x78
		i++
		i = encodeVarintLorawan(dAtA, i, uint64(m.FCnt))
	}
	return i, nil
}

func (m *ActivationMetadata) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ActivationMetadata) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintLorawan(dAtA, i, uint64(m.AppEUI.Size()))
	n1, err := m.AppEUI.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n1
	dAtA[i] = 0x12
	i++
	i = encodeVarintLorawan(dAtA, i, uint64(m.DevEUI.Size()))
	n2, err := m.DevEUI.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n2
	if m.DevAddr != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintLorawan(dAtA, i, uint64(m.DevAddr.Size()))
		n3, err := m.DevAddr.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	if m.NwkSKey != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintLorawan(dAtA, i, uint64(m.NwkSKey.Size()))
		n4, err := m.NwkSKey.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	if m.Rx1DROffset != 0 {
		dAtA[i] = 0x58
		i++
		i = encodeVarintLorawan(dAtA, i, uint64(m.Rx1DROffset))
	}
	if m.Rx2DR != 0 {
		dAtA[i] = 0x60
		i++
		i = encodeVarintLorawan(dAtA, i, uint64(m.Rx2DR))
	}
	if m.RxDelay != 0 {
		dAtA[i] = 0x68
		i++
		i = encodeVarintLorawan(dAtA, i, uint64(m.RxDelay))
	}
	if m.CFList != nil {
		dAtA[i] = 0x72
		i++
		i = encodeVarintLorawan(dAtA, i, uint64(m.CFList.Size()))
		n5, err := m.CFList.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	if m.FrequencyPlan != 0 {
		dAtA[i] = 0x78
		i++
		i = encodeVarintLorawan(dAtA, i, uint64(m.FrequencyPlan))
	}
	return i, nil
}

func (m *Message) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Message) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintLorawan(dAtA, i, uint64(m.MHDR.Size()))
	n6, err := m.MHDR.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n6
	if len(m.MIC) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintLorawan(dAtA, i, uint64(len(m.MIC)))
		i += copy(dAtA[i:], m.MIC)
	}
	if m.Payload != nil {
		nn7, err := m.Payload.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn7
	}
	return i, nil
}

func (m *Message_MACPayload) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.MACPayload != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintLorawan(dAtA, i, uint64(m.MACPayload.Size()))
		n8, err := m.MACPayload.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n8
	}
	return i, nil
}
func (m *Message_JoinRequestPayload) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.JoinRequestPayload != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintLorawan(dAtA, i, uint64(m.JoinRequestPayload.Size()))
		n9, err := m.JoinRequestPayload.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n9
	}
	return i, nil
}
func (m *Message_JoinAcceptPayload) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.JoinAcceptPayload != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintLorawan(dAtA, i, uint64(m.JoinAcceptPayload.Size()))
		n10, err := m.JoinAcceptPayload.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n10
	}
	return i, nil
}
func (m *MHDR) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MHDR) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.MType != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintLorawan(dAtA, i, uint64(m.MType))
	}
	if m.Major != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintLorawan(dAtA, i, uint64(m.Major))
	}
	return i, nil
}

func (m *MACPayload) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MACPayload) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintLorawan(dAtA, i, uint64(m.FHDR.Size()))
	n11, err := m.FHDR.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n11
	if m.FPort != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintLorawan(dAtA, i, uint64(m.FPort))
	}
	if len(m.FRMPayload) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintLorawan(dAtA, i, uint64(len(m.FRMPayload)))
		i += copy(dAtA[i:], m.FRMPayload)
	}
	return i, nil
}

func (m *FHDR) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FHDR) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintLorawan(dAtA, i, uint64(m.DevAddr.Size()))
	n12, err := m.DevAddr.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n12
	dAtA[i] = 0x12
	i++
	i = encodeVarintLorawan(dAtA, i, uint64(m.FCtrl.Size()))
	n13, err := m.FCtrl.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n13
	if m.FCnt != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintLorawan(dAtA, i, uint64(m.FCnt))
	}
	if len(m.FOpts) > 0 {
		for _, msg := range m.FOpts {
			dAtA[i] = 0x22
			i++
			i = encodeVarintLorawan(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *FCtrl) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FCtrl) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ADR {
		dAtA[i] = 0x8
		i++
		if m.ADR {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.ADRAckReq {
		dAtA[i] = 0x10
		i++
		if m.ADRAckReq {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Ack {
		dAtA[i] = 0x18
		i++
		if m.Ack {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.FPending {
		dAtA[i] = 0x20
		i++
		if m.FPending {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *MACCommand) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MACCommand) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.CID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintLorawan(dAtA, i, uint64(m.CID))
	}
	if len(m.Payload) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintLorawan(dAtA, i, uint64(len(m.Payload)))
		i += copy(dAtA[i:], m.Payload)
	}
	return i, nil
}

func (m *JoinRequestPayload) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *JoinRequestPayload) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintLorawan(dAtA, i, uint64(m.AppEUI.Size()))
	n14, err := m.AppEUI.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n14
	dAtA[i] = 0x12
	i++
	i = encodeVarintLorawan(dAtA, i, uint64(m.DevEUI.Size()))
	n15, err := m.DevEUI.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n15
	dAtA[i] = 0x1a
	i++
	i = encodeVarintLorawan(dAtA, i, uint64(m.DevNonce.Size()))
	n16, err := m.DevNonce.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n16
	return i, nil
}

func (m *JoinAcceptPayload) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *JoinAcceptPayload) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Encrypted) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintLorawan(dAtA, i, uint64(len(m.Encrypted)))
		i += copy(dAtA[i:], m.Encrypted)
	}
	dAtA[i] = 0x12
	i++
	i = encodeVarintLorawan(dAtA, i, uint64(m.AppNonce.Size()))
	n17, err := m.AppNonce.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n17
	dAtA[i] = 0x1a
	i++
	i = encodeVarintLorawan(dAtA, i, uint64(m.NetID.Size()))
	n18, err := m.NetID.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n18
	dAtA[i] = 0x22
	i++
	i = encodeVarintLorawan(dAtA, i, uint64(m.DevAddr.Size()))
	n19, err := m.DevAddr.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n19
	dAtA[i] = 0x2a
	i++
	i = encodeVarintLorawan(dAtA, i, uint64(m.DLSettings.Size()))
	n20, err := m.DLSettings.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n20
	if m.RxDelay != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintLorawan(dAtA, i, uint64(m.RxDelay))
	}
	if m.CFList != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintLorawan(dAtA, i, uint64(m.CFList.Size()))
		n21, err := m.CFList.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n21
	}
	return i, nil
}

func (m *DLSettings) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DLSettings) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Rx1DROffset != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintLorawan(dAtA, i, uint64(m.Rx1DROffset))
	}
	if m.Rx2DR != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintLorawan(dAtA, i, uint64(m.Rx2DR))
	}
	return i, nil
}

func (m *CFList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CFList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Freq) > 0 {
		dAtA23 := make([]byte, len(m.Freq)*10)
		var j22 int
		for _, num := range m.Freq {
			for num >= 1<<7 {
				dAtA23[j22] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j22++
			}
			dAtA23[j22] = uint8(num)
			j22++
		}
		dAtA[i] = 0xa
		i++
		i = encodeVarintLorawan(dAtA, i, uint64(j22))
		i += copy(dAtA[i:], dAtA23[:j22])
	}
	return i, nil
}

func encodeVarintLorawan(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Metadata) Size() (n int) {
	var l int
	_ = l
	if m.Modulation != 0 {
		n += 1 + sovLorawan(uint64(m.Modulation))
	}
	l = len(m.DataRate)
	if l > 0 {
		n += 1 + l + sovLorawan(uint64(l))
	}
	if m.BitRate != 0 {
		n += 1 + sovLorawan(uint64(m.BitRate))
	}
	l = len(m.CodingRate)
	if l > 0 {
		n += 1 + l + sovLorawan(uint64(l))
	}
	if m.FCnt != 0 {
		n += 1 + sovLorawan(uint64(m.FCnt))
	}
	if m.FrequencyPlan != 0 {
		n += 2 + sovLorawan(uint64(m.FrequencyPlan))
	}
	return n
}

func (m *TxConfiguration) Size() (n int) {
	var l int
	_ = l
	if m.Modulation != 0 {
		n += 1 + sovLorawan(uint64(m.Modulation))
	}
	l = len(m.DataRate)
	if l > 0 {
		n += 1 + l + sovLorawan(uint64(l))
	}
	if m.BitRate != 0 {
		n += 1 + sovLorawan(uint64(m.BitRate))
	}
	l = len(m.CodingRate)
	if l > 0 {
		n += 1 + l + sovLorawan(uint64(l))
	}
	if m.FCnt != 0 {
		n += 1 + sovLorawan(uint64(m.FCnt))
	}
	return n
}

func (m *ActivationMetadata) Size() (n int) {
	var l int
	_ = l
	l = m.AppEUI.Size()
	n += 1 + l + sovLorawan(uint64(l))
	l = m.DevEUI.Size()
	n += 1 + l + sovLorawan(uint64(l))
	if m.DevAddr != nil {
		l = m.DevAddr.Size()
		n += 1 + l + sovLorawan(uint64(l))
	}
	if m.NwkSKey != nil {
		l = m.NwkSKey.Size()
		n += 1 + l + sovLorawan(uint64(l))
	}
	if m.Rx1DROffset != 0 {
		n += 1 + sovLorawan(uint64(m.Rx1DROffset))
	}
	if m.Rx2DR != 0 {
		n += 1 + sovLorawan(uint64(m.Rx2DR))
	}
	if m.RxDelay != 0 {
		n += 1 + sovLorawan(uint64(m.RxDelay))
	}
	if m.CFList != nil {
		l = m.CFList.Size()
		n += 1 + l + sovLorawan(uint64(l))
	}
	if m.FrequencyPlan != 0 {
		n += 1 + sovLorawan(uint64(m.FrequencyPlan))
	}
	return n
}

func (m *Message) Size() (n int) {
	var l int
	_ = l
	l = m.MHDR.Size()
	n += 1 + l + sovLorawan(uint64(l))
	l = len(m.MIC)
	if l > 0 {
		n += 1 + l + sovLorawan(uint64(l))
	}
	if m.Payload != nil {
		n += m.Payload.Size()
	}
	return n
}

func (m *Message_MACPayload) Size() (n int) {
	var l int
	_ = l
	if m.MACPayload != nil {
		l = m.MACPayload.Size()
		n += 1 + l + sovLorawan(uint64(l))
	}
	return n
}
func (m *Message_JoinRequestPayload) Size() (n int) {
	var l int
	_ = l
	if m.JoinRequestPayload != nil {
		l = m.JoinRequestPayload.Size()
		n += 1 + l + sovLorawan(uint64(l))
	}
	return n
}
func (m *Message_JoinAcceptPayload) Size() (n int) {
	var l int
	_ = l
	if m.JoinAcceptPayload != nil {
		l = m.JoinAcceptPayload.Size()
		n += 1 + l + sovLorawan(uint64(l))
	}
	return n
}
func (m *MHDR) Size() (n int) {
	var l int
	_ = l
	if m.MType != 0 {
		n += 1 + sovLorawan(uint64(m.MType))
	}
	if m.Major != 0 {
		n += 1 + sovLorawan(uint64(m.Major))
	}
	return n
}

func (m *MACPayload) Size() (n int) {
	var l int
	_ = l
	l = m.FHDR.Size()
	n += 1 + l + sovLorawan(uint64(l))
	if m.FPort != 0 {
		n += 1 + sovLorawan(uint64(m.FPort))
	}
	l = len(m.FRMPayload)
	if l > 0 {
		n += 1 + l + sovLorawan(uint64(l))
	}
	return n
}

func (m *FHDR) Size() (n int) {
	var l int
	_ = l
	l = m.DevAddr.Size()
	n += 1 + l + sovLorawan(uint64(l))
	l = m.FCtrl.Size()
	n += 1 + l + sovLorawan(uint64(l))
	if m.FCnt != 0 {
		n += 1 + sovLorawan(uint64(m.FCnt))
	}
	if len(m.FOpts) > 0 {
		for _, e := range m.FOpts {
			l = e.Size()
			n += 1 + l + sovLorawan(uint64(l))
		}
	}
	return n
}

func (m *FCtrl) Size() (n int) {
	var l int
	_ = l
	if m.ADR {
		n += 2
	}
	if m.ADRAckReq {
		n += 2
	}
	if m.Ack {
		n += 2
	}
	if m.FPending {
		n += 2
	}
	return n
}

func (m *MACCommand) Size() (n int) {
	var l int
	_ = l
	if m.CID != 0 {
		n += 1 + sovLorawan(uint64(m.CID))
	}
	l = len(m.Payload)
	if l > 0 {
		n += 1 + l + sovLorawan(uint64(l))
	}
	return n
}

func (m *JoinRequestPayload) Size() (n int) {
	var l int
	_ = l
	l = m.AppEUI.Size()
	n += 1 + l + sovLorawan(uint64(l))
	l = m.DevEUI.Size()
	n += 1 + l + sovLorawan(uint64(l))
	l = m.DevNonce.Size()
	n += 1 + l + sovLorawan(uint64(l))
	return n
}

func (m *JoinAcceptPayload) Size() (n int) {
	var l int
	_ = l
	l = len(m.Encrypted)
	if l > 0 {
		n += 1 + l + sovLorawan(uint64(l))
	}
	l = m.AppNonce.Size()
	n += 1 + l + sovLorawan(uint64(l))
	l = m.NetID.Size()
	n += 1 + l + sovLorawan(uint64(l))
	l = m.DevAddr.Size()
	n += 1 + l + sovLorawan(uint64(l))
	l = m.DLSettings.Size()
	n += 1 + l + sovLorawan(uint64(l))
	if m.RxDelay != 0 {
		n += 1 + sovLorawan(uint64(m.RxDelay))
	}
	if m.CFList != nil {
		l = m.CFList.Size()
		n += 1 + l + sovLorawan(uint64(l))
	}
	return n
}

func (m *DLSettings) Size() (n int) {
	var l int
	_ = l
	if m.Rx1DROffset != 0 {
		n += 1 + sovLorawan(uint64(m.Rx1DROffset))
	}
	if m.Rx2DR != 0 {
		n += 1 + sovLorawan(uint64(m.Rx2DR))
	}
	return n
}

func (m *CFList) Size() (n int) {
	var l int
	_ = l
	if len(m.Freq) > 0 {
		l = 0
		for _, e := range m.Freq {
			l += sovLorawan(uint64(e))
		}
		n += 1 + sovLorawan(uint64(l)) + l
	}
	return n
}

func sovLorawan(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozLorawan(x uint64) (n int) {
	return sovLorawan(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *Metadata) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Metadata{`,
		`Modulation:` + fmt.Sprintf("%v", this.Modulation) + `,`,
		`DataRate:` + fmt.Sprintf("%v", this.DataRate) + `,`,
		`BitRate:` + fmt.Sprintf("%v", this.BitRate) + `,`,
		`CodingRate:` + fmt.Sprintf("%v", this.CodingRate) + `,`,
		`FCnt:` + fmt.Sprintf("%v", this.FCnt) + `,`,
		`FrequencyPlan:` + fmt.Sprintf("%v", this.FrequencyPlan) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TxConfiguration) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TxConfiguration{`,
		`Modulation:` + fmt.Sprintf("%v", this.Modulation) + `,`,
		`DataRate:` + fmt.Sprintf("%v", this.DataRate) + `,`,
		`BitRate:` + fmt.Sprintf("%v", this.BitRate) + `,`,
		`CodingRate:` + fmt.Sprintf("%v", this.CodingRate) + `,`,
		`FCnt:` + fmt.Sprintf("%v", this.FCnt) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ActivationMetadata) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ActivationMetadata{`,
		`AppEUI:` + fmt.Sprintf("%v", this.AppEUI) + `,`,
		`DevEUI:` + fmt.Sprintf("%v", this.DevEUI) + `,`,
		`DevAddr:` + fmt.Sprintf("%v", this.DevAddr) + `,`,
		`NwkSKey:` + fmt.Sprintf("%v", this.NwkSKey) + `,`,
		`Rx1DROffset:` + fmt.Sprintf("%v", this.Rx1DROffset) + `,`,
		`Rx2DR:` + fmt.Sprintf("%v", this.Rx2DR) + `,`,
		`RxDelay:` + fmt.Sprintf("%v", this.RxDelay) + `,`,
		`CFList:` + strings.Replace(fmt.Sprintf("%v", this.CFList), "CFList", "CFList", 1) + `,`,
		`FrequencyPlan:` + fmt.Sprintf("%v", this.FrequencyPlan) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Message) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Message{`,
		`MHDR:` + strings.Replace(strings.Replace(this.MHDR.String(), "MHDR", "MHDR", 1), `&`, ``, 1) + `,`,
		`MIC:` + fmt.Sprintf("%v", this.MIC) + `,`,
		`Payload:` + fmt.Sprintf("%v", this.Payload) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Message_MACPayload) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Message_MACPayload{`,
		`MACPayload:` + strings.Replace(fmt.Sprintf("%v", this.MACPayload), "MACPayload", "MACPayload", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Message_JoinRequestPayload) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Message_JoinRequestPayload{`,
		`JoinRequestPayload:` + strings.Replace(fmt.Sprintf("%v", this.JoinRequestPayload), "JoinRequestPayload", "JoinRequestPayload", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Message_JoinAcceptPayload) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Message_JoinAcceptPayload{`,
		`JoinAcceptPayload:` + strings.Replace(fmt.Sprintf("%v", this.JoinAcceptPayload), "JoinAcceptPayload", "JoinAcceptPayload", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *MHDR) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&MHDR{`,
		`MType:` + fmt.Sprintf("%v", this.MType) + `,`,
		`Major:` + fmt.Sprintf("%v", this.Major) + `,`,
		`}`,
	}, "")
	return s
}
func (this *MACPayload) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&MACPayload{`,
		`FHDR:` + strings.Replace(strings.Replace(this.FHDR.String(), "FHDR", "FHDR", 1), `&`, ``, 1) + `,`,
		`FPort:` + fmt.Sprintf("%v", this.FPort) + `,`,
		`FRMPayload:` + fmt.Sprintf("%v", this.FRMPayload) + `,`,
		`}`,
	}, "")
	return s
}
func (this *FHDR) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&FHDR{`,
		`DevAddr:` + fmt.Sprintf("%v", this.DevAddr) + `,`,
		`FCtrl:` + strings.Replace(strings.Replace(this.FCtrl.String(), "FCtrl", "FCtrl", 1), `&`, ``, 1) + `,`,
		`FCnt:` + fmt.Sprintf("%v", this.FCnt) + `,`,
		`FOpts:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.FOpts), "MACCommand", "MACCommand", 1), `&`, ``, 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *FCtrl) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&FCtrl{`,
		`ADR:` + fmt.Sprintf("%v", this.ADR) + `,`,
		`ADRAckReq:` + fmt.Sprintf("%v", this.ADRAckReq) + `,`,
		`Ack:` + fmt.Sprintf("%v", this.Ack) + `,`,
		`FPending:` + fmt.Sprintf("%v", this.FPending) + `,`,
		`}`,
	}, "")
	return s
}
func (this *MACCommand) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&MACCommand{`,
		`CID:` + fmt.Sprintf("%v", this.CID) + `,`,
		`Payload:` + fmt.Sprintf("%v", this.Payload) + `,`,
		`}`,
	}, "")
	return s
}
func (this *JoinRequestPayload) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&JoinRequestPayload{`,
		`AppEUI:` + fmt.Sprintf("%v", this.AppEUI) + `,`,
		`DevEUI:` + fmt.Sprintf("%v", this.DevEUI) + `,`,
		`DevNonce:` + fmt.Sprintf("%v", this.DevNonce) + `,`,
		`}`,
	}, "")
	return s
}
func (this *JoinAcceptPayload) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&JoinAcceptPayload{`,
		`Encrypted:` + fmt.Sprintf("%v", this.Encrypted) + `,`,
		`AppNonce:` + fmt.Sprintf("%v", this.AppNonce) + `,`,
		`NetID:` + fmt.Sprintf("%v", this.NetID) + `,`,
		`DevAddr:` + fmt.Sprintf("%v", this.DevAddr) + `,`,
		`DLSettings:` + strings.Replace(strings.Replace(this.DLSettings.String(), "DLSettings", "DLSettings", 1), `&`, ``, 1) + `,`,
		`RxDelay:` + fmt.Sprintf("%v", this.RxDelay) + `,`,
		`CFList:` + strings.Replace(fmt.Sprintf("%v", this.CFList), "CFList", "CFList", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DLSettings) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DLSettings{`,
		`Rx1DROffset:` + fmt.Sprintf("%v", this.Rx1DROffset) + `,`,
		`Rx2DR:` + fmt.Sprintf("%v", this.Rx2DR) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CFList) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CFList{`,
		`Freq:` + fmt.Sprintf("%v", this.Freq) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringLorawan(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *Metadata) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLorawan
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Metadata: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Metadata: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Modulation", wireType)
			}
			m.Modulation = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Modulation |= (Modulation(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataRate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLorawan
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DataRate = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BitRate", wireType)
			}
			m.BitRate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BitRate |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CodingRate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLorawan
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CodingRate = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FCnt", wireType)
			}
			m.FCnt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FCnt |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FrequencyPlan", wireType)
			}
			m.FrequencyPlan = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FrequencyPlan |= (FrequencyPlan(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLorawan(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLorawan
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TxConfiguration) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLorawan
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TxConfiguration: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TxConfiguration: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Modulation", wireType)
			}
			m.Modulation = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Modulation |= (Modulation(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataRate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLorawan
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DataRate = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BitRate", wireType)
			}
			m.BitRate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BitRate |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CodingRate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLorawan
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CodingRate = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FCnt", wireType)
			}
			m.FCnt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FCnt |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLorawan(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLorawan
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ActivationMetadata) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLorawan
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ActivationMetadata: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ActivationMetadata: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppEUI", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthLorawan
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.AppEUI.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DevEUI", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthLorawan
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.DevEUI.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DevAddr", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthLorawan
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v github_com_TheThingsNetwork_ttn_core_types.DevAddr
			m.DevAddr = &v
			if err := m.DevAddr.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NwkSKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthLorawan
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v github_com_TheThingsNetwork_ttn_core_types.NwkSKey
			m.NwkSKey = &v
			if err := m.NwkSKey.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rx1DROffset", wireType)
			}
			m.Rx1DROffset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Rx1DROffset |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rx2DR", wireType)
			}
			m.Rx2DR = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Rx2DR |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RxDelay", wireType)
			}
			m.RxDelay = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RxDelay |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CFList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLorawan
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CFList == nil {
				m.CFList = &CFList{}
			}
			if err := m.CFList.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FrequencyPlan", wireType)
			}
			m.FrequencyPlan = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FrequencyPlan |= (FrequencyPlan(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLorawan(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLorawan
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Message) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLorawan
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Message: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Message: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MHDR", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLorawan
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MHDR.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MIC", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthLorawan
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MIC = append(m.MIC[:0], dAtA[iNdEx:postIndex]...)
			if m.MIC == nil {
				m.MIC = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MACPayload", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLorawan
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &MACPayload{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Payload = &Message_MACPayload{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JoinRequestPayload", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLorawan
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &JoinRequestPayload{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Payload = &Message_JoinRequestPayload{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JoinAcceptPayload", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLorawan
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &JoinAcceptPayload{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Payload = &Message_JoinAcceptPayload{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLorawan(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLorawan
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MHDR) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLorawan
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MHDR: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MHDR: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MType", wireType)
			}
			m.MType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MType |= (MType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Major", wireType)
			}
			m.Major = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Major |= (Major(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLorawan(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLorawan
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MACPayload) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLorawan
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MACPayload: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MACPayload: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FHDR", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLorawan
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.FHDR.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FPort", wireType)
			}
			m.FPort = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FPort |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FRMPayload", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthLorawan
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FRMPayload = append(m.FRMPayload[:0], dAtA[iNdEx:postIndex]...)
			if m.FRMPayload == nil {
				m.FRMPayload = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLorawan(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLorawan
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FHDR) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLorawan
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FHDR: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FHDR: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DevAddr", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthLorawan
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.DevAddr.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FCtrl", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLorawan
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.FCtrl.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FCnt", wireType)
			}
			m.FCnt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FCnt |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FOpts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLorawan
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FOpts = append(m.FOpts, MACCommand{})
			if err := m.FOpts[len(m.FOpts)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLorawan(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLorawan
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FCtrl) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLorawan
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FCtrl: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FCtrl: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ADR", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ADR = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ADRAckReq", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ADRAckReq = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ack", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Ack = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FPending", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.FPending = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipLorawan(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLorawan
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MACCommand) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLorawan
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MACCommand: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MACCommand: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CID", wireType)
			}
			m.CID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CID |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Payload", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthLorawan
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Payload = append(m.Payload[:0], dAtA[iNdEx:postIndex]...)
			if m.Payload == nil {
				m.Payload = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLorawan(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLorawan
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *JoinRequestPayload) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLorawan
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: JoinRequestPayload: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: JoinRequestPayload: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppEUI", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthLorawan
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.AppEUI.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DevEUI", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthLorawan
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.DevEUI.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DevNonce", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthLorawan
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.DevNonce.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLorawan(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLorawan
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *JoinAcceptPayload) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLorawan
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: JoinAcceptPayload: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: JoinAcceptPayload: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Encrypted", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthLorawan
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Encrypted = append(m.Encrypted[:0], dAtA[iNdEx:postIndex]...)
			if m.Encrypted == nil {
				m.Encrypted = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppNonce", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthLorawan
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.AppNonce.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NetID", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthLorawan
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.NetID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DevAddr", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthLorawan
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.DevAddr.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DLSettings", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLorawan
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.DLSettings.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RxDelay", wireType)
			}
			m.RxDelay = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RxDelay |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CFList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLorawan
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CFList == nil {
				m.CFList = &CFList{}
			}
			if err := m.CFList.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLorawan(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLorawan
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DLSettings) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLorawan
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DLSettings: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DLSettings: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rx1DROffset", wireType)
			}
			m.Rx1DROffset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Rx1DROffset |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rx2DR", wireType)
			}
			m.Rx2DR = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Rx2DR |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLorawan(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLorawan
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CFList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLorawan
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CFList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CFList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowLorawan
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (uint32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Freq = append(m.Freq, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowLorawan
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthLorawan
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowLorawan
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (uint32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Freq = append(m.Freq, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Freq", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLorawan(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLorawan
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipLorawan(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowLorawan
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthLorawan
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowLorawan
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipLorawan(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthLorawan = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowLorawan   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("github.com/TheThingsNetwork/api/protocol/lorawan/lorawan.proto", fileDescriptor_lorawan_5bc247b0efabec7d)
}

var fileDescriptor_lorawan_5bc247b0efabec7d = []byte{
	// 1495 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xd4, 0x57, 0xdd, 0x6e, 0xe3, 0xc6,
	0x15, 0x16, 0x25, 0x51, 0x3f, 0x47, 0x96, 0xcc, 0xcc, 0xa6, 0xad, 0x9a, 0x04, 0x92, 0x21, 0xa4,
	0xc0, 0x76, 0xd1, 0x48, 0xb2, 0xb4, 0xbb, 0xb6, 0x5b, 0x64, 0x01, 0xea, 0x0f, 0xab, 0xac, 0x2d,
	0x2b, 0x63, 0x0b, 0x1b, 0x14, 0x05, 0x06, 0x34, 0x39, 0x94, 0x69, 0x4b, 0x24, 0x77, 0x34, 0xb6,
	0xa5, 0x5e, 0x05, 0x7d, 0x82, 0x3e, 0x46, 0x91, 0xeb, 0x3c, 0x42, 0x81, 0xe6, 0xa6, 0x40, 0x6e,
	0x0a, 0x14, 0xb9, 0x10, 0x12, 0xf5, 0xb6, 0x0f, 0x51, 0xcc, 0x90, 0xfa, 0xb1, 0xbd, 0x2d, 0xea,
	0x6d, 0x2f, 0xda, 0x2b, 0x9e, 0xbf, 0xf9, 0xe6, 0xcc, 0x9c, 0xef, 0xcc, 0x91, 0xe0, 0xc5, 0xd0,
	0xe1, 0xe7, 0x57, 0x67, 0x65, 0xd3, 0x1b, 0x57, 0x4e, 0xcf, 0xe9, 0xe9, 0xb9, 0xe3, 0x0e, 0x27,
	0x3d, 0xca, 0x6f, 0x3c, 0x76, 0x59, 0x31, 0x7c, 0xa7, 0xe2, 0x33, 0x8f, 0x7b, 0xa6, 0x37, 0xaa,
	0x8c, 0x3c, 0x66, 0xdc, 0x18, 0xee, 0xf2, 0x5b, 0x96, 0x0e, 0x94, 0x0c, 0xd5, 0x0f, 0x3e, 0xd9,
	0x00, 0x1a, 0x7a, 0x43, 0x2f, 0x58, 0x78, 0x76, 0x65, 0x4b, 0x4d, 0x2a, 0x52, 0x0a, 0xd6, 0x95,
	0xfe, 0xae, 0x40, 0xea, 0x88, 0x72, 0xc3, 0x32, 0xb8, 0x81, 0xea, 0x00, 0x63, 0xcf, 0xba, 0x1a,
	0x19, 0xdc, 0xf1, 0xdc, 0x7c, 0x66, 0x47, 0x79, 0x9c, 0xab, 0x3d, 0x2a, 0x2f, 0x37, 0x3a, 0x5a,
	0xb9, 0xf0, 0x46, 0x18, 0xfa, 0x10, 0xd2, 0x62, 0x31, 0x61, 0x06, 0xa7, 0xf9, 0xad, 0x1d, 0xe5,
	0x71, 0x1a, 0xa7, 0x84, 0x01, 0x1b, 0x9c, 0xa2, 0x9f, 0x42, 0xea, 0xcc, 0xe1, 0x81, 0x2f, 0xbb,
	0xa3, 0x3c, 0xce, 0xe2, 0xe4, 0x99, 0xc3, 0xa5, 0xab, 0x08, 0x19, 0xd3, 0xb3, 0x1c, 0x77, 0x18,
	0x78, 0x73, 0x72, 0x25, 0x04, 0x26, 0x19, 0xf0, 0x08, 0x54, 0x9b, 0x98, 0x2e, 0xcf, 0x6f, 0xcb,
	0x85, 0x71, 0xbb, 0xe9, 0x72, 0xf4, 0x29, 0xe4, 0x6c, 0x46, 0xdf, 0x5c, 0x51, 0xd7, 0x9c, 0x11,
	0x7f, 0x64, 0xb8, 0x79, 0x4d, 0xa6, 0xf9, 0xe3, 0x55, 0x9a, 0x9d, 0xa5, 0xbb, 0x3f, 0x32, 0x5c,
	0x9c, 0xb5, 0x37, 0xd5, 0xd2, 0xd7, 0x0a, 0x6c, 0x9f, 0x4e, 0x9b, 0x9e, 0x6b, 0x3b, 0xc3, 0x2b,
	0x16, 0x1c, 0xe0, 0x7f, 0xff, 0xd4, 0xa5, 0x79, 0x1c, 0x90, 0x6e, 0x72, 0xe7, 0x5a, 0x6e, 0xbe,
	0xaa, 0xd7, 0x6f, 0x20, 0x69, 0xf8, 0x3e, 0xa1, 0x57, 0x4e, 0x5e, 0xd9, 0x51, 0x1e, 0x6f, 0x35,
	0x9a, 0xdf, 0xcc, 0x8b, 0x91, 0xef, 0xe6, 0xc5, 0xdd, 0x7f, 0xc5, 0x26, 0xce, 0xdd, 0x8a, 0xe9,
	0x31, 0x5a, 0xe1, 0x33, 0x9f, 0x4e, 0xca, 0xba, 0xef, 0xb7, 0x07, 0xdd, 0xc5, 0xbc, 0x98, 0x08,
	0x24, 0x9c, 0x30, 0x7c, 0xbf, 0x7d, 0xe5, 0x08, 0x74, 0x8b, 0x5e, 0x4b, 0xf4, 0xe8, 0x3b, 0xa3,
	0xb7, 0xe8, 0x75, 0x88, 0x1e, 0x48, 0x38, 0x61, 0xd1, 0x6b, 0x81, 0xfe, 0x39, 0xa4, 0x04, 0xba,
	0x61, 0x59, 0x2c, 0x1f, 0x93, 0xf0, 0xcf, 0xbf, 0x9b, 0x17, 0x6b, 0x0f, 0x83, 0xd6, 0x2d, 0x8b,
	0x61, 0x91, 0xa5, 0x10, 0x10, 0x86, 0xb4, 0x7b, 0x73, 0x49, 0x26, 0xe4, 0x92, 0xce, 0xf2, 0xf1,
	0x77, 0xc2, 0xec, 0xdd, 0x5c, 0x9e, 0xbc, 0xa2, 0x33, 0x9c, 0x74, 0x03, 0x01, 0xd5, 0x21, 0xcb,
	0xa6, 0xbb, 0xc4, 0x62, 0xc4, 0xb3, 0xed, 0x09, 0xe5, 0x92, 0x1f, 0xd9, 0xc6, 0xf6, 0x62, 0x5e,
	0xcc, 0xe0, 0xe9, 0x6e, 0x0b, 0x1f, 0x4b, 0x33, 0xce, 0xb0, 0xe9, 0x6e, 0x8b, 0x05, 0x0a, 0xda,
	0x81, 0x04, 0x9b, 0xd6, 0x88, 0xc5, 0x24, 0x33, 0xb2, 0x8d, 0xf4, 0x62, 0x5e, 0x54, 0xf1, 0xb4,
	0xd6, 0xc2, 0x58, 0x65, 0xd3, 0x5a, 0x8b, 0x09, 0x86, 0xb0, 0x29, 0xb1, 0xe8, 0xc8, 0x98, 0x2d,
	0x19, 0xc2, 0xa6, 0x2d, 0xa1, 0xa2, 0xa7, 0x90, 0x34, 0x6d, 0x32, 0x72, 0x26, 0x5c, 0xb2, 0x23,
	0x53, 0xdb, 0x5e, 0x71, 0xb1, 0xd9, 0x39, 0x74, 0x26, 0xbc, 0x01, 0xe2, 0x3a, 0x03, 0x19, 0x27,
	0x4c, 0x5b, 0x7c, 0xdf, 0xd2, 0x17, 0xdb, 0x0f, 0xe9, 0x8b, 0x3f, 0x46, 0x21, 0x79, 0x44, 0x27,
	0x13, 0x63, 0x48, 0xd1, 0x2f, 0x40, 0x1d, 0x93, 0x73, 0x8b, 0x49, 0x4e, 0x65, 0x6a, 0xd9, 0x75,
	0x2b, 0xbc, 0x6c, 0xe1, 0x46, 0x4a, 0x90, 0xe0, 0xdb, 0x79, 0x51, 0xc1, 0xf1, 0xf1, 0x4b, 0x4b,
	0x9c, 0x24, 0x36, 0x76, 0xcc, 0x90, 0x21, 0xc9, 0xc5, 0xbc, 0x18, 0x3b, 0xea, 0x36, 0xb1, 0xb0,
	0xa1, 0x0e, 0x64, 0xc6, 0x86, 0x49, 0x7c, 0x63, 0x36, 0xf2, 0x0c, 0x4b, 0x56, 0x39, 0xb3, 0xd9,
	0x59, 0x7a, 0xb3, 0x1f, 0xb8, 0x1a, 0xb9, 0xc5, 0xbc, 0x08, 0x6b, 0xfd, 0x65, 0x04, 0xc3, 0xd8,
	0x30, 0x43, 0x0d, 0x1d, 0xc3, 0xfb, 0x17, 0x9e, 0xe3, 0x12, 0x99, 0xf1, 0x84, 0xaf, 0x00, 0xe3,
	0x12, 0xf0, 0xc3, 0x15, 0xe0, 0x67, 0x9e, 0xe3, 0xe2, 0x20, 0x66, 0x0d, 0x84, 0x2e, 0xee, 0x59,
	0xd1, 0x21, 0x3c, 0x92, 0x80, 0x86, 0x69, 0x52, 0x7f, 0x8d, 0xa7, 0x4a, 0xbc, 0x0f, 0x6e, 0xe1,
	0xe9, 0x32, 0x64, 0x0d, 0xf7, 0xde, 0xc5, 0x5d, 0x63, 0x23, 0x0d, 0xc9, 0x50, 0x2c, 0x9d, 0x40,
	0x5c, 0x5c, 0x12, 0xfa, 0x19, 0x24, 0xc6, 0x44, 0x30, 0x4a, 0xde, 0x61, 0xae, 0x96, 0x5b, 0x1f,
	0xfa, 0x74, 0xe6, 0x53, 0xac, 0x8e, 0xc5, 0x07, 0x7d, 0x0c, 0xea, 0xd8, 0xb8, 0xf0, 0x98, 0xbc,
	0xbd, 0x5b, 0x51, 0xc2, 0x8a, 0x03, 0x67, 0xe9, 0x77, 0x0a, 0x6c, 0xdc, 0x8d, 0x28, 0x8f, 0xfd,
	0xd6, 0xf2, 0x74, 0xee, 0x94, 0xc7, 0x16, 0xe5, 0xf9, 0x11, 0x24, 0x6c, 0xe2, 0x7b, 0x8c, 0xcb,
	0x3d, 0x54, 0xac, 0xda, 0x7d, 0x8f, 0x71, 0x54, 0x81, 0x8c, 0xcd, 0xc6, 0xb7, 0x4a, 0xb3, 0x15,
	0x54, 0xa1, 0x83, 0x8f, 0xc2, 0x9d, 0x30, 0xd8, 0x6c, 0xbc, 0x3c, 0xd9, 0x5f, 0x14, 0x88, 0x8b,
	0x0d, 0xd0, 0x60, 0xa3, 0x6f, 0x83, 0x47, 0xe7, 0x97, 0xe1, 0xb3, 0xf0, 0x1f, 0xf5, 0x6e, 0x45,
	0xe4, 0x69, 0x72, 0x36, 0x92, 0x79, 0x66, 0x36, 0xee, 0xa2, 0xd3, 0xe4, 0x6c, 0xb4, 0x71, 0x2e,
	0xd5, 0x16, 0x86, 0xf5, 0x3b, 0x19, 0xdb, 0x98, 0x0e, 0x55, 0x81, 0xe2, 0xf9, 0x7c, 0x92, 0x8f,
	0xef, 0xc4, 0xee, 0x92, 0xad, 0xe9, 0x8d, 0xc7, 0x86, 0x6b, 0x35, 0xe2, 0x02, 0x0a, 0xab, 0xf6,
	0xb1, 0xcf, 0x27, 0xa5, 0x2f, 0x15, 0x50, 0xe5, 0x0e, 0x82, 0xc8, 0x46, 0x78, 0xa6, 0x54, 0x40,
	0x64, 0xbd, 0x85, 0xb1, 0xb0, 0xa1, 0x4f, 0x20, 0x63, 0x58, 0x8c, 0x18, 0xe6, 0xa5, 0xe0, 0xa0,
	0xcc, 0x30, 0xd5, 0xc8, 0x2e, 0xe6, 0xc5, 0xb4, 0xde, 0xc2, 0xba, 0x79, 0x89, 0xe9, 0x1b, 0x9c,
	0x36, 0x2c, 0x16, 0x88, 0x48, 0x83, 0x98, 0x61, 0x5e, 0xca, 0xc4, 0x52, 0x58, 0x88, 0x62, 0x5a,
	0xd8, 0xc4, 0xa7, 0xae, 0x78, 0xe5, 0x25, 0x6d, 0x53, 0x38, 0x65, 0xf7, 0x03, 0xbd, 0xa4, 0xcb,
	0xf2, 0x86, 0xd9, 0x89, 0x34, 0x4c, 0xc7, 0x92, 0x69, 0x64, 0x83, 0x34, 0x9a, 0xdd, 0x16, 0x16,
	0x36, 0x94, 0x87, 0xe4, 0xb2, 0x60, 0xb2, 0xdd, 0xf0, 0x52, 0x2d, 0x7d, 0x15, 0x05, 0x74, 0x9f,
	0xfd, 0xff, 0xd7, 0xf3, 0xe1, 0x0b, 0x48, 0x0b, 0x74, 0xd7, 0x73, 0x4d, 0x1a, 0xf2, 0xf3, 0x57,
	0x21, 0x7e, 0xfd, 0x61, 0xf8, 0x3d, 0x01, 0x81, 0x05, 0x6b, 0xa5, 0x54, 0xfa, 0x73, 0x0c, 0xde,
	0xbb, 0xd7, 0xda, 0xe8, 0x23, 0x48, 0x53, 0xd7, 0x64, 0x33, 0x9f, 0xd3, 0xe0, 0xf6, 0xb7, 0xf0,
	0xda, 0x20, 0xb2, 0x11, 0x37, 0x19, 0x64, 0x13, 0x7d, 0xe7, 0x6c, 0x74, 0xdf, 0x0f, 0xb3, 0x31,
	0x42, 0x09, 0x7d, 0x01, 0x09, 0x97, 0x72, 0xe2, 0x2c, 0x9b, 0x50, 0x0f, 0x61, 0xab, 0x0f, 0x99,
	0x5a, 0x94, 0x77, 0x5b, 0x62, 0xc6, 0x48, 0x01, 0xab, 0x2e, 0xe5, 0x5d, 0xeb, 0x56, 0xa7, 0xc6,
	0xff, 0x7b, 0x9d, 0xfa, 0x02, 0x32, 0xd6, 0x88, 0x4c, 0x28, 0xe7, 0x62, 0x55, 0xf8, 0x68, 0xae,
	0x1b, 0xad, 0x75, 0x78, 0x12, 0xba, 0x36, 0x7a, 0x16, 0xac, 0xd1, 0xd2, 0x7a, 0x6b, 0xf4, 0x25,
	0xfe, 0xe9, 0xe8, 0x4b, 0xfe, 0xdb, 0xa3, 0xaf, 0x64, 0x02, 0xac, 0x37, 0xbd, 0x3f, 0xb0, 0x95,
	0x07, 0x0d, 0xec, 0xe8, 0xdb, 0x07, 0x76, 0xe9, 0x23, 0x08, 0xb7, 0x45, 0x08, 0xe2, 0x62, 0x76,
	0xe6, 0x95, 0x9d, 0x98, 0x7c, 0x77, 0x18, 0x7d, 0xf3, 0xa4, 0x08, 0xb0, 0xfe, 0x9d, 0x88, 0x52,
	0x10, 0x3f, 0x3c, 0xc6, 0xba, 0x16, 0x41, 0x49, 0x88, 0x75, 0x4e, 0x5e, 0x69, 0xca, 0x93, 0x3f,
	0x29, 0x90, 0xbd, 0x35, 0x80, 0x51, 0x0e, 0xa0, 0x3d, 0x20, 0xfb, 0xcf, 0xeb, 0x64, 0x7f, 0xaf,
	0xaa, 0x45, 0x84, 0x3e, 0x38, 0x21, 0x07, 0xd5, 0x1a, 0x39, 0xa8, 0xed, 0x6b, 0x8a, 0xd0, 0x9b,
	0x3d, 0xb2, 0xb7, 0x77, 0x40, 0xf6, 0xf6, 0xf7, 0xb4, 0x28, 0x02, 0x48, 0xb4, 0x07, 0xe4, 0x69,
	0xbd, 0xae, 0xc5, 0x84, 0x4f, 0x1f, 0x90, 0x83, 0xdd, 0x67, 0x32, 0x36, 0x1e, 0xc6, 0x3e, 0xdd,
	0xab, 0x92, 0x67, 0xbb, 0x55, 0x4d, 0x15, 0xb1, 0xfa, 0x09, 0x39, 0xa8, 0xd5, 0xb5, 0x84, 0x8c,
	0x15, 0x72, 0x55, 0xea, 0x9f, 0xae, 0xf4, 0x3a, 0x39, 0xa8, 0x3d, 0xd3, 0x5e, 0x08, 0xfd, 0x15,
	0x5e, 0xf9, 0x93, 0x42, 0xef, 0xf6, 0xc8, 0xfe, 0xf3, 0x67, 0x64, 0xff, 0xf9, 0x9e, 0x96, 0x12,
	0x3a, 0x16, 0x79, 0x3e, 0x95, 0x79, 0xa6, 0x9f, 0xfc, 0x04, 0x54, 0x39, 0x9d, 0x84, 0x43, 0x9c,
	0xf2, 0xb5, 0xde, 0x23, 0x78, 0x57, 0x8b, 0x3c, 0xf9, 0x2d, 0xa8, 0x72, 0xb8, 0x21, 0x0d, 0xb6,
	0x3e, 0x3b, 0xee, 0xf6, 0x08, 0x6e, 0x7f, 0x3e, 0x68, 0x9f, 0x9c, 0x6a, 0x11, 0xb4, 0x0d, 0x19,
	0x69, 0xd1, 0x9b, 0xcd, 0x76, 0xff, 0x54, 0x53, 0x10, 0x82, 0xdc, 0xa0, 0xd7, 0x3c, 0xee, 0x75,
	0xba, 0xf8, 0xa8, 0xdd, 0x22, 0x83, 0xbe, 0x16, 0x45, 0xef, 0x83, 0xb6, 0x69, 0x6b, 0x1d, 0xbf,
	0xee, 0x69, 0x31, 0x01, 0x76, 0x2b, 0x2e, 0x2e, 0xd6, 0xde, 0x89, 0x52, 0x1b, 0x5f, 0x2b, 0x7f,
	0xfd, 0xa1, 0x10, 0xf9, 0xfe, 0x87, 0x82, 0xf2, 0xe5, 0xa2, 0xa0, 0xfc, 0x61, 0x51, 0x50, 0xbe,
	0x59, 0x14, 0x94, 0x6f, 0x17, 0x05, 0xe5, 0xfb, 0x45, 0x41, 0xf9, 0xfd, 0xdf, 0x0a, 0x11, 0xf8,
	0xb9, 0xc7, 0x86, 0x65, 0x7e, 0x4e, 0xb9, 0x24, 0xbb, 0x1b, 0x90, 0xbd, 0x6c, 0xf8, 0x4e, 0x79,
	0xf9, 0xcf, 0x6a, 0xc9, 0xb5, 0xc6, 0xd6, 0xa1, 0x87, 0x8d, 0xd7, 0x7a, 0xaf, 0x2f, 0x1c, 0x7d,
	0xe5, 0xd7, 0xd5, 0x87, 0xfe, 0x37, 0xfb, 0x2a, 0xfa, 0xf1, 0xdd, 0xb8, 0xb2, 0xde, 0xef, 0x96,
	0x37, 0x71, 0x4d, 0x6f, 0x74, 0x96, 0x90, 0x0b, 0xeb, 0xff, 0x08, 0x00, 0x00, 0xff, 0xff, 0xc2,
	0x52, 0xb5, 0x9c, 0xfd, 0x0d, 0x00, 0x00,
}
