<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: github.com/TheThingsNetwork/api/protocol/lorawan/device.proto

namespace Lorawan;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * Protobuf type <code>lorawan.Device</code>
 */
class Device extends \Google\Protobuf\Internal\Message
{
    /**
     * <pre>
     * The AppEUI is a unique, 8 byte identifier for the application a device belongs to.
     * </pre>
     *
     * <code>bytes app_eui = 1 [(.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/TheThingsNetwork/ttn/core/types.AppEUI", (.gogoproto.customname) = "AppEUI"];</code>
     */
    private $app_eui = '';
    /**
     * <pre>
     * The DevEUI is a unique, 8 byte identifier for the device.
     * </pre>
     *
     * <code>bytes dev_eui = 2 [(.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/TheThingsNetwork/ttn/core/types.DevEUI", (.gogoproto.customname) = "DevEUI"];</code>
     */
    private $dev_eui = '';
    /**
     * <pre>
     * The AppID is a unique identifier for the application a device belongs to. It can contain lowercase letters, numbers, - and _.
     * </pre>
     *
     * <code>string app_id = 3 [(.gogoproto.customname) = "AppID"];</code>
     */
    private $app_id = '';
    /**
     * <pre>
     * The DevID is a unique identifier for the device. It can contain lowercase letters, numbers, - and _.
     * </pre>
     *
     * <code>string dev_id = 4 [(.gogoproto.customname) = "DevID"];</code>
     */
    private $dev_id = '';
    /**
     * <pre>
     * The DevAddr is a dynamic, 4 byte session address for the device.
     * </pre>
     *
     * <code>bytes dev_addr = 5 [(.gogoproto.customtype) = "github.com/TheThingsNetwork/ttn/core/types.DevAddr"];</code>
     */
    private $dev_addr = '';
    /**
     * <pre>
     * The NwkSKey is a 16 byte session key that is known by the device and the network. It is used for routing and MAC related functionality.
     * This key is negotiated during the OTAA join procedure, or statically configured using ABP.
     * </pre>
     *
     * <code>bytes nwk_s_key = 6 [(.gogoproto.customtype) = "github.com/TheThingsNetwork/ttn/core/types.NwkSKey"];</code>
     */
    private $nwk_s_key = '';
    /**
     * <pre>
     * The AppSKey is a 16 byte session key that is known by the device and the application. It is used for payload encryption.
     * This key is negotiated during the OTAA join procedure, or statically configured using ABP.
     * </pre>
     *
     * <code>bytes app_s_key = 7 [(.gogoproto.customtype) = "github.com/TheThingsNetwork/ttn/core/types.AppSKey"];</code>
     */
    private $app_s_key = '';
    /**
     * <pre>
     * The AppKey is a 16 byte static key that is known by the device and the application. It is used for negotiating session keys (OTAA).
     * </pre>
     *
     * <code>bytes app_key = 8 [(.gogoproto.customtype) = "github.com/TheThingsNetwork/ttn/core/types.AppKey"];</code>
     */
    private $app_key = '';
    /**
     * <pre>
     * FCntUp is the uplink frame counter for a device session.
     * </pre>
     *
     * <code>uint32 f_cnt_up = 9;</code>
     */
    private $f_cnt_up = 0;
    /**
     * <pre>
     * FCntDown is the downlink frame counter for a device session.
     * </pre>
     *
     * <code>uint32 f_cnt_down = 10;</code>
     */
    private $f_cnt_down = 0;
    /**
     * <pre>
     * The DisableFCntCheck option disables the frame counter check. Disabling this makes the device vulnerable to replay attacks, but makes ABP slightly easier.
     * </pre>
     *
     * <code>bool disable_f_cnt_check = 11;</code>
     */
    private $disable_f_cnt_check = false;
    /**
     * <pre>
     * The Uses32BitFCnt option indicates that the device keeps track of full 32 bit frame counters. As only the 16 lsb are actually transmitted, the 16 msb will have to be inferred.
     * </pre>
     *
     * <code>bool uses32_bit_f_cnt = 12;</code>
     */
    private $uses32_bit_f_cnt = false;
    /**
     * <pre>
     * The ActivationContstraints are used to allocate a device address for a device (comma-separated).
     * There are different prefixes for `otaa`, `abp`, `world`, `local`, `private`, `testing`.
     * </pre>
     *
     * <code>string activation_constraints = 13;</code>
     */
    private $activation_constraints = '';
    /**
     * <pre>
     * When the device was last seen (Unix nanoseconds)
     * </pre>
     *
     * <code>int64 last_seen = 21;</code>
     */
    private $last_seen = 0;

    public function __construct() {
        \GPBMetadata\GithubCom\TheThingsNetwork\Api\Protocol\Lorawan\Device::initOnce();
        parent::__construct();
    }

    /**
     * <pre>
     * The AppEUI is a unique, 8 byte identifier for the application a device belongs to.
     * </pre>
     *
     * <code>bytes app_eui = 1 [(.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/TheThingsNetwork/ttn/core/types.AppEUI", (.gogoproto.customname) = "AppEUI"];</code>
     */
    public function getAppEui()
    {
        return $this->app_eui;
    }

    /**
     * <pre>
     * The AppEUI is a unique, 8 byte identifier for the application a device belongs to.
     * </pre>
     *
     * <code>bytes app_eui = 1 [(.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/TheThingsNetwork/ttn/core/types.AppEUI", (.gogoproto.customname) = "AppEUI"];</code>
     */
    public function setAppEui($var)
    {
        GPBUtil::checkString($var, False);
        $this->app_eui = $var;
    }

    /**
     * <pre>
     * The DevEUI is a unique, 8 byte identifier for the device.
     * </pre>
     *
     * <code>bytes dev_eui = 2 [(.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/TheThingsNetwork/ttn/core/types.DevEUI", (.gogoproto.customname) = "DevEUI"];</code>
     */
    public function getDevEui()
    {
        return $this->dev_eui;
    }

    /**
     * <pre>
     * The DevEUI is a unique, 8 byte identifier for the device.
     * </pre>
     *
     * <code>bytes dev_eui = 2 [(.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/TheThingsNetwork/ttn/core/types.DevEUI", (.gogoproto.customname) = "DevEUI"];</code>
     */
    public function setDevEui($var)
    {
        GPBUtil::checkString($var, False);
        $this->dev_eui = $var;
    }

    /**
     * <pre>
     * The AppID is a unique identifier for the application a device belongs to. It can contain lowercase letters, numbers, - and _.
     * </pre>
     *
     * <code>string app_id = 3 [(.gogoproto.customname) = "AppID"];</code>
     */
    public function getAppId()
    {
        return $this->app_id;
    }

    /**
     * <pre>
     * The AppID is a unique identifier for the application a device belongs to. It can contain lowercase letters, numbers, - and _.
     * </pre>
     *
     * <code>string app_id = 3 [(.gogoproto.customname) = "AppID"];</code>
     */
    public function setAppId($var)
    {
        GPBUtil::checkString($var, True);
        $this->app_id = $var;
    }

    /**
     * <pre>
     * The DevID is a unique identifier for the device. It can contain lowercase letters, numbers, - and _.
     * </pre>
     *
     * <code>string dev_id = 4 [(.gogoproto.customname) = "DevID"];</code>
     */
    public function getDevId()
    {
        return $this->dev_id;
    }

    /**
     * <pre>
     * The DevID is a unique identifier for the device. It can contain lowercase letters, numbers, - and _.
     * </pre>
     *
     * <code>string dev_id = 4 [(.gogoproto.customname) = "DevID"];</code>
     */
    public function setDevId($var)
    {
        GPBUtil::checkString($var, True);
        $this->dev_id = $var;
    }

    /**
     * <pre>
     * The DevAddr is a dynamic, 4 byte session address for the device.
     * </pre>
     *
     * <code>bytes dev_addr = 5 [(.gogoproto.customtype) = "github.com/TheThingsNetwork/ttn/core/types.DevAddr"];</code>
     */
    public function getDevAddr()
    {
        return $this->dev_addr;
    }

    /**
     * <pre>
     * The DevAddr is a dynamic, 4 byte session address for the device.
     * </pre>
     *
     * <code>bytes dev_addr = 5 [(.gogoproto.customtype) = "github.com/TheThingsNetwork/ttn/core/types.DevAddr"];</code>
     */
    public function setDevAddr($var)
    {
        GPBUtil::checkString($var, False);
        $this->dev_addr = $var;
    }

    /**
     * <pre>
     * The NwkSKey is a 16 byte session key that is known by the device and the network. It is used for routing and MAC related functionality.
     * This key is negotiated during the OTAA join procedure, or statically configured using ABP.
     * </pre>
     *
     * <code>bytes nwk_s_key = 6 [(.gogoproto.customtype) = "github.com/TheThingsNetwork/ttn/core/types.NwkSKey"];</code>
     */
    public function getNwkSKey()
    {
        return $this->nwk_s_key;
    }

    /**
     * <pre>
     * The NwkSKey is a 16 byte session key that is known by the device and the network. It is used for routing and MAC related functionality.
     * This key is negotiated during the OTAA join procedure, or statically configured using ABP.
     * </pre>
     *
     * <code>bytes nwk_s_key = 6 [(.gogoproto.customtype) = "github.com/TheThingsNetwork/ttn/core/types.NwkSKey"];</code>
     */
    public function setNwkSKey($var)
    {
        GPBUtil::checkString($var, False);
        $this->nwk_s_key = $var;
    }

    /**
     * <pre>
     * The AppSKey is a 16 byte session key that is known by the device and the application. It is used for payload encryption.
     * This key is negotiated during the OTAA join procedure, or statically configured using ABP.
     * </pre>
     *
     * <code>bytes app_s_key = 7 [(.gogoproto.customtype) = "github.com/TheThingsNetwork/ttn/core/types.AppSKey"];</code>
     */
    public function getAppSKey()
    {
        return $this->app_s_key;
    }

    /**
     * <pre>
     * The AppSKey is a 16 byte session key that is known by the device and the application. It is used for payload encryption.
     * This key is negotiated during the OTAA join procedure, or statically configured using ABP.
     * </pre>
     *
     * <code>bytes app_s_key = 7 [(.gogoproto.customtype) = "github.com/TheThingsNetwork/ttn/core/types.AppSKey"];</code>
     */
    public function setAppSKey($var)
    {
        GPBUtil::checkString($var, False);
        $this->app_s_key = $var;
    }

    /**
     * <pre>
     * The AppKey is a 16 byte static key that is known by the device and the application. It is used for negotiating session keys (OTAA).
     * </pre>
     *
     * <code>bytes app_key = 8 [(.gogoproto.customtype) = "github.com/TheThingsNetwork/ttn/core/types.AppKey"];</code>
     */
    public function getAppKey()
    {
        return $this->app_key;
    }

    /**
     * <pre>
     * The AppKey is a 16 byte static key that is known by the device and the application. It is used for negotiating session keys (OTAA).
     * </pre>
     *
     * <code>bytes app_key = 8 [(.gogoproto.customtype) = "github.com/TheThingsNetwork/ttn/core/types.AppKey"];</code>
     */
    public function setAppKey($var)
    {
        GPBUtil::checkString($var, False);
        $this->app_key = $var;
    }

    /**
     * <pre>
     * FCntUp is the uplink frame counter for a device session.
     * </pre>
     *
     * <code>uint32 f_cnt_up = 9;</code>
     */
    public function getFCntUp()
    {
        return $this->f_cnt_up;
    }

    /**
     * <pre>
     * FCntUp is the uplink frame counter for a device session.
     * </pre>
     *
     * <code>uint32 f_cnt_up = 9;</code>
     */
    public function setFCntUp($var)
    {
        GPBUtil::checkUint32($var);
        $this->f_cnt_up = $var;
    }

    /**
     * <pre>
     * FCntDown is the downlink frame counter for a device session.
     * </pre>
     *
     * <code>uint32 f_cnt_down = 10;</code>
     */
    public function getFCntDown()
    {
        return $this->f_cnt_down;
    }

    /**
     * <pre>
     * FCntDown is the downlink frame counter for a device session.
     * </pre>
     *
     * <code>uint32 f_cnt_down = 10;</code>
     */
    public function setFCntDown($var)
    {
        GPBUtil::checkUint32($var);
        $this->f_cnt_down = $var;
    }

    /**
     * <pre>
     * The DisableFCntCheck option disables the frame counter check. Disabling this makes the device vulnerable to replay attacks, but makes ABP slightly easier.
     * </pre>
     *
     * <code>bool disable_f_cnt_check = 11;</code>
     */
    public function getDisableFCntCheck()
    {
        return $this->disable_f_cnt_check;
    }

    /**
     * <pre>
     * The DisableFCntCheck option disables the frame counter check. Disabling this makes the device vulnerable to replay attacks, but makes ABP slightly easier.
     * </pre>
     *
     * <code>bool disable_f_cnt_check = 11;</code>
     */
    public function setDisableFCntCheck($var)
    {
        GPBUtil::checkBool($var);
        $this->disable_f_cnt_check = $var;
    }

    /**
     * <pre>
     * The Uses32BitFCnt option indicates that the device keeps track of full 32 bit frame counters. As only the 16 lsb are actually transmitted, the 16 msb will have to be inferred.
     * </pre>
     *
     * <code>bool uses32_bit_f_cnt = 12;</code>
     */
    public function getUses32BitFCnt()
    {
        return $this->uses32_bit_f_cnt;
    }

    /**
     * <pre>
     * The Uses32BitFCnt option indicates that the device keeps track of full 32 bit frame counters. As only the 16 lsb are actually transmitted, the 16 msb will have to be inferred.
     * </pre>
     *
     * <code>bool uses32_bit_f_cnt = 12;</code>
     */
    public function setUses32BitFCnt($var)
    {
        GPBUtil::checkBool($var);
        $this->uses32_bit_f_cnt = $var;
    }

    /**
     * <pre>
     * The ActivationContstraints are used to allocate a device address for a device (comma-separated).
     * There are different prefixes for `otaa`, `abp`, `world`, `local`, `private`, `testing`.
     * </pre>
     *
     * <code>string activation_constraints = 13;</code>
     */
    public function getActivationConstraints()
    {
        return $this->activation_constraints;
    }

    /**
     * <pre>
     * The ActivationContstraints are used to allocate a device address for a device (comma-separated).
     * There are different prefixes for `otaa`, `abp`, `world`, `local`, `private`, `testing`.
     * </pre>
     *
     * <code>string activation_constraints = 13;</code>
     */
    public function setActivationConstraints($var)
    {
        GPBUtil::checkString($var, True);
        $this->activation_constraints = $var;
    }

    /**
     * <pre>
     * When the device was last seen (Unix nanoseconds)
     * </pre>
     *
     * <code>int64 last_seen = 21;</code>
     */
    public function getLastSeen()
    {
        return $this->last_seen;
    }

    /**
     * <pre>
     * When the device was last seen (Unix nanoseconds)
     * </pre>
     *
     * <code>int64 last_seen = 21;</code>
     */
    public function setLastSeen($var)
    {
        GPBUtil::checkInt64($var);
        $this->last_seen = $var;
    }

}

