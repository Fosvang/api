<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: github.com/TheThingsNetwork/api/handler/handler.proto

namespace Handler;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * <pre>
 * The Application settings
 * </pre>
 *
 * Protobuf type <code>handler.Application</code>
 */
class Application extends \Google\Protobuf\Internal\Message
{
    /**
     * <code>string app_id = 1 [(.gogoproto.customname) = "AppID"];</code>
     */
    private $app_id = '';
    /**
     * <pre>
     * The payload format indicates how payload is formatted.
     * </pre>
     *
     * <code>string payload_format = 6;</code>
     */
    private $payload_format = '';
    /**
     * <pre>
     * The decoder is a JavaScript function that decodes a byte array to an object.
     * This function is used when the payload format is set to custom.
     * </pre>
     *
     * <code>string decoder = 2;</code>
     */
    private $decoder = '';
    /**
     * <pre>
     * The converter is a JavaScript function that can be used to convert values
     * in the object returned from the decoder. This can for example be useful to
     * convert a voltage to a temperature. This function is used when the payload format is set to custom.
     * </pre>
     *
     * <code>string converter = 3;</code>
     */
    private $converter = '';
    /**
     * <pre>
     * The validator is a JavaScript function that checks the validity of the
     * object returned by the decoder or converter. If validation fails, the
     * message is dropped. This function is used when the payload format is set to custom.
     * </pre>
     *
     * <code>string validator = 4;</code>
     */
    private $validator = '';
    /**
     * <pre>
     * The encoder is a JavaScript function that encodes an object to a byte array.
     * This function is used when the payload format is set to custom.
     * </pre>
     *
     * <code>string encoder = 5;</code>
     */
    private $encoder = '';
    /**
     * <pre>
     * The "register on join" access key should only be set if devices need to be registered on join
     * </pre>
     *
     * <code>string register_on_join_access_key = 7;</code>
     */
    private $register_on_join_access_key = '';

    public function __construct() {
        \GPBMetadata\GithubCom\TheThingsNetwork\Api\Handler\Handler::initOnce();
        parent::__construct();
    }

    /**
     * <code>string app_id = 1 [(.gogoproto.customname) = "AppID"];</code>
     */
    public function getAppId()
    {
        return $this->app_id;
    }

    /**
     * <code>string app_id = 1 [(.gogoproto.customname) = "AppID"];</code>
     */
    public function setAppId($var)
    {
        GPBUtil::checkString($var, True);
        $this->app_id = $var;
    }

    /**
     * <pre>
     * The payload format indicates how payload is formatted.
     * </pre>
     *
     * <code>string payload_format = 6;</code>
     */
    public function getPayloadFormat()
    {
        return $this->payload_format;
    }

    /**
     * <pre>
     * The payload format indicates how payload is formatted.
     * </pre>
     *
     * <code>string payload_format = 6;</code>
     */
    public function setPayloadFormat($var)
    {
        GPBUtil::checkString($var, True);
        $this->payload_format = $var;
    }

    /**
     * <pre>
     * The decoder is a JavaScript function that decodes a byte array to an object.
     * This function is used when the payload format is set to custom.
     * </pre>
     *
     * <code>string decoder = 2;</code>
     */
    public function getDecoder()
    {
        return $this->decoder;
    }

    /**
     * <pre>
     * The decoder is a JavaScript function that decodes a byte array to an object.
     * This function is used when the payload format is set to custom.
     * </pre>
     *
     * <code>string decoder = 2;</code>
     */
    public function setDecoder($var)
    {
        GPBUtil::checkString($var, True);
        $this->decoder = $var;
    }

    /**
     * <pre>
     * The converter is a JavaScript function that can be used to convert values
     * in the object returned from the decoder. This can for example be useful to
     * convert a voltage to a temperature. This function is used when the payload format is set to custom.
     * </pre>
     *
     * <code>string converter = 3;</code>
     */
    public function getConverter()
    {
        return $this->converter;
    }

    /**
     * <pre>
     * The converter is a JavaScript function that can be used to convert values
     * in the object returned from the decoder. This can for example be useful to
     * convert a voltage to a temperature. This function is used when the payload format is set to custom.
     * </pre>
     *
     * <code>string converter = 3;</code>
     */
    public function setConverter($var)
    {
        GPBUtil::checkString($var, True);
        $this->converter = $var;
    }

    /**
     * <pre>
     * The validator is a JavaScript function that checks the validity of the
     * object returned by the decoder or converter. If validation fails, the
     * message is dropped. This function is used when the payload format is set to custom.
     * </pre>
     *
     * <code>string validator = 4;</code>
     */
    public function getValidator()
    {
        return $this->validator;
    }

    /**
     * <pre>
     * The validator is a JavaScript function that checks the validity of the
     * object returned by the decoder or converter. If validation fails, the
     * message is dropped. This function is used when the payload format is set to custom.
     * </pre>
     *
     * <code>string validator = 4;</code>
     */
    public function setValidator($var)
    {
        GPBUtil::checkString($var, True);
        $this->validator = $var;
    }

    /**
     * <pre>
     * The encoder is a JavaScript function that encodes an object to a byte array.
     * This function is used when the payload format is set to custom.
     * </pre>
     *
     * <code>string encoder = 5;</code>
     */
    public function getEncoder()
    {
        return $this->encoder;
    }

    /**
     * <pre>
     * The encoder is a JavaScript function that encodes an object to a byte array.
     * This function is used when the payload format is set to custom.
     * </pre>
     *
     * <code>string encoder = 5;</code>
     */
    public function setEncoder($var)
    {
        GPBUtil::checkString($var, True);
        $this->encoder = $var;
    }

    /**
     * <pre>
     * The "register on join" access key should only be set if devices need to be registered on join
     * </pre>
     *
     * <code>string register_on_join_access_key = 7;</code>
     */
    public function getRegisterOnJoinAccessKey()
    {
        return $this->register_on_join_access_key;
    }

    /**
     * <pre>
     * The "register on join" access key should only be set if devices need to be registered on join
     * </pre>
     *
     * <code>string register_on_join_access_key = 7;</code>
     */
    public function setRegisterOnJoinAccessKey($var)
    {
        GPBUtil::checkString($var, True);
        $this->register_on_join_access_key = $var;
    }

}

