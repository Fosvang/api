<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: github.com/TheThingsNetwork/api/discovery/discovery.proto

namespace Discovery;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * <pre>
 * The Announcement of a service (also called component)
 * </pre>
 *
 * Protobuf type <code>discovery.Announcement</code>
 */
class Announcement extends \Google\Protobuf\Internal\Message
{
    /**
     * <pre>
     * The ID of the component
     * </pre>
     *
     * <code>string id = 1 [(.gogoproto.customname) = "ID"];</code>
     */
    private $id = '';
    /**
     * <pre>
     * The name of the component (router/broker/handler)
     * </pre>
     *
     * <code>string service_name = 2;</code>
     */
    private $service_name = '';
    /**
     * <pre>
     * Service version in the form "[version]-[commit] ([build date])"
     * </pre>
     *
     * <code>string service_version = 3;</code>
     */
    private $service_version = '';
    /**
     * <pre>
     * Description of the component
     * </pre>
     *
     * <code>string description = 4;</code>
     */
    private $description = '';
    /**
     * <pre>
     * URL with documentation or more information about this component
     * </pre>
     *
     * <code>string url = 5;</code>
     */
    private $url = '';
    /**
     * <pre>
     * Indicates whether this service is part of The Things Network (the public community network)
     * </pre>
     *
     * <code>bool public = 6;</code>
     */
    private $public = false;
    /**
     * <pre>
     * Comma-separated network addresses in the form "domain1:port,domain2:port,domain3:port" (currently we only use the first)
     * </pre>
     *
     * <code>string net_address = 11;</code>
     */
    private $net_address = '';
    /**
     * <pre>
     * ECDSA public key of this component
     * </pre>
     *
     * <code>string public_key = 12;</code>
     */
    private $public_key = '';
    /**
     * <pre>
     * TLS Certificate for gRPC on net_address (if TLS is enabled)
     * </pre>
     *
     * <code>string certificate = 13;</code>
     */
    private $certificate = '';
    /**
     * <pre>
     * Contains the address where the HTTP API is exposed (if there is one).
     * Format of api_address: `http(s)://domain(:port)`
     * default http port is 80, default https port is 443.
     * </pre>
     *
     * <code>string api_address = 14;</code>
     */
    private $api_address = '';
    /**
     * <pre>
     * Contains the address where the MQTT API is exposed (if there is one)
     * Format of mqtt_address: `(mqtt(s)://)host(:port)`
     * default mqtt port is 1883, default mqtts port is 8883.
     * Examples:
     * if `host:port` then `mqtt://host:port`
     * if `host:8883` then `mqtts://host:8883`
     * if `host` then `mqtt://host:1883` and `mqtts://host:8883`
     * if `mqtt://host` then `mqtt://host:1883`
     * if `mqtts://host` then `mqtt://host:1883` and `mqtts://host:8883`
     * </pre>
     *
     * <code>string mqtt_address = 15;</code>
     */
    private $mqtt_address = '';
    /**
     * <pre>
     * Contains the address where the AMQP API is exposed (if there is one)
     * Format of amqp_address: `(amqp(s)://)host(:port)`
     * default amqp port is 5672, default amqps port is 5671.
     * Examples:
     * if `host:port` then `amqp://host:port`
     * if `host:5671` then `amqps://host:5671`
     * if `host` then `amqp://host:5672` and `amqps://host:5671`
     * if `amqp://host` then `amqp://host:5672`
     * if `amqps://host` then `amqp://host:5672` and `amqps://host:5671`
     * </pre>
     *
     * <code>string amqp_address = 16;</code>
     */
    private $amqp_address = '';
    /**
     * <pre>
     * Metadata for this component
     * </pre>
     *
     * <code>repeated .discovery.Metadata metadata = 22;</code>
     */
    private $metadata;

    public function __construct() {
        \GPBMetadata\GithubCom\TheThingsNetwork\Api\Discovery\Discovery::initOnce();
        parent::__construct();
    }

    /**
     * <pre>
     * The ID of the component
     * </pre>
     *
     * <code>string id = 1 [(.gogoproto.customname) = "ID"];</code>
     */
    public function getId()
    {
        return $this->id;
    }

    /**
     * <pre>
     * The ID of the component
     * </pre>
     *
     * <code>string id = 1 [(.gogoproto.customname) = "ID"];</code>
     */
    public function setId($var)
    {
        GPBUtil::checkString($var, True);
        $this->id = $var;
    }

    /**
     * <pre>
     * The name of the component (router/broker/handler)
     * </pre>
     *
     * <code>string service_name = 2;</code>
     */
    public function getServiceName()
    {
        return $this->service_name;
    }

    /**
     * <pre>
     * The name of the component (router/broker/handler)
     * </pre>
     *
     * <code>string service_name = 2;</code>
     */
    public function setServiceName($var)
    {
        GPBUtil::checkString($var, True);
        $this->service_name = $var;
    }

    /**
     * <pre>
     * Service version in the form "[version]-[commit] ([build date])"
     * </pre>
     *
     * <code>string service_version = 3;</code>
     */
    public function getServiceVersion()
    {
        return $this->service_version;
    }

    /**
     * <pre>
     * Service version in the form "[version]-[commit] ([build date])"
     * </pre>
     *
     * <code>string service_version = 3;</code>
     */
    public function setServiceVersion($var)
    {
        GPBUtil::checkString($var, True);
        $this->service_version = $var;
    }

    /**
     * <pre>
     * Description of the component
     * </pre>
     *
     * <code>string description = 4;</code>
     */
    public function getDescription()
    {
        return $this->description;
    }

    /**
     * <pre>
     * Description of the component
     * </pre>
     *
     * <code>string description = 4;</code>
     */
    public function setDescription($var)
    {
        GPBUtil::checkString($var, True);
        $this->description = $var;
    }

    /**
     * <pre>
     * URL with documentation or more information about this component
     * </pre>
     *
     * <code>string url = 5;</code>
     */
    public function getUrl()
    {
        return $this->url;
    }

    /**
     * <pre>
     * URL with documentation or more information about this component
     * </pre>
     *
     * <code>string url = 5;</code>
     */
    public function setUrl($var)
    {
        GPBUtil::checkString($var, True);
        $this->url = $var;
    }

    /**
     * <pre>
     * Indicates whether this service is part of The Things Network (the public community network)
     * </pre>
     *
     * <code>bool public = 6;</code>
     */
    public function getPublic()
    {
        return $this->public;
    }

    /**
     * <pre>
     * Indicates whether this service is part of The Things Network (the public community network)
     * </pre>
     *
     * <code>bool public = 6;</code>
     */
    public function setPublic($var)
    {
        GPBUtil::checkBool($var);
        $this->public = $var;
    }

    /**
     * <pre>
     * Comma-separated network addresses in the form "domain1:port,domain2:port,domain3:port" (currently we only use the first)
     * </pre>
     *
     * <code>string net_address = 11;</code>
     */
    public function getNetAddress()
    {
        return $this->net_address;
    }

    /**
     * <pre>
     * Comma-separated network addresses in the form "domain1:port,domain2:port,domain3:port" (currently we only use the first)
     * </pre>
     *
     * <code>string net_address = 11;</code>
     */
    public function setNetAddress($var)
    {
        GPBUtil::checkString($var, True);
        $this->net_address = $var;
    }

    /**
     * <pre>
     * ECDSA public key of this component
     * </pre>
     *
     * <code>string public_key = 12;</code>
     */
    public function getPublicKey()
    {
        return $this->public_key;
    }

    /**
     * <pre>
     * ECDSA public key of this component
     * </pre>
     *
     * <code>string public_key = 12;</code>
     */
    public function setPublicKey($var)
    {
        GPBUtil::checkString($var, True);
        $this->public_key = $var;
    }

    /**
     * <pre>
     * TLS Certificate for gRPC on net_address (if TLS is enabled)
     * </pre>
     *
     * <code>string certificate = 13;</code>
     */
    public function getCertificate()
    {
        return $this->certificate;
    }

    /**
     * <pre>
     * TLS Certificate for gRPC on net_address (if TLS is enabled)
     * </pre>
     *
     * <code>string certificate = 13;</code>
     */
    public function setCertificate($var)
    {
        GPBUtil::checkString($var, True);
        $this->certificate = $var;
    }

    /**
     * <pre>
     * Contains the address where the HTTP API is exposed (if there is one).
     * Format of api_address: `http(s)://domain(:port)`
     * default http port is 80, default https port is 443.
     * </pre>
     *
     * <code>string api_address = 14;</code>
     */
    public function getApiAddress()
    {
        return $this->api_address;
    }

    /**
     * <pre>
     * Contains the address where the HTTP API is exposed (if there is one).
     * Format of api_address: `http(s)://domain(:port)`
     * default http port is 80, default https port is 443.
     * </pre>
     *
     * <code>string api_address = 14;</code>
     */
    public function setApiAddress($var)
    {
        GPBUtil::checkString($var, True);
        $this->api_address = $var;
    }

    /**
     * <pre>
     * Contains the address where the MQTT API is exposed (if there is one)
     * Format of mqtt_address: `(mqtt(s)://)host(:port)`
     * default mqtt port is 1883, default mqtts port is 8883.
     * Examples:
     * if `host:port` then `mqtt://host:port`
     * if `host:8883` then `mqtts://host:8883`
     * if `host` then `mqtt://host:1883` and `mqtts://host:8883`
     * if `mqtt://host` then `mqtt://host:1883`
     * if `mqtts://host` then `mqtt://host:1883` and `mqtts://host:8883`
     * </pre>
     *
     * <code>string mqtt_address = 15;</code>
     */
    public function getMqttAddress()
    {
        return $this->mqtt_address;
    }

    /**
     * <pre>
     * Contains the address where the MQTT API is exposed (if there is one)
     * Format of mqtt_address: `(mqtt(s)://)host(:port)`
     * default mqtt port is 1883, default mqtts port is 8883.
     * Examples:
     * if `host:port` then `mqtt://host:port`
     * if `host:8883` then `mqtts://host:8883`
     * if `host` then `mqtt://host:1883` and `mqtts://host:8883`
     * if `mqtt://host` then `mqtt://host:1883`
     * if `mqtts://host` then `mqtt://host:1883` and `mqtts://host:8883`
     * </pre>
     *
     * <code>string mqtt_address = 15;</code>
     */
    public function setMqttAddress($var)
    {
        GPBUtil::checkString($var, True);
        $this->mqtt_address = $var;
    }

    /**
     * <pre>
     * Contains the address where the AMQP API is exposed (if there is one)
     * Format of amqp_address: `(amqp(s)://)host(:port)`
     * default amqp port is 5672, default amqps port is 5671.
     * Examples:
     * if `host:port` then `amqp://host:port`
     * if `host:5671` then `amqps://host:5671`
     * if `host` then `amqp://host:5672` and `amqps://host:5671`
     * if `amqp://host` then `amqp://host:5672`
     * if `amqps://host` then `amqp://host:5672` and `amqps://host:5671`
     * </pre>
     *
     * <code>string amqp_address = 16;</code>
     */
    public function getAmqpAddress()
    {
        return $this->amqp_address;
    }

    /**
     * <pre>
     * Contains the address where the AMQP API is exposed (if there is one)
     * Format of amqp_address: `(amqp(s)://)host(:port)`
     * default amqp port is 5672, default amqps port is 5671.
     * Examples:
     * if `host:port` then `amqp://host:port`
     * if `host:5671` then `amqps://host:5671`
     * if `host` then `amqp://host:5672` and `amqps://host:5671`
     * if `amqp://host` then `amqp://host:5672`
     * if `amqps://host` then `amqp://host:5672` and `amqps://host:5671`
     * </pre>
     *
     * <code>string amqp_address = 16;</code>
     */
    public function setAmqpAddress($var)
    {
        GPBUtil::checkString($var, True);
        $this->amqp_address = $var;
    }

    /**
     * <pre>
     * Metadata for this component
     * </pre>
     *
     * <code>repeated .discovery.Metadata metadata = 22;</code>
     */
    public function getMetadata()
    {
        return $this->metadata;
    }

    /**
     * <pre>
     * Metadata for this component
     * </pre>
     *
     * <code>repeated .discovery.Metadata metadata = 22;</code>
     */
    public function setMetadata(&$var)
    {
        $arr = GPBUtil::checkRepeatedField($var, \Google\Protobuf\Internal\GPBType::MESSAGE, \Discovery\Metadata::class);
        $this->metadata = $arr;
    }

}

