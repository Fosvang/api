<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: github.com/TheThingsNetwork/api/gateway/gateway.proto

namespace Gateway;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * Protobuf type <code>gateway.TxConfiguration</code>
 */
class TxConfiguration extends \Google\Protobuf\Internal\Message
{
    /**
     * <pre>
     * Timestamp (uptime of LoRa module) in microseconds with rollover
     * </pre>
     *
     * <code>uint32 timestamp = 11;</code>
     */
    private $timestamp = 0;
    /**
     * <code>uint32 rf_chain = 21;</code>
     */
    private $rf_chain = 0;
    /**
     * <pre>
     * Frequency in Hz
     * </pre>
     *
     * <code>uint64 frequency = 22;</code>
     */
    private $frequency = 0;
    /**
     * <pre>
     * Transmit power in dBm
     * </pre>
     *
     * <code>int32 power = 23;</code>
     */
    private $power = 0;
    /**
     * <pre>
     * LoRa polarization inversion (basically always true for messages from gateway to node)
     * </pre>
     *
     * <code>bool polarization_inversion = 31;</code>
     */
    private $polarization_inversion = false;
    /**
     * <pre>
     * FSK frequency deviation in Hz
     * </pre>
     *
     * <code>uint32 frequency_deviation = 32;</code>
     */
    private $frequency_deviation = 0;

    public function __construct() {
        \GPBMetadata\GithubCom\TheThingsNetwork\Api\Gateway\Gateway::initOnce();
        parent::__construct();
    }

    /**
     * <pre>
     * Timestamp (uptime of LoRa module) in microseconds with rollover
     * </pre>
     *
     * <code>uint32 timestamp = 11;</code>
     */
    public function getTimestamp()
    {
        return $this->timestamp;
    }

    /**
     * <pre>
     * Timestamp (uptime of LoRa module) in microseconds with rollover
     * </pre>
     *
     * <code>uint32 timestamp = 11;</code>
     */
    public function setTimestamp($var)
    {
        GPBUtil::checkUint32($var);
        $this->timestamp = $var;
    }

    /**
     * <code>uint32 rf_chain = 21;</code>
     */
    public function getRfChain()
    {
        return $this->rf_chain;
    }

    /**
     * <code>uint32 rf_chain = 21;</code>
     */
    public function setRfChain($var)
    {
        GPBUtil::checkUint32($var);
        $this->rf_chain = $var;
    }

    /**
     * <pre>
     * Frequency in Hz
     * </pre>
     *
     * <code>uint64 frequency = 22;</code>
     */
    public function getFrequency()
    {
        return $this->frequency;
    }

    /**
     * <pre>
     * Frequency in Hz
     * </pre>
     *
     * <code>uint64 frequency = 22;</code>
     */
    public function setFrequency($var)
    {
        GPBUtil::checkUint64($var);
        $this->frequency = $var;
    }

    /**
     * <pre>
     * Transmit power in dBm
     * </pre>
     *
     * <code>int32 power = 23;</code>
     */
    public function getPower()
    {
        return $this->power;
    }

    /**
     * <pre>
     * Transmit power in dBm
     * </pre>
     *
     * <code>int32 power = 23;</code>
     */
    public function setPower($var)
    {
        GPBUtil::checkInt32($var);
        $this->power = $var;
    }

    /**
     * <pre>
     * LoRa polarization inversion (basically always true for messages from gateway to node)
     * </pre>
     *
     * <code>bool polarization_inversion = 31;</code>
     */
    public function getPolarizationInversion()
    {
        return $this->polarization_inversion;
    }

    /**
     * <pre>
     * LoRa polarization inversion (basically always true for messages from gateway to node)
     * </pre>
     *
     * <code>bool polarization_inversion = 31;</code>
     */
    public function setPolarizationInversion($var)
    {
        GPBUtil::checkBool($var);
        $this->polarization_inversion = $var;
    }

    /**
     * <pre>
     * FSK frequency deviation in Hz
     * </pre>
     *
     * <code>uint32 frequency_deviation = 32;</code>
     */
    public function getFrequencyDeviation()
    {
        return $this->frequency_deviation;
    }

    /**
     * <pre>
     * FSK frequency deviation in Hz
     * </pre>
     *
     * <code>uint32 frequency_deviation = 32;</code>
     */
    public function setFrequencyDeviation($var)
    {
        GPBUtil::checkUint32($var);
        $this->frequency_deviation = $var;
    }

}

