// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: github.com/TheThingsNetwork/api/handler/handler.proto

/*
	Package handler is a generated protocol buffer package.

	It is generated from these files:
		github.com/TheThingsNetwork/api/handler/handler.proto

	It has these top-level messages:
		DeviceActivationResponse
		StatusRequest
		Status
		ApplicationIdentifier
		Application
		DeviceIdentifier
		Device
		DeviceList
		DryDownlinkMessage
		DryUplinkMessage
		SimulatedUplinkMessage
		LogEntry
		DryUplinkResult
		DryDownlinkResult
*/
package handler

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/gogo/protobuf/types"
import _ "google.golang.org/genproto/googleapis/api/annotations"
import _ "github.com/gogo/protobuf/gogoproto"
import api "github.com/TheThingsNetwork/api"
import broker "github.com/TheThingsNetwork/api/broker"
import protocol "github.com/TheThingsNetwork/api/protocol"
import lorawan1 "github.com/TheThingsNetwork/api/protocol/lorawan"
import trace "github.com/TheThingsNetwork/api/trace"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type DeviceActivationResponse struct {
	Payload            []byte                       `protobuf:"bytes,1,opt,name=payload,proto3" json:"payload,omitempty"`
	Message            *protocol.Message            `protobuf:"bytes,2,opt,name=message" json:"message,omitempty"`
	DownlinkOption     *broker.DownlinkOption       `protobuf:"bytes,11,opt,name=downlink_option,json=downlinkOption" json:"downlink_option,omitempty"`
	ActivationMetadata *protocol.ActivationMetadata `protobuf:"bytes,23,opt,name=activation_metadata,json=activationMetadata" json:"activation_metadata,omitempty"`
	Trace              *trace.Trace                 `protobuf:"bytes,31,opt,name=trace" json:"trace,omitempty"`
}

func (m *DeviceActivationResponse) Reset()                    { *m = DeviceActivationResponse{} }
func (m *DeviceActivationResponse) String() string            { return proto.CompactTextString(m) }
func (*DeviceActivationResponse) ProtoMessage()               {}
func (*DeviceActivationResponse) Descriptor() ([]byte, []int) { return fileDescriptorHandler, []int{0} }

func (m *DeviceActivationResponse) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (m *DeviceActivationResponse) GetMessage() *protocol.Message {
	if m != nil {
		return m.Message
	}
	return nil
}

func (m *DeviceActivationResponse) GetDownlinkOption() *broker.DownlinkOption {
	if m != nil {
		return m.DownlinkOption
	}
	return nil
}

func (m *DeviceActivationResponse) GetActivationMetadata() *protocol.ActivationMetadata {
	if m != nil {
		return m.ActivationMetadata
	}
	return nil
}

func (m *DeviceActivationResponse) GetTrace() *trace.Trace {
	if m != nil {
		return m.Trace
	}
	return nil
}

// message StatusRequest is used to request the status of this Handler
type StatusRequest struct {
}

func (m *StatusRequest) Reset()                    { *m = StatusRequest{} }
func (m *StatusRequest) String() string            { return proto.CompactTextString(m) }
func (*StatusRequest) ProtoMessage()               {}
func (*StatusRequest) Descriptor() ([]byte, []int) { return fileDescriptorHandler, []int{1} }

// message Status is the response to the StatusRequest
type Status struct {
	System      *api.SystemStats    `protobuf:"bytes,1,opt,name=system" json:"system,omitempty"`
	Component   *api.ComponentStats `protobuf:"bytes,2,opt,name=component" json:"component,omitempty"`
	Uplink      *api.Rates          `protobuf:"bytes,11,opt,name=uplink" json:"uplink,omitempty"`
	Downlink    *api.Rates          `protobuf:"bytes,12,opt,name=downlink" json:"downlink,omitempty"`
	Activations *api.Rates          `protobuf:"bytes,13,opt,name=activations" json:"activations,omitempty"`
}

func (m *Status) Reset()                    { *m = Status{} }
func (m *Status) String() string            { return proto.CompactTextString(m) }
func (*Status) ProtoMessage()               {}
func (*Status) Descriptor() ([]byte, []int) { return fileDescriptorHandler, []int{2} }

func (m *Status) GetSystem() *api.SystemStats {
	if m != nil {
		return m.System
	}
	return nil
}

func (m *Status) GetComponent() *api.ComponentStats {
	if m != nil {
		return m.Component
	}
	return nil
}

func (m *Status) GetUplink() *api.Rates {
	if m != nil {
		return m.Uplink
	}
	return nil
}

func (m *Status) GetDownlink() *api.Rates {
	if m != nil {
		return m.Downlink
	}
	return nil
}

func (m *Status) GetActivations() *api.Rates {
	if m != nil {
		return m.Activations
	}
	return nil
}

type ApplicationIdentifier struct {
	AppID string `protobuf:"bytes,1,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
}

func (m *ApplicationIdentifier) Reset()                    { *m = ApplicationIdentifier{} }
func (m *ApplicationIdentifier) String() string            { return proto.CompactTextString(m) }
func (*ApplicationIdentifier) ProtoMessage()               {}
func (*ApplicationIdentifier) Descriptor() ([]byte, []int) { return fileDescriptorHandler, []int{3} }

func (m *ApplicationIdentifier) GetAppID() string {
	if m != nil {
		return m.AppID
	}
	return ""
}

// The Application settings
type Application struct {
	AppID string `protobuf:"bytes,1,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
	// The payload format indicates how payload is formatted.
	PayloadFormat string `protobuf:"bytes,6,opt,name=payload_format,json=payloadFormat,proto3" json:"payload_format,omitempty"`
	// The decoder is a JavaScript function that decodes a byte array to an object.
	// This function is used when the payload format is set to custom.
	Decoder string `protobuf:"bytes,2,opt,name=decoder,proto3" json:"decoder,omitempty"`
	// The converter is a JavaScript function that can be used to convert values
	// in the object returned from the decoder. This can for example be useful to
	// convert a voltage to a temperature. This function is used when the payload format is set to custom.
	Converter string `protobuf:"bytes,3,opt,name=converter,proto3" json:"converter,omitempty"`
	// The validator is a JavaScript function that checks the validity of the
	// object returned by the decoder or converter. If validation fails, the
	// message is dropped. This function is used when the payload format is set to custom.
	Validator string `protobuf:"bytes,4,opt,name=validator,proto3" json:"validator,omitempty"`
	// The encoder is a JavaScript function that encodes an object to a byte array.
	// This function is used when the payload format is set to custom.
	Encoder string `protobuf:"bytes,5,opt,name=encoder,proto3" json:"encoder,omitempty"`
	// The "register on join" access key should only be set if devices need to be registered on join
	RegisterOnJoinAccessKey string `protobuf:"bytes,7,opt,name=register_on_join_access_key,json=registerOnJoinAccessKey,proto3" json:"register_on_join_access_key,omitempty"`
}

func (m *Application) Reset()                    { *m = Application{} }
func (m *Application) String() string            { return proto.CompactTextString(m) }
func (*Application) ProtoMessage()               {}
func (*Application) Descriptor() ([]byte, []int) { return fileDescriptorHandler, []int{4} }

func (m *Application) GetAppID() string {
	if m != nil {
		return m.AppID
	}
	return ""
}

func (m *Application) GetPayloadFormat() string {
	if m != nil {
		return m.PayloadFormat
	}
	return ""
}

func (m *Application) GetDecoder() string {
	if m != nil {
		return m.Decoder
	}
	return ""
}

func (m *Application) GetConverter() string {
	if m != nil {
		return m.Converter
	}
	return ""
}

func (m *Application) GetValidator() string {
	if m != nil {
		return m.Validator
	}
	return ""
}

func (m *Application) GetEncoder() string {
	if m != nil {
		return m.Encoder
	}
	return ""
}

func (m *Application) GetRegisterOnJoinAccessKey() string {
	if m != nil {
		return m.RegisterOnJoinAccessKey
	}
	return ""
}

type DeviceIdentifier struct {
	AppID string `protobuf:"bytes,1,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
	DevID string `protobuf:"bytes,2,opt,name=dev_id,json=devId,proto3" json:"dev_id,omitempty"`
}

func (m *DeviceIdentifier) Reset()                    { *m = DeviceIdentifier{} }
func (m *DeviceIdentifier) String() string            { return proto.CompactTextString(m) }
func (*DeviceIdentifier) ProtoMessage()               {}
func (*DeviceIdentifier) Descriptor() ([]byte, []int) { return fileDescriptorHandler, []int{5} }

func (m *DeviceIdentifier) GetAppID() string {
	if m != nil {
		return m.AppID
	}
	return ""
}

func (m *DeviceIdentifier) GetDevID() string {
	if m != nil {
		return m.DevID
	}
	return ""
}

// The Device settings
type Device struct {
	AppID string `protobuf:"bytes,1,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
	DevID string `protobuf:"bytes,2,opt,name=dev_id,json=devId,proto3" json:"dev_id,omitempty"`
	// The device can be of different kinds
	//
	// Types that are valid to be assigned to Device:
	//	*Device_LorawanDevice
	Device      isDevice_Device   `protobuf_oneof:"device"`
	Latitude    float32           `protobuf:"fixed32,10,opt,name=latitude,proto3" json:"latitude,omitempty"`
	Longitude   float32           `protobuf:"fixed32,11,opt,name=longitude,proto3" json:"longitude,omitempty"`
	Altitude    int32             `protobuf:"varint,12,opt,name=altitude,proto3" json:"altitude,omitempty"`
	Attributes  map[string]string `protobuf:"bytes,13,rep,name=attributes" json:"attributes,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Description string            `protobuf:"bytes,20,opt,name=description,proto3" json:"description,omitempty"`
}

func (m *Device) Reset()                    { *m = Device{} }
func (m *Device) String() string            { return proto.CompactTextString(m) }
func (*Device) ProtoMessage()               {}
func (*Device) Descriptor() ([]byte, []int) { return fileDescriptorHandler, []int{6} }

type isDevice_Device interface {
	isDevice_Device()
	MarshalTo([]byte) (int, error)
	Size() int
}

type Device_LorawanDevice struct {
	LorawanDevice *lorawan1.Device `protobuf:"bytes,3,opt,name=lorawan_device,json=lorawanDevice,oneof"`
}

func (*Device_LorawanDevice) isDevice_Device() {}

func (m *Device) GetDevice() isDevice_Device {
	if m != nil {
		return m.Device
	}
	return nil
}

func (m *Device) GetAppID() string {
	if m != nil {
		return m.AppID
	}
	return ""
}

func (m *Device) GetDevID() string {
	if m != nil {
		return m.DevID
	}
	return ""
}

func (m *Device) GetLorawanDevice() *lorawan1.Device {
	if x, ok := m.GetDevice().(*Device_LorawanDevice); ok {
		return x.LorawanDevice
	}
	return nil
}

func (m *Device) GetLatitude() float32 {
	if m != nil {
		return m.Latitude
	}
	return 0
}

func (m *Device) GetLongitude() float32 {
	if m != nil {
		return m.Longitude
	}
	return 0
}

func (m *Device) GetAltitude() int32 {
	if m != nil {
		return m.Altitude
	}
	return 0
}

func (m *Device) GetAttributes() map[string]string {
	if m != nil {
		return m.Attributes
	}
	return nil
}

func (m *Device) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Device) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _Device_OneofMarshaler, _Device_OneofUnmarshaler, _Device_OneofSizer, []interface{}{
		(*Device_LorawanDevice)(nil),
	}
}

func _Device_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Device)
	// device
	switch x := m.Device.(type) {
	case *Device_LorawanDevice:
		_ = b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.LorawanDevice); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("Device.Device has unexpected type %T", x)
	}
	return nil
}

func _Device_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Device)
	switch tag {
	case 3: // device.lorawan_device
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(lorawan1.Device)
		err := b.DecodeMessage(msg)
		m.Device = &Device_LorawanDevice{msg}
		return true, err
	default:
		return false, nil
	}
}

func _Device_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*Device)
	// device
	switch x := m.Device.(type) {
	case *Device_LorawanDevice:
		s := proto.Size(x.LorawanDevice)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type DeviceList struct {
	Devices []*Device `protobuf:"bytes,1,rep,name=devices" json:"devices,omitempty"`
}

func (m *DeviceList) Reset()                    { *m = DeviceList{} }
func (m *DeviceList) String() string            { return proto.CompactTextString(m) }
func (*DeviceList) ProtoMessage()               {}
func (*DeviceList) Descriptor() ([]byte, []int) { return fileDescriptorHandler, []int{7} }

func (m *DeviceList) GetDevices() []*Device {
	if m != nil {
		return m.Devices
	}
	return nil
}

// DryDownlinkMessage is a simulated message to test downlink processing
type DryDownlinkMessage struct {
	// The binary payload to use
	Payload []byte `protobuf:"bytes,1,opt,name=payload,proto3" json:"payload,omitempty"`
	// JSON-encoded object with fields to encode
	Fields string `protobuf:"bytes,2,opt,name=fields,proto3" json:"fields,omitempty"`
	// The Application containing the payload functions that should be executed
	App *Application `protobuf:"bytes,3,opt,name=app" json:"app,omitempty"`
	// The port number that should be passed to the payload function
	Port uint32 `protobuf:"varint,4,opt,name=port,proto3" json:"port,omitempty"`
}

func (m *DryDownlinkMessage) Reset()                    { *m = DryDownlinkMessage{} }
func (m *DryDownlinkMessage) String() string            { return proto.CompactTextString(m) }
func (*DryDownlinkMessage) ProtoMessage()               {}
func (*DryDownlinkMessage) Descriptor() ([]byte, []int) { return fileDescriptorHandler, []int{8} }

func (m *DryDownlinkMessage) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (m *DryDownlinkMessage) GetFields() string {
	if m != nil {
		return m.Fields
	}
	return ""
}

func (m *DryDownlinkMessage) GetApp() *Application {
	if m != nil {
		return m.App
	}
	return nil
}

func (m *DryDownlinkMessage) GetPort() uint32 {
	if m != nil {
		return m.Port
	}
	return 0
}

// DryUplinkMessage is a simulated message to test uplink processing
type DryUplinkMessage struct {
	// The binary payload to use
	Payload []byte `protobuf:"bytes,1,opt,name=payload,proto3" json:"payload,omitempty"`
	// The Application containing the payload functions that should be executed
	App *Application `protobuf:"bytes,2,opt,name=app" json:"app,omitempty"`
	// The port number that should be passed to the payload function
	Port uint32 `protobuf:"varint,3,opt,name=port,proto3" json:"port,omitempty"`
}

func (m *DryUplinkMessage) Reset()                    { *m = DryUplinkMessage{} }
func (m *DryUplinkMessage) String() string            { return proto.CompactTextString(m) }
func (*DryUplinkMessage) ProtoMessage()               {}
func (*DryUplinkMessage) Descriptor() ([]byte, []int) { return fileDescriptorHandler, []int{9} }

func (m *DryUplinkMessage) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (m *DryUplinkMessage) GetApp() *Application {
	if m != nil {
		return m.App
	}
	return nil
}

func (m *DryUplinkMessage) GetPort() uint32 {
	if m != nil {
		return m.Port
	}
	return 0
}

// SimulatedUplinkMessage is a simulated uplink message
type SimulatedUplinkMessage struct {
	AppID string `protobuf:"bytes,1,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
	DevID string `protobuf:"bytes,2,opt,name=dev_id,json=devId,proto3" json:"dev_id,omitempty"`
	// The binary payload to use
	Payload []byte `protobuf:"bytes,3,opt,name=payload,proto3" json:"payload,omitempty"`
	// The port number
	Port uint32 `protobuf:"varint,4,opt,name=port,proto3" json:"port,omitempty"`
}

func (m *SimulatedUplinkMessage) Reset()                    { *m = SimulatedUplinkMessage{} }
func (m *SimulatedUplinkMessage) String() string            { return proto.CompactTextString(m) }
func (*SimulatedUplinkMessage) ProtoMessage()               {}
func (*SimulatedUplinkMessage) Descriptor() ([]byte, []int) { return fileDescriptorHandler, []int{10} }

func (m *SimulatedUplinkMessage) GetAppID() string {
	if m != nil {
		return m.AppID
	}
	return ""
}

func (m *SimulatedUplinkMessage) GetDevID() string {
	if m != nil {
		return m.DevID
	}
	return ""
}

func (m *SimulatedUplinkMessage) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (m *SimulatedUplinkMessage) GetPort() uint32 {
	if m != nil {
		return m.Port
	}
	return 0
}

type LogEntry struct {
	// The location where the log was created (what payload function)
	Function string `protobuf:"bytes,1,opt,name=function,proto3" json:"function,omitempty"`
	// A list of JSON-encoded fields that were logged
	Fields []string `protobuf:"bytes,2,rep,name=fields" json:"fields,omitempty"`
}

func (m *LogEntry) Reset()                    { *m = LogEntry{} }
func (m *LogEntry) String() string            { return proto.CompactTextString(m) }
func (*LogEntry) ProtoMessage()               {}
func (*LogEntry) Descriptor() ([]byte, []int) { return fileDescriptorHandler, []int{11} }

func (m *LogEntry) GetFunction() string {
	if m != nil {
		return m.Function
	}
	return ""
}

func (m *LogEntry) GetFields() []string {
	if m != nil {
		return m.Fields
	}
	return nil
}

// DryUplinkResult is the result from an uplink simulation
type DryUplinkResult struct {
	// The binary payload
	Payload []byte `protobuf:"bytes,1,opt,name=payload,proto3" json:"payload,omitempty"`
	// The decoded fields
	Fields string `protobuf:"bytes,2,opt,name=fields,proto3" json:"fields,omitempty"`
	// Was validation of the message successful
	Valid bool `protobuf:"varint,3,opt,name=valid,proto3" json:"valid,omitempty"`
	// Logs that have been generated while processing
	Logs []*LogEntry `protobuf:"bytes,4,rep,name=logs" json:"logs,omitempty"`
}

func (m *DryUplinkResult) Reset()                    { *m = DryUplinkResult{} }
func (m *DryUplinkResult) String() string            { return proto.CompactTextString(m) }
func (*DryUplinkResult) ProtoMessage()               {}
func (*DryUplinkResult) Descriptor() ([]byte, []int) { return fileDescriptorHandler, []int{12} }

func (m *DryUplinkResult) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (m *DryUplinkResult) GetFields() string {
	if m != nil {
		return m.Fields
	}
	return ""
}

func (m *DryUplinkResult) GetValid() bool {
	if m != nil {
		return m.Valid
	}
	return false
}

func (m *DryUplinkResult) GetLogs() []*LogEntry {
	if m != nil {
		return m.Logs
	}
	return nil
}

// DryDownlinkResult is the result from a downlink simulation
type DryDownlinkResult struct {
	// The payload that was encoded
	Payload []byte `protobuf:"bytes,1,opt,name=payload,proto3" json:"payload,omitempty"`
	// Logs that have been generated while processing
	Logs []*LogEntry `protobuf:"bytes,2,rep,name=logs" json:"logs,omitempty"`
}

func (m *DryDownlinkResult) Reset()                    { *m = DryDownlinkResult{} }
func (m *DryDownlinkResult) String() string            { return proto.CompactTextString(m) }
func (*DryDownlinkResult) ProtoMessage()               {}
func (*DryDownlinkResult) Descriptor() ([]byte, []int) { return fileDescriptorHandler, []int{13} }

func (m *DryDownlinkResult) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (m *DryDownlinkResult) GetLogs() []*LogEntry {
	if m != nil {
		return m.Logs
	}
	return nil
}

func init() {
	proto.RegisterType((*DeviceActivationResponse)(nil), "handler.DeviceActivationResponse")
	proto.RegisterType((*StatusRequest)(nil), "handler.StatusRequest")
	proto.RegisterType((*Status)(nil), "handler.Status")
	proto.RegisterType((*ApplicationIdentifier)(nil), "handler.ApplicationIdentifier")
	proto.RegisterType((*Application)(nil), "handler.Application")
	proto.RegisterType((*DeviceIdentifier)(nil), "handler.DeviceIdentifier")
	proto.RegisterType((*Device)(nil), "handler.Device")
	proto.RegisterType((*DeviceList)(nil), "handler.DeviceList")
	proto.RegisterType((*DryDownlinkMessage)(nil), "handler.DryDownlinkMessage")
	proto.RegisterType((*DryUplinkMessage)(nil), "handler.DryUplinkMessage")
	proto.RegisterType((*SimulatedUplinkMessage)(nil), "handler.SimulatedUplinkMessage")
	proto.RegisterType((*LogEntry)(nil), "handler.LogEntry")
	proto.RegisterType((*DryUplinkResult)(nil), "handler.DryUplinkResult")
	proto.RegisterType((*DryDownlinkResult)(nil), "handler.DryDownlinkResult")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Handler service

type HandlerClient interface {
	ActivationChallenge(ctx context.Context, in *broker.ActivationChallengeRequest, opts ...grpc.CallOption) (*broker.ActivationChallengeResponse, error)
	Activate(ctx context.Context, in *broker.DeduplicatedDeviceActivationRequest, opts ...grpc.CallOption) (*DeviceActivationResponse, error)
}

type handlerClient struct {
	cc *grpc.ClientConn
}

func NewHandlerClient(cc *grpc.ClientConn) HandlerClient {
	return &handlerClient{cc}
}

func (c *handlerClient) ActivationChallenge(ctx context.Context, in *broker.ActivationChallengeRequest, opts ...grpc.CallOption) (*broker.ActivationChallengeResponse, error) {
	out := new(broker.ActivationChallengeResponse)
	err := grpc.Invoke(ctx, "/handler.Handler/ActivationChallenge", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *handlerClient) Activate(ctx context.Context, in *broker.DeduplicatedDeviceActivationRequest, opts ...grpc.CallOption) (*DeviceActivationResponse, error) {
	out := new(DeviceActivationResponse)
	err := grpc.Invoke(ctx, "/handler.Handler/Activate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Handler service

type HandlerServer interface {
	ActivationChallenge(context.Context, *broker.ActivationChallengeRequest) (*broker.ActivationChallengeResponse, error)
	Activate(context.Context, *broker.DeduplicatedDeviceActivationRequest) (*DeviceActivationResponse, error)
}

func RegisterHandlerServer(s *grpc.Server, srv HandlerServer) {
	s.RegisterService(&_Handler_serviceDesc, srv)
}

func _Handler_ActivationChallenge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(broker.ActivationChallengeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HandlerServer).ActivationChallenge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/handler.Handler/ActivationChallenge",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HandlerServer).ActivationChallenge(ctx, req.(*broker.ActivationChallengeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Handler_Activate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(broker.DeduplicatedDeviceActivationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HandlerServer).Activate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/handler.Handler/Activate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HandlerServer).Activate(ctx, req.(*broker.DeduplicatedDeviceActivationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Handler_serviceDesc = grpc.ServiceDesc{
	ServiceName: "handler.Handler",
	HandlerType: (*HandlerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ActivationChallenge",
			Handler:    _Handler_ActivationChallenge_Handler,
		},
		{
			MethodName: "Activate",
			Handler:    _Handler_Activate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "github.com/TheThingsNetwork/api/handler/handler.proto",
}

// Client API for ApplicationManager service

type ApplicationManagerClient interface {
	// Applications should first be registered to the Handler with the `RegisterApplication` method
	RegisterApplication(ctx context.Context, in *ApplicationIdentifier, opts ...grpc.CallOption) (*google_protobuf.Empty, error)
	// GetApplication returns the application with the given identifier (app_id)
	GetApplication(ctx context.Context, in *ApplicationIdentifier, opts ...grpc.CallOption) (*Application, error)
	// SetApplication updates the settings for the application. All fields must be supplied.
	SetApplication(ctx context.Context, in *Application, opts ...grpc.CallOption) (*google_protobuf.Empty, error)
	// DeleteApplication deletes the application with the given identifier (app_id)
	DeleteApplication(ctx context.Context, in *ApplicationIdentifier, opts ...grpc.CallOption) (*google_protobuf.Empty, error)
	// GetDevice returns the device with the given identifier (app_id and dev_id)
	GetDevice(ctx context.Context, in *DeviceIdentifier, opts ...grpc.CallOption) (*Device, error)
	// SetDevice creates or updates a device. All fields must be supplied.
	SetDevice(ctx context.Context, in *Device, opts ...grpc.CallOption) (*google_protobuf.Empty, error)
	// DeleteDevice deletes the device with the given identifier (app_id and dev_id)
	DeleteDevice(ctx context.Context, in *DeviceIdentifier, opts ...grpc.CallOption) (*google_protobuf.Empty, error)
	// GetDevicesForApplication returns all devices that belong to the application with the given identifier (app_id)
	GetDevicesForApplication(ctx context.Context, in *ApplicationIdentifier, opts ...grpc.CallOption) (*DeviceList, error)
	// DryUplink simulates processing a downlink message and returns the result
	DryDownlink(ctx context.Context, in *DryDownlinkMessage, opts ...grpc.CallOption) (*DryDownlinkResult, error)
	// DryUplink simulates processing an uplink message and returns the result
	DryUplink(ctx context.Context, in *DryUplinkMessage, opts ...grpc.CallOption) (*DryUplinkResult, error)
	// SimulateUplink simulates an uplink message
	SimulateUplink(ctx context.Context, in *SimulatedUplinkMessage, opts ...grpc.CallOption) (*google_protobuf.Empty, error)
}

type applicationManagerClient struct {
	cc *grpc.ClientConn
}

func NewApplicationManagerClient(cc *grpc.ClientConn) ApplicationManagerClient {
	return &applicationManagerClient{cc}
}

func (c *applicationManagerClient) RegisterApplication(ctx context.Context, in *ApplicationIdentifier, opts ...grpc.CallOption) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	err := grpc.Invoke(ctx, "/handler.ApplicationManager/RegisterApplication", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationManagerClient) GetApplication(ctx context.Context, in *ApplicationIdentifier, opts ...grpc.CallOption) (*Application, error) {
	out := new(Application)
	err := grpc.Invoke(ctx, "/handler.ApplicationManager/GetApplication", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationManagerClient) SetApplication(ctx context.Context, in *Application, opts ...grpc.CallOption) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	err := grpc.Invoke(ctx, "/handler.ApplicationManager/SetApplication", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationManagerClient) DeleteApplication(ctx context.Context, in *ApplicationIdentifier, opts ...grpc.CallOption) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	err := grpc.Invoke(ctx, "/handler.ApplicationManager/DeleteApplication", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationManagerClient) GetDevice(ctx context.Context, in *DeviceIdentifier, opts ...grpc.CallOption) (*Device, error) {
	out := new(Device)
	err := grpc.Invoke(ctx, "/handler.ApplicationManager/GetDevice", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationManagerClient) SetDevice(ctx context.Context, in *Device, opts ...grpc.CallOption) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	err := grpc.Invoke(ctx, "/handler.ApplicationManager/SetDevice", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationManagerClient) DeleteDevice(ctx context.Context, in *DeviceIdentifier, opts ...grpc.CallOption) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	err := grpc.Invoke(ctx, "/handler.ApplicationManager/DeleteDevice", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationManagerClient) GetDevicesForApplication(ctx context.Context, in *ApplicationIdentifier, opts ...grpc.CallOption) (*DeviceList, error) {
	out := new(DeviceList)
	err := grpc.Invoke(ctx, "/handler.ApplicationManager/GetDevicesForApplication", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationManagerClient) DryDownlink(ctx context.Context, in *DryDownlinkMessage, opts ...grpc.CallOption) (*DryDownlinkResult, error) {
	out := new(DryDownlinkResult)
	err := grpc.Invoke(ctx, "/handler.ApplicationManager/DryDownlink", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationManagerClient) DryUplink(ctx context.Context, in *DryUplinkMessage, opts ...grpc.CallOption) (*DryUplinkResult, error) {
	out := new(DryUplinkResult)
	err := grpc.Invoke(ctx, "/handler.ApplicationManager/DryUplink", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationManagerClient) SimulateUplink(ctx context.Context, in *SimulatedUplinkMessage, opts ...grpc.CallOption) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	err := grpc.Invoke(ctx, "/handler.ApplicationManager/SimulateUplink", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ApplicationManager service

type ApplicationManagerServer interface {
	// Applications should first be registered to the Handler with the `RegisterApplication` method
	RegisterApplication(context.Context, *ApplicationIdentifier) (*google_protobuf.Empty, error)
	// GetApplication returns the application with the given identifier (app_id)
	GetApplication(context.Context, *ApplicationIdentifier) (*Application, error)
	// SetApplication updates the settings for the application. All fields must be supplied.
	SetApplication(context.Context, *Application) (*google_protobuf.Empty, error)
	// DeleteApplication deletes the application with the given identifier (app_id)
	DeleteApplication(context.Context, *ApplicationIdentifier) (*google_protobuf.Empty, error)
	// GetDevice returns the device with the given identifier (app_id and dev_id)
	GetDevice(context.Context, *DeviceIdentifier) (*Device, error)
	// SetDevice creates or updates a device. All fields must be supplied.
	SetDevice(context.Context, *Device) (*google_protobuf.Empty, error)
	// DeleteDevice deletes the device with the given identifier (app_id and dev_id)
	DeleteDevice(context.Context, *DeviceIdentifier) (*google_protobuf.Empty, error)
	// GetDevicesForApplication returns all devices that belong to the application with the given identifier (app_id)
	GetDevicesForApplication(context.Context, *ApplicationIdentifier) (*DeviceList, error)
	// DryUplink simulates processing a downlink message and returns the result
	DryDownlink(context.Context, *DryDownlinkMessage) (*DryDownlinkResult, error)
	// DryUplink simulates processing an uplink message and returns the result
	DryUplink(context.Context, *DryUplinkMessage) (*DryUplinkResult, error)
	// SimulateUplink simulates an uplink message
	SimulateUplink(context.Context, *SimulatedUplinkMessage) (*google_protobuf.Empty, error)
}

func RegisterApplicationManagerServer(s *grpc.Server, srv ApplicationManagerServer) {
	s.RegisterService(&_ApplicationManager_serviceDesc, srv)
}

func _ApplicationManager_RegisterApplication_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApplicationIdentifier)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationManagerServer).RegisterApplication(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/handler.ApplicationManager/RegisterApplication",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationManagerServer).RegisterApplication(ctx, req.(*ApplicationIdentifier))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationManager_GetApplication_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApplicationIdentifier)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationManagerServer).GetApplication(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/handler.ApplicationManager/GetApplication",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationManagerServer).GetApplication(ctx, req.(*ApplicationIdentifier))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationManager_SetApplication_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Application)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationManagerServer).SetApplication(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/handler.ApplicationManager/SetApplication",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationManagerServer).SetApplication(ctx, req.(*Application))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationManager_DeleteApplication_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApplicationIdentifier)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationManagerServer).DeleteApplication(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/handler.ApplicationManager/DeleteApplication",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationManagerServer).DeleteApplication(ctx, req.(*ApplicationIdentifier))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationManager_GetDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeviceIdentifier)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationManagerServer).GetDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/handler.ApplicationManager/GetDevice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationManagerServer).GetDevice(ctx, req.(*DeviceIdentifier))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationManager_SetDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Device)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationManagerServer).SetDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/handler.ApplicationManager/SetDevice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationManagerServer).SetDevice(ctx, req.(*Device))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationManager_DeleteDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeviceIdentifier)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationManagerServer).DeleteDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/handler.ApplicationManager/DeleteDevice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationManagerServer).DeleteDevice(ctx, req.(*DeviceIdentifier))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationManager_GetDevicesForApplication_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApplicationIdentifier)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationManagerServer).GetDevicesForApplication(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/handler.ApplicationManager/GetDevicesForApplication",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationManagerServer).GetDevicesForApplication(ctx, req.(*ApplicationIdentifier))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationManager_DryDownlink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DryDownlinkMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationManagerServer).DryDownlink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/handler.ApplicationManager/DryDownlink",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationManagerServer).DryDownlink(ctx, req.(*DryDownlinkMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationManager_DryUplink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DryUplinkMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationManagerServer).DryUplink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/handler.ApplicationManager/DryUplink",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationManagerServer).DryUplink(ctx, req.(*DryUplinkMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationManager_SimulateUplink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SimulatedUplinkMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationManagerServer).SimulateUplink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/handler.ApplicationManager/SimulateUplink",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationManagerServer).SimulateUplink(ctx, req.(*SimulatedUplinkMessage))
	}
	return interceptor(ctx, in, info, handler)
}

var _ApplicationManager_serviceDesc = grpc.ServiceDesc{
	ServiceName: "handler.ApplicationManager",
	HandlerType: (*ApplicationManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterApplication",
			Handler:    _ApplicationManager_RegisterApplication_Handler,
		},
		{
			MethodName: "GetApplication",
			Handler:    _ApplicationManager_GetApplication_Handler,
		},
		{
			MethodName: "SetApplication",
			Handler:    _ApplicationManager_SetApplication_Handler,
		},
		{
			MethodName: "DeleteApplication",
			Handler:    _ApplicationManager_DeleteApplication_Handler,
		},
		{
			MethodName: "GetDevice",
			Handler:    _ApplicationManager_GetDevice_Handler,
		},
		{
			MethodName: "SetDevice",
			Handler:    _ApplicationManager_SetDevice_Handler,
		},
		{
			MethodName: "DeleteDevice",
			Handler:    _ApplicationManager_DeleteDevice_Handler,
		},
		{
			MethodName: "GetDevicesForApplication",
			Handler:    _ApplicationManager_GetDevicesForApplication_Handler,
		},
		{
			MethodName: "DryDownlink",
			Handler:    _ApplicationManager_DryDownlink_Handler,
		},
		{
			MethodName: "DryUplink",
			Handler:    _ApplicationManager_DryUplink_Handler,
		},
		{
			MethodName: "SimulateUplink",
			Handler:    _ApplicationManager_SimulateUplink_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "github.com/TheThingsNetwork/api/handler/handler.proto",
}

// Client API for HandlerManager service

type HandlerManagerClient interface {
	GetStatus(ctx context.Context, in *StatusRequest, opts ...grpc.CallOption) (*Status, error)
}

type handlerManagerClient struct {
	cc *grpc.ClientConn
}

func NewHandlerManagerClient(cc *grpc.ClientConn) HandlerManagerClient {
	return &handlerManagerClient{cc}
}

func (c *handlerManagerClient) GetStatus(ctx context.Context, in *StatusRequest, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := grpc.Invoke(ctx, "/handler.HandlerManager/GetStatus", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for HandlerManager service

type HandlerManagerServer interface {
	GetStatus(context.Context, *StatusRequest) (*Status, error)
}

func RegisterHandlerManagerServer(s *grpc.Server, srv HandlerManagerServer) {
	s.RegisterService(&_HandlerManager_serviceDesc, srv)
}

func _HandlerManager_GetStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HandlerManagerServer).GetStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/handler.HandlerManager/GetStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HandlerManagerServer).GetStatus(ctx, req.(*StatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _HandlerManager_serviceDesc = grpc.ServiceDesc{
	ServiceName: "handler.HandlerManager",
	HandlerType: (*HandlerManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetStatus",
			Handler:    _HandlerManager_GetStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "github.com/TheThingsNetwork/api/handler/handler.proto",
}

func (m *DeviceActivationResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeviceActivationResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Payload) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintHandler(dAtA, i, uint64(len(m.Payload)))
		i += copy(dAtA[i:], m.Payload)
	}
	if m.Message != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintHandler(dAtA, i, uint64(m.Message.Size()))
		n1, err := m.Message.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.DownlinkOption != nil {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintHandler(dAtA, i, uint64(m.DownlinkOption.Size()))
		n2, err := m.DownlinkOption.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if m.ActivationMetadata != nil {
		dAtA[i] = 0xba
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintHandler(dAtA, i, uint64(m.ActivationMetadata.Size()))
		n3, err := m.ActivationMetadata.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	if m.Trace != nil {
		dAtA[i] = 0xfa
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintHandler(dAtA, i, uint64(m.Trace.Size()))
		n4, err := m.Trace.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	return i, nil
}

func (m *StatusRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StatusRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *Status) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Status) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.System != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintHandler(dAtA, i, uint64(m.System.Size()))
		n5, err := m.System.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	if m.Component != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintHandler(dAtA, i, uint64(m.Component.Size()))
		n6, err := m.Component.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	if m.Uplink != nil {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintHandler(dAtA, i, uint64(m.Uplink.Size()))
		n7, err := m.Uplink.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n7
	}
	if m.Downlink != nil {
		dAtA[i] = 0x62
		i++
		i = encodeVarintHandler(dAtA, i, uint64(m.Downlink.Size()))
		n8, err := m.Downlink.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n8
	}
	if m.Activations != nil {
		dAtA[i] = 0x6a
		i++
		i = encodeVarintHandler(dAtA, i, uint64(m.Activations.Size()))
		n9, err := m.Activations.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n9
	}
	return i, nil
}

func (m *ApplicationIdentifier) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ApplicationIdentifier) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.AppID) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintHandler(dAtA, i, uint64(len(m.AppID)))
		i += copy(dAtA[i:], m.AppID)
	}
	return i, nil
}

func (m *Application) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Application) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.AppID) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintHandler(dAtA, i, uint64(len(m.AppID)))
		i += copy(dAtA[i:], m.AppID)
	}
	if len(m.Decoder) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintHandler(dAtA, i, uint64(len(m.Decoder)))
		i += copy(dAtA[i:], m.Decoder)
	}
	if len(m.Converter) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintHandler(dAtA, i, uint64(len(m.Converter)))
		i += copy(dAtA[i:], m.Converter)
	}
	if len(m.Validator) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintHandler(dAtA, i, uint64(len(m.Validator)))
		i += copy(dAtA[i:], m.Validator)
	}
	if len(m.Encoder) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintHandler(dAtA, i, uint64(len(m.Encoder)))
		i += copy(dAtA[i:], m.Encoder)
	}
	if len(m.PayloadFormat) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintHandler(dAtA, i, uint64(len(m.PayloadFormat)))
		i += copy(dAtA[i:], m.PayloadFormat)
	}
	if len(m.RegisterOnJoinAccessKey) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintHandler(dAtA, i, uint64(len(m.RegisterOnJoinAccessKey)))
		i += copy(dAtA[i:], m.RegisterOnJoinAccessKey)
	}
	return i, nil
}

func (m *DeviceIdentifier) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeviceIdentifier) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.AppID) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintHandler(dAtA, i, uint64(len(m.AppID)))
		i += copy(dAtA[i:], m.AppID)
	}
	if len(m.DevID) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintHandler(dAtA, i, uint64(len(m.DevID)))
		i += copy(dAtA[i:], m.DevID)
	}
	return i, nil
}

func (m *Device) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Device) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.AppID) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintHandler(dAtA, i, uint64(len(m.AppID)))
		i += copy(dAtA[i:], m.AppID)
	}
	if len(m.DevID) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintHandler(dAtA, i, uint64(len(m.DevID)))
		i += copy(dAtA[i:], m.DevID)
	}
	if m.Device != nil {
		nn10, err := m.Device.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn10
	}
	if m.Latitude != 0 {
		dAtA[i] = 0x55
		i++
		i = encodeFixed32Handler(dAtA, i, uint32(math.Float32bits(float32(m.Latitude))))
	}
	if m.Longitude != 0 {
		dAtA[i] = 0x5d
		i++
		i = encodeFixed32Handler(dAtA, i, uint32(math.Float32bits(float32(m.Longitude))))
	}
	if m.Altitude != 0 {
		dAtA[i] = 0x60
		i++
		i = encodeVarintHandler(dAtA, i, uint64(m.Altitude))
	}
	if len(m.Attributes) > 0 {
		for k, _ := range m.Attributes {
			dAtA[i] = 0x6a
			i++
			v := m.Attributes[k]
			mapSize := 1 + len(k) + sovHandler(uint64(len(k))) + 1 + len(v) + sovHandler(uint64(len(v)))
			i = encodeVarintHandler(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintHandler(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			dAtA[i] = 0x12
			i++
			i = encodeVarintHandler(dAtA, i, uint64(len(v)))
			i += copy(dAtA[i:], v)
		}
	}
	if len(m.Description) > 0 {
		dAtA[i] = 0xa2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintHandler(dAtA, i, uint64(len(m.Description)))
		i += copy(dAtA[i:], m.Description)
	}
	return i, nil
}

func (m *Device_LorawanDevice) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.LorawanDevice != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintHandler(dAtA, i, uint64(m.LorawanDevice.Size()))
		n11, err := m.LorawanDevice.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n11
	}
	return i, nil
}
func (m *DeviceList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeviceList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Devices) > 0 {
		for _, msg := range m.Devices {
			dAtA[i] = 0xa
			i++
			i = encodeVarintHandler(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *DryDownlinkMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DryDownlinkMessage) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Payload) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintHandler(dAtA, i, uint64(len(m.Payload)))
		i += copy(dAtA[i:], m.Payload)
	}
	if len(m.Fields) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintHandler(dAtA, i, uint64(len(m.Fields)))
		i += copy(dAtA[i:], m.Fields)
	}
	if m.App != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintHandler(dAtA, i, uint64(m.App.Size()))
		n12, err := m.App.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n12
	}
	if m.Port != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintHandler(dAtA, i, uint64(m.Port))
	}
	return i, nil
}

func (m *DryUplinkMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DryUplinkMessage) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Payload) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintHandler(dAtA, i, uint64(len(m.Payload)))
		i += copy(dAtA[i:], m.Payload)
	}
	if m.App != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintHandler(dAtA, i, uint64(m.App.Size()))
		n13, err := m.App.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n13
	}
	if m.Port != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintHandler(dAtA, i, uint64(m.Port))
	}
	return i, nil
}

func (m *SimulatedUplinkMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SimulatedUplinkMessage) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.AppID) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintHandler(dAtA, i, uint64(len(m.AppID)))
		i += copy(dAtA[i:], m.AppID)
	}
	if len(m.DevID) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintHandler(dAtA, i, uint64(len(m.DevID)))
		i += copy(dAtA[i:], m.DevID)
	}
	if len(m.Payload) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintHandler(dAtA, i, uint64(len(m.Payload)))
		i += copy(dAtA[i:], m.Payload)
	}
	if m.Port != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintHandler(dAtA, i, uint64(m.Port))
	}
	return i, nil
}

func (m *LogEntry) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LogEntry) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Function) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintHandler(dAtA, i, uint64(len(m.Function)))
		i += copy(dAtA[i:], m.Function)
	}
	if len(m.Fields) > 0 {
		for _, s := range m.Fields {
			dAtA[i] = 0x12
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	return i, nil
}

func (m *DryUplinkResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DryUplinkResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Payload) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintHandler(dAtA, i, uint64(len(m.Payload)))
		i += copy(dAtA[i:], m.Payload)
	}
	if len(m.Fields) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintHandler(dAtA, i, uint64(len(m.Fields)))
		i += copy(dAtA[i:], m.Fields)
	}
	if m.Valid {
		dAtA[i] = 0x18
		i++
		if m.Valid {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.Logs) > 0 {
		for _, msg := range m.Logs {
			dAtA[i] = 0x22
			i++
			i = encodeVarintHandler(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *DryDownlinkResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DryDownlinkResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Payload) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintHandler(dAtA, i, uint64(len(m.Payload)))
		i += copy(dAtA[i:], m.Payload)
	}
	if len(m.Logs) > 0 {
		for _, msg := range m.Logs {
			dAtA[i] = 0x12
			i++
			i = encodeVarintHandler(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func encodeFixed64Handler(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Handler(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintHandler(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *DeviceActivationResponse) Size() (n int) {
	var l int
	_ = l
	l = len(m.Payload)
	if l > 0 {
		n += 1 + l + sovHandler(uint64(l))
	}
	if m.Message != nil {
		l = m.Message.Size()
		n += 1 + l + sovHandler(uint64(l))
	}
	if m.DownlinkOption != nil {
		l = m.DownlinkOption.Size()
		n += 1 + l + sovHandler(uint64(l))
	}
	if m.ActivationMetadata != nil {
		l = m.ActivationMetadata.Size()
		n += 2 + l + sovHandler(uint64(l))
	}
	if m.Trace != nil {
		l = m.Trace.Size()
		n += 2 + l + sovHandler(uint64(l))
	}
	return n
}

func (m *StatusRequest) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *Status) Size() (n int) {
	var l int
	_ = l
	if m.System != nil {
		l = m.System.Size()
		n += 1 + l + sovHandler(uint64(l))
	}
	if m.Component != nil {
		l = m.Component.Size()
		n += 1 + l + sovHandler(uint64(l))
	}
	if m.Uplink != nil {
		l = m.Uplink.Size()
		n += 1 + l + sovHandler(uint64(l))
	}
	if m.Downlink != nil {
		l = m.Downlink.Size()
		n += 1 + l + sovHandler(uint64(l))
	}
	if m.Activations != nil {
		l = m.Activations.Size()
		n += 1 + l + sovHandler(uint64(l))
	}
	return n
}

func (m *ApplicationIdentifier) Size() (n int) {
	var l int
	_ = l
	l = len(m.AppID)
	if l > 0 {
		n += 1 + l + sovHandler(uint64(l))
	}
	return n
}

func (m *Application) Size() (n int) {
	var l int
	_ = l
	l = len(m.AppID)
	if l > 0 {
		n += 1 + l + sovHandler(uint64(l))
	}
	l = len(m.Decoder)
	if l > 0 {
		n += 1 + l + sovHandler(uint64(l))
	}
	l = len(m.Converter)
	if l > 0 {
		n += 1 + l + sovHandler(uint64(l))
	}
	l = len(m.Validator)
	if l > 0 {
		n += 1 + l + sovHandler(uint64(l))
	}
	l = len(m.Encoder)
	if l > 0 {
		n += 1 + l + sovHandler(uint64(l))
	}
	l = len(m.PayloadFormat)
	if l > 0 {
		n += 1 + l + sovHandler(uint64(l))
	}
	l = len(m.RegisterOnJoinAccessKey)
	if l > 0 {
		n += 1 + l + sovHandler(uint64(l))
	}
	return n
}

func (m *DeviceIdentifier) Size() (n int) {
	var l int
	_ = l
	l = len(m.AppID)
	if l > 0 {
		n += 1 + l + sovHandler(uint64(l))
	}
	l = len(m.DevID)
	if l > 0 {
		n += 1 + l + sovHandler(uint64(l))
	}
	return n
}

func (m *Device) Size() (n int) {
	var l int
	_ = l
	l = len(m.AppID)
	if l > 0 {
		n += 1 + l + sovHandler(uint64(l))
	}
	l = len(m.DevID)
	if l > 0 {
		n += 1 + l + sovHandler(uint64(l))
	}
	if m.Device != nil {
		n += m.Device.Size()
	}
	if m.Latitude != 0 {
		n += 5
	}
	if m.Longitude != 0 {
		n += 5
	}
	if m.Altitude != 0 {
		n += 1 + sovHandler(uint64(m.Altitude))
	}
	if len(m.Attributes) > 0 {
		for k, v := range m.Attributes {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovHandler(uint64(len(k))) + 1 + len(v) + sovHandler(uint64(len(v)))
			n += mapEntrySize + 1 + sovHandler(uint64(mapEntrySize))
		}
	}
	l = len(m.Description)
	if l > 0 {
		n += 2 + l + sovHandler(uint64(l))
	}
	return n
}

func (m *Device_LorawanDevice) Size() (n int) {
	var l int
	_ = l
	if m.LorawanDevice != nil {
		l = m.LorawanDevice.Size()
		n += 1 + l + sovHandler(uint64(l))
	}
	return n
}
func (m *DeviceList) Size() (n int) {
	var l int
	_ = l
	if len(m.Devices) > 0 {
		for _, e := range m.Devices {
			l = e.Size()
			n += 1 + l + sovHandler(uint64(l))
		}
	}
	return n
}

func (m *DryDownlinkMessage) Size() (n int) {
	var l int
	_ = l
	l = len(m.Payload)
	if l > 0 {
		n += 1 + l + sovHandler(uint64(l))
	}
	l = len(m.Fields)
	if l > 0 {
		n += 1 + l + sovHandler(uint64(l))
	}
	if m.App != nil {
		l = m.App.Size()
		n += 1 + l + sovHandler(uint64(l))
	}
	if m.Port != 0 {
		n += 1 + sovHandler(uint64(m.Port))
	}
	return n
}

func (m *DryUplinkMessage) Size() (n int) {
	var l int
	_ = l
	l = len(m.Payload)
	if l > 0 {
		n += 1 + l + sovHandler(uint64(l))
	}
	if m.App != nil {
		l = m.App.Size()
		n += 1 + l + sovHandler(uint64(l))
	}
	if m.Port != 0 {
		n += 1 + sovHandler(uint64(m.Port))
	}
	return n
}

func (m *SimulatedUplinkMessage) Size() (n int) {
	var l int
	_ = l
	l = len(m.AppID)
	if l > 0 {
		n += 1 + l + sovHandler(uint64(l))
	}
	l = len(m.DevID)
	if l > 0 {
		n += 1 + l + sovHandler(uint64(l))
	}
	l = len(m.Payload)
	if l > 0 {
		n += 1 + l + sovHandler(uint64(l))
	}
	if m.Port != 0 {
		n += 1 + sovHandler(uint64(m.Port))
	}
	return n
}

func (m *LogEntry) Size() (n int) {
	var l int
	_ = l
	l = len(m.Function)
	if l > 0 {
		n += 1 + l + sovHandler(uint64(l))
	}
	if len(m.Fields) > 0 {
		for _, s := range m.Fields {
			l = len(s)
			n += 1 + l + sovHandler(uint64(l))
		}
	}
	return n
}

func (m *DryUplinkResult) Size() (n int) {
	var l int
	_ = l
	l = len(m.Payload)
	if l > 0 {
		n += 1 + l + sovHandler(uint64(l))
	}
	l = len(m.Fields)
	if l > 0 {
		n += 1 + l + sovHandler(uint64(l))
	}
	if m.Valid {
		n += 2
	}
	if len(m.Logs) > 0 {
		for _, e := range m.Logs {
			l = e.Size()
			n += 1 + l + sovHandler(uint64(l))
		}
	}
	return n
}

func (m *DryDownlinkResult) Size() (n int) {
	var l int
	_ = l
	l = len(m.Payload)
	if l > 0 {
		n += 1 + l + sovHandler(uint64(l))
	}
	if len(m.Logs) > 0 {
		for _, e := range m.Logs {
			l = e.Size()
			n += 1 + l + sovHandler(uint64(l))
		}
	}
	return n
}

func sovHandler(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozHandler(x uint64) (n int) {
	return sovHandler(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *DeviceActivationResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHandler
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeviceActivationResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeviceActivationResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Payload", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHandler
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthHandler
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Payload = append(m.Payload[:0], dAtA[iNdEx:postIndex]...)
			if m.Payload == nil {
				m.Payload = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHandler
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHandler
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Message == nil {
				m.Message = &protocol.Message{}
			}
			if err := m.Message.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DownlinkOption", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHandler
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHandler
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DownlinkOption == nil {
				m.DownlinkOption = &broker.DownlinkOption{}
			}
			if err := m.DownlinkOption.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 23:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActivationMetadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHandler
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHandler
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ActivationMetadata == nil {
				m.ActivationMetadata = &protocol.ActivationMetadata{}
			}
			if err := m.ActivationMetadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 31:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Trace", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHandler
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHandler
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Trace == nil {
				m.Trace = &trace.Trace{}
			}
			if err := m.Trace.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipHandler(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHandler
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StatusRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHandler
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StatusRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StatusRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipHandler(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHandler
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Status) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHandler
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Status: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Status: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field System", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHandler
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHandler
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.System == nil {
				m.System = &api.SystemStats{}
			}
			if err := m.System.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Component", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHandler
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHandler
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Component == nil {
				m.Component = &api.ComponentStats{}
			}
			if err := m.Component.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uplink", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHandler
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHandler
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Uplink == nil {
				m.Uplink = &api.Rates{}
			}
			if err := m.Uplink.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Downlink", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHandler
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHandler
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Downlink == nil {
				m.Downlink = &api.Rates{}
			}
			if err := m.Downlink.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Activations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHandler
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHandler
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Activations == nil {
				m.Activations = &api.Rates{}
			}
			if err := m.Activations.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipHandler(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHandler
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ApplicationIdentifier) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHandler
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ApplicationIdentifier: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ApplicationIdentifier: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHandler
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHandler
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AppID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipHandler(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHandler
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Application) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHandler
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Application: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Application: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHandler
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHandler
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AppID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Decoder", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHandler
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHandler
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Decoder = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Converter", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHandler
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHandler
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Converter = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Validator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHandler
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHandler
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Validator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Encoder", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHandler
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHandler
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Encoder = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PayloadFormat", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHandler
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHandler
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PayloadFormat = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RegisterOnJoinAccessKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHandler
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHandler
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RegisterOnJoinAccessKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipHandler(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHandler
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeviceIdentifier) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHandler
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeviceIdentifier: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeviceIdentifier: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHandler
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHandler
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AppID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DevID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHandler
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHandler
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DevID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipHandler(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHandler
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Device) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHandler
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Device: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Device: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHandler
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHandler
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AppID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DevID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHandler
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHandler
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DevID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LorawanDevice", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHandler
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHandler
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &lorawan1.Device{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Device = &Device_LorawanDevice{v}
			iNdEx = postIndex
		case 10:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Latitude", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 4
			v = uint32(dAtA[iNdEx-4])
			v |= uint32(dAtA[iNdEx-3]) << 8
			v |= uint32(dAtA[iNdEx-2]) << 16
			v |= uint32(dAtA[iNdEx-1]) << 24
			m.Latitude = float32(math.Float32frombits(v))
		case 11:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Longitude", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 4
			v = uint32(dAtA[iNdEx-4])
			v |= uint32(dAtA[iNdEx-3]) << 8
			v |= uint32(dAtA[iNdEx-2]) << 16
			v |= uint32(dAtA[iNdEx-1]) << 24
			m.Longitude = float32(math.Float32frombits(v))
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Altitude", wireType)
			}
			m.Altitude = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHandler
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Altitude |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attributes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHandler
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHandler
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var keykey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHandler
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				keykey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			var stringLenmapkey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHandler
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLenmapkey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLenmapkey := int(stringLenmapkey)
			if intStringLenmapkey < 0 {
				return ErrInvalidLengthHandler
			}
			postStringIndexmapkey := iNdEx + intStringLenmapkey
			if postStringIndexmapkey > l {
				return io.ErrUnexpectedEOF
			}
			mapkey := string(dAtA[iNdEx:postStringIndexmapkey])
			iNdEx = postStringIndexmapkey
			if m.Attributes == nil {
				m.Attributes = make(map[string]string)
			}
			if iNdEx < postIndex {
				var valuekey uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowHandler
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					valuekey |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				var stringLenmapvalue uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowHandler
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLenmapvalue |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLenmapvalue := int(stringLenmapvalue)
				if intStringLenmapvalue < 0 {
					return ErrInvalidLengthHandler
				}
				postStringIndexmapvalue := iNdEx + intStringLenmapvalue
				if postStringIndexmapvalue > l {
					return io.ErrUnexpectedEOF
				}
				mapvalue := string(dAtA[iNdEx:postStringIndexmapvalue])
				iNdEx = postStringIndexmapvalue
				m.Attributes[mapkey] = mapvalue
			} else {
				var mapvalue string
				m.Attributes[mapkey] = mapvalue
			}
			iNdEx = postIndex
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHandler
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHandler
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipHandler(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHandler
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeviceList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHandler
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeviceList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeviceList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Devices", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHandler
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHandler
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Devices = append(m.Devices, &Device{})
			if err := m.Devices[len(m.Devices)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipHandler(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHandler
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DryDownlinkMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHandler
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DryDownlinkMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DryDownlinkMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Payload", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHandler
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthHandler
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Payload = append(m.Payload[:0], dAtA[iNdEx:postIndex]...)
			if m.Payload == nil {
				m.Payload = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fields", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHandler
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHandler
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Fields = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field App", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHandler
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHandler
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.App == nil {
				m.App = &Application{}
			}
			if err := m.App.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Port", wireType)
			}
			m.Port = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHandler
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Port |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipHandler(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHandler
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DryUplinkMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHandler
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DryUplinkMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DryUplinkMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Payload", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHandler
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthHandler
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Payload = append(m.Payload[:0], dAtA[iNdEx:postIndex]...)
			if m.Payload == nil {
				m.Payload = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field App", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHandler
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHandler
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.App == nil {
				m.App = &Application{}
			}
			if err := m.App.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Port", wireType)
			}
			m.Port = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHandler
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Port |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipHandler(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHandler
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SimulatedUplinkMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHandler
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SimulatedUplinkMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SimulatedUplinkMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHandler
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHandler
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AppID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DevID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHandler
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHandler
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DevID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Payload", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHandler
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthHandler
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Payload = append(m.Payload[:0], dAtA[iNdEx:postIndex]...)
			if m.Payload == nil {
				m.Payload = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Port", wireType)
			}
			m.Port = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHandler
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Port |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipHandler(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHandler
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LogEntry) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHandler
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LogEntry: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LogEntry: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Function", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHandler
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHandler
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Function = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fields", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHandler
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHandler
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Fields = append(m.Fields, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipHandler(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHandler
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DryUplinkResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHandler
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DryUplinkResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DryUplinkResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Payload", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHandler
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthHandler
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Payload = append(m.Payload[:0], dAtA[iNdEx:postIndex]...)
			if m.Payload == nil {
				m.Payload = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fields", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHandler
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHandler
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Fields = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Valid", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHandler
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Valid = bool(v != 0)
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Logs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHandler
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHandler
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Logs = append(m.Logs, &LogEntry{})
			if err := m.Logs[len(m.Logs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipHandler(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHandler
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DryDownlinkResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHandler
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DryDownlinkResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DryDownlinkResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Payload", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHandler
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthHandler
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Payload = append(m.Payload[:0], dAtA[iNdEx:postIndex]...)
			if m.Payload == nil {
				m.Payload = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Logs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHandler
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHandler
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Logs = append(m.Logs, &LogEntry{})
			if err := m.Logs[len(m.Logs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipHandler(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHandler
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipHandler(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowHandler
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowHandler
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowHandler
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthHandler
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowHandler
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipHandler(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthHandler = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowHandler   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("github.com/TheThingsNetwork/api/handler/handler.proto", fileDescriptorHandler)
}

var fileDescriptorHandler = []byte{
	// 1439 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x57, 0x5f, 0x6f, 0x1b, 0x45,
	0x10, 0xe7, 0xec, 0xc4, 0xb1, 0xc7, 0x89, 0x93, 0x6c, 0x4a, 0x7a, 0x38, 0x51, 0x6a, 0xae, 0x6a,
	0x9b, 0xa6, 0xe5, 0xac, 0xba, 0xa0, 0x96, 0x8a, 0xb6, 0x24, 0x75, 0xd3, 0x06, 0x1a, 0x5a, 0x5d,
	0x02, 0x0f, 0x7d, 0xc0, 0xda, 0xf8, 0x36, 0xe7, 0x23, 0xe7, 0xdb, 0xe3, 0x6e, 0xed, 0xc8, 0xaa,
	0x8a, 0x50, 0x85, 0x10, 0xe2, 0x15, 0xf1, 0x0d, 0x78, 0x82, 0xcf, 0x81, 0xc4, 0x23, 0x12, 0xef,
	0x80, 0x02, 0x1f, 0x04, 0xdd, 0xee, 0xde, 0x9f, 0xf8, 0x4f, 0x9c, 0xa0, 0xbe, 0x24, 0x9e, 0x99,
	0xdf, 0xfc, 0x66, 0x76, 0x76, 0x76, 0x76, 0x0f, 0xde, 0xb3, 0x6c, 0xd6, 0xea, 0xec, 0xe9, 0x4d,
	0xda, 0xae, 0xee, 0xb6, 0xc8, 0x6e, 0xcb, 0x76, 0xad, 0xe0, 0x13, 0xc2, 0x0e, 0xa9, 0x7f, 0x50,
	0xc5, 0x9e, 0x5d, 0x6d, 0x61, 0xd7, 0x74, 0x88, 0x1f, 0xfd, 0xd7, 0x3d, 0x9f, 0x32, 0x8a, 0xa6,
	0xa4, 0x58, 0x5e, 0xb2, 0x28, 0xb5, 0x1c, 0x52, 0xe5, 0xea, 0xbd, 0xce, 0x7e, 0x95, 0xb4, 0x3d,
	0xd6, 0x13, 0xa8, 0xf2, 0xb2, 0x34, 0x86, 0x3c, 0xd8, 0x75, 0x29, 0xc3, 0xcc, 0xa6, 0x6e, 0x20,
	0xad, 0xef, 0xa4, 0x42, 0x5b, 0xd4, 0xa2, 0x09, 0x47, 0x28, 0x71, 0x81, 0xff, 0x92, 0xf0, 0xab,
	0xe3, 0x32, 0xc5, 0x9e, 0x2d, 0xa1, 0x37, 0xc7, 0x41, 0xf7, 0x7c, 0x7a, 0x40, 0x7c, 0xf9, 0x4f,
	0x3a, 0xdd, 0x1a, 0xe7, 0xc4, 0x61, 0x4d, 0xea, 0xc4, 0x3f, 0xa4, 0xe3, 0xdd, 0x53, 0x3b, 0x3a,
	0xd4, 0xc7, 0x87, 0xd8, 0xad, 0x9a, 0xa4, 0x6b, 0x37, 0x89, 0x74, 0xbf, 0x31, 0xce, 0x9d, 0xf9,
	0xb8, 0x49, 0xc4, 0x5f, 0xe1, 0xa2, 0xfd, 0x98, 0x01, 0xb5, 0xce, 0x39, 0xd6, 0x9b, 0xcc, 0xee,
	0xf2, 0xaa, 0x1a, 0x24, 0xf0, 0xa8, 0x1b, 0x10, 0xa4, 0xc2, 0x94, 0x87, 0x7b, 0x0e, 0xc5, 0xa6,
	0xaa, 0x54, 0x94, 0xd5, 0x69, 0x23, 0x12, 0xd1, 0x35, 0x98, 0x6a, 0x93, 0x20, 0xc0, 0x16, 0x51,
	0x33, 0x15, 0x65, 0xb5, 0x58, 0x9b, 0xd7, 0xe3, 0xa5, 0x6c, 0x0b, 0x83, 0x11, 0x21, 0xd0, 0x7d,
	0x98, 0x35, 0xe9, 0xa1, 0xeb, 0xd8, 0xee, 0x41, 0x83, 0x7a, 0x61, 0x04, 0xb5, 0xc8, 0x9d, 0x16,
	0x75, 0x59, 0xb6, 0xba, 0x34, 0x3f, 0xe5, 0x56, 0xa3, 0x64, 0x1e, 0x93, 0xd1, 0x36, 0x2c, 0xe0,
	0x38, 0xbb, 0x46, 0x9b, 0x30, 0x6c, 0x62, 0x86, 0xd5, 0xf3, 0x9c, 0x64, 0x39, 0x89, 0x9c, 0x2c,
	0x61, 0x5b, 0x62, 0x0c, 0x84, 0x07, 0x74, 0x48, 0x83, 0x49, 0x5e, 0x02, 0xf5, 0x02, 0x27, 0x98,
	0xd6, 0x45, 0x41, 0x76, 0xc3, 0xbf, 0x86, 0x30, 0x69, 0xb3, 0x30, 0xb3, 0xc3, 0x30, 0xeb, 0x04,
	0x06, 0xf9, 0xb2, 0x43, 0x02, 0xa6, 0xfd, 0xa5, 0x40, 0x4e, 0x68, 0xd0, 0x2a, 0xe4, 0x82, 0x5e,
	0xc0, 0x48, 0x9b, 0x57, 0xa5, 0x58, 0x9b, 0xd3, 0xc3, 0x7e, 0xd9, 0xe1, 0xaa, 0x10, 0x12, 0x18,
	0xd2, 0x8e, 0x6e, 0x40, 0xa1, 0x49, 0xdb, 0x1e, 0x75, 0x89, 0xcb, 0x64, 0xa1, 0x16, 0x38, 0xf8,
	0x41, 0xa4, 0x15, 0xf8, 0x04, 0x85, 0x34, 0xc8, 0x75, 0xbc, 0x70, 0xed, 0xb2, 0x46, 0xc0, 0xf1,
	0x06, 0x66, 0x24, 0x30, 0xa4, 0x05, 0x5d, 0x86, 0x7c, 0x54, 0x21, 0x75, 0x7a, 0x00, 0x15, 0xdb,
	0xd0, 0x75, 0x28, 0x26, 0xcb, 0x0f, 0xd4, 0x99, 0x01, 0x68, 0xda, 0xac, 0xbd, 0x0f, 0x6f, 0xae,
	0x7b, 0x9e, 0x63, 0x37, 0xb9, 0xbc, 0x65, 0x12, 0x97, 0xd9, 0xfb, 0x36, 0xf1, 0x51, 0x05, 0x72,
	0xd8, 0xf3, 0x1a, 0xb6, 0xe8, 0x82, 0xc2, 0x46, 0xe1, 0xe8, 0xcf, 0x0b, 0x93, 0xeb, 0x9e, 0xb7,
	0x55, 0x37, 0x26, 0xb1, 0xe7, 0x6d, 0x99, 0xda, 0x37, 0x19, 0x28, 0xa6, 0x7c, 0xc7, 0x7b, 0x84,
	0xad, 0x65, 0x92, 0x26, 0x35, 0x89, 0xcf, 0xeb, 0x52, 0x30, 0x22, 0x11, 0x2d, 0x87, 0x35, 0x73,
	0xbb, 0xc4, 0x67, 0xc4, 0x57, 0xb3, 0xdc, 0x96, 0x28, 0x42, 0x6b, 0x17, 0x3b, 0xb6, 0x89, 0x19,
	0xf5, 0xd5, 0x09, 0x61, 0x8d, 0x15, 0x21, 0x2b, 0x71, 0x05, 0xeb, 0xa4, 0x60, 0x95, 0x22, 0xba,
	0x04, 0x25, 0xd9, 0xbb, 0x8d, 0x7d, 0xea, 0xb7, 0x31, 0x53, 0x73, 0x1c, 0x30, 0x23, 0xb5, 0x9b,
	0x5c, 0x89, 0x3e, 0x80, 0x25, 0x9f, 0x58, 0x76, 0xc0, 0x88, 0xdf, 0xa0, 0x6e, 0xe3, 0x0b, 0x6a,
	0xbb, 0x0d, 0xdc, 0x6c, 0x92, 0x20, 0x68, 0x1c, 0x90, 0x9e, 0x3a, 0xc5, 0x7d, 0xce, 0x47, 0x90,
	0xa7, 0xee, 0x47, 0xd4, 0x76, 0xd7, 0xb9, 0xfd, 0x63, 0xd2, 0xd3, 0x3e, 0x83, 0x39, 0x71, 0x96,
	0xce, 0x52, 0xbc, 0x10, 0x61, 0x92, 0x6e, 0x88, 0xc8, 0x24, 0x88, 0x3a, 0xe9, 0x86, 0x08, 0x93,
	0x74, 0xb7, 0x4c, 0xed, 0xbb, 0x2c, 0xe4, 0x04, 0xf1, 0xeb, 0xa0, 0x43, 0xb7, 0xa1, 0x24, 0xc7,
	0x47, 0x43, 0x8c, 0x0f, 0x5e, 0xe6, 0x62, 0x6d, 0x56, 0x97, 0x6a, 0x5d, 0x04, 0x7b, 0xfc, 0x86,
	0x31, 0x23, 0x35, 0x32, 0x7a, 0x19, 0xf2, 0x0e, 0x66, 0x36, 0xeb, 0x98, 0x44, 0x85, 0x8a, 0xb2,
	0x9a, 0x31, 0x62, 0x39, 0xdc, 0x19, 0x87, 0xba, 0x96, 0x30, 0x16, 0xb9, 0x31, 0x51, 0x84, 0x9e,
	0xd8, 0x91, 0x9e, 0x61, 0xcb, 0x4e, 0x1a, 0xb1, 0x8c, 0xee, 0x03, 0x60, 0xc6, 0x7c, 0x7b, 0xaf,
	0xc3, 0x48, 0xd8, 0xa5, 0xd9, 0xd5, 0x62, 0xed, 0x82, 0x1e, 0xdd, 0x12, 0x22, 0xb4, 0xbe, 0x1e,
	0x23, 0x1e, 0xba, 0xcc, 0xef, 0x19, 0x29, 0x17, 0x54, 0x81, 0xa2, 0x49, 0x82, 0xa6, 0x6f, 0x8b,
	0xe1, 0x72, 0x8e, 0xef, 0x52, 0x5a, 0x55, 0xbe, 0x0b, 0xb3, 0x7d, 0x04, 0x68, 0x0e, 0xb2, 0xe1,
	0x96, 0xf2, 0x32, 0x1a, 0xe1, 0x4f, 0x74, 0x0e, 0x26, 0xbb, 0xd8, 0xe9, 0x10, 0xd9, 0x91, 0x42,
	0xb8, 0x93, 0xb9, 0xad, 0x6c, 0xe4, 0x79, 0x4d, 0xed, 0x26, 0xd1, 0x6e, 0x01, 0x88, 0x84, 0x9e,
	0xd8, 0x01, 0x43, 0x57, 0xc3, 0x2e, 0x0e, 0xa5, 0x40, 0x55, 0x78, 0xda, 0xb3, 0x7d, 0x69, 0x1b,
	0x91, 0x5d, 0x7b, 0xa5, 0x00, 0xaa, 0xfb, 0xbd, 0x68, 0xd2, 0xc9, 0x21, 0x79, 0xc2, 0x88, 0x5d,
	0x84, 0xdc, 0xbe, 0x4d, 0x1c, 0x33, 0x90, 0xe9, 0x48, 0x09, 0x5d, 0x86, 0x2c, 0xf6, 0x3c, 0xb9,
	0x65, 0xe7, 0xe2, 0x78, 0xa9, 0xe3, 0x67, 0x84, 0x00, 0x84, 0x60, 0xc2, 0xa3, 0x3e, 0xe3, 0x87,
	0x64, 0xc6, 0xe0, 0xbf, 0xb5, 0x16, 0xcc, 0xd5, 0xfd, 0xde, 0xa7, 0xde, 0xe9, 0x32, 0x90, 0x91,
	0x32, 0xa7, 0x8d, 0x94, 0x4d, 0x45, 0xfa, 0x5e, 0x81, 0xc5, 0x1d, 0xbb, 0xdd, 0x71, 0x30, 0x23,
	0xe6, 0xf1, 0x80, 0xaf, 0xa3, 0x85, 0x53, 0x49, 0x67, 0x8f, 0x27, 0x3d, 0x6c, 0xd9, 0xf7, 0x20,
	0xff, 0x84, 0x5a, 0x62, 0xdb, 0xcb, 0x90, 0xdf, 0xef, 0xb8, 0x4d, 0xde, 0x28, 0x62, 0xef, 0x63,
	0xf9, 0x58, 0xc9, 0xb3, 0x49, 0xc9, 0xb5, 0xaf, 0x15, 0x98, 0x8d, 0xeb, 0x66, 0x90, 0xa0, 0xe3,
	0xb0, 0xff, 0xb1, 0x71, 0xa2, 0xbd, 0x6c, 0x91, 0x71, 0xde, 0x10, 0x02, 0xba, 0x04, 0x13, 0x0e,
	0xb5, 0x02, 0x75, 0x82, 0xf7, 0xcf, 0x7c, 0x5c, 0xe5, 0x28, 0x61, 0x83, 0x9b, 0xb5, 0x5d, 0x98,
	0x4f, 0x75, 0xcf, 0xd8, 0x1c, 0x22, 0xd6, 0xcc, 0x89, 0xac, 0xb5, 0x5f, 0x15, 0x98, 0x7a, 0x2c,
	0x4c, 0xe8, 0x73, 0x58, 0x48, 0xee, 0xcf, 0x07, 0x2d, 0xec, 0x38, 0xc4, 0xb5, 0x08, 0xd2, 0xa2,
	0x3b, 0x7a, 0x88, 0x51, 0xde, 0x8d, 0xe5, 0x8b, 0x27, 0x62, 0xe4, 0x63, 0xe2, 0x39, 0xe4, 0xa5,
	0x99, 0xa0, 0x6b, 0xf1, 0xc5, 0x4f, 0xcc, 0x8e, 0xe8, 0x26, 0x62, 0x0e, 0x3e, 0x43, 0x04, 0xfb,
	0xdb, 0x7d, 0x67, 0x6a, 0xf0, 0xa1, 0x52, 0xfb, 0xa7, 0x00, 0x28, 0xd5, 0x96, 0xdb, 0xd8, 0xc5,
	0x16, 0xf1, 0x91, 0x05, 0x0b, 0x86, 0x1c, 0xd5, 0xe9, 0xdb, 0x69, 0x65, 0x58, 0x2b, 0x27, 0x23,
	0xbb, 0xbc, 0xa8, 0x8b, 0xc7, 0xa6, 0x1e, 0xbd, 0x22, 0xf5, 0x87, 0xe1, 0x4b, 0x54, 0x53, 0x5f,
	0xfd, 0xf1, 0xef, 0x0f, 0x19, 0xa4, 0xcd, 0x54, 0x71, 0xe2, 0x17, 0xdc, 0x51, 0xd6, 0xd0, 0x3e,
	0x94, 0x1e, 0x11, 0x76, 0x96, 0x18, 0x43, 0x8f, 0x93, 0xb6, 0xc2, 0x23, 0xa8, 0x68, 0xf1, 0x58,
	0x84, 0xea, 0x0b, 0x71, 0x5e, 0x5e, 0xa2, 0xaf, 0xa0, 0xb4, 0x73, 0x3c, 0xce, 0x50, 0x9e, 0x91,
	0x2b, 0xb8, 0xc7, 0xf9, 0x6f, 0x6b, 0x23, 0xf8, 0xef, 0x28, 0x6b, 0xcf, 0x97, 0xca, 0xa3, 0x8d,
	0xe8, 0x00, 0xe6, 0xeb, 0xc4, 0x21, 0x8c, 0xbc, 0x8e, 0x72, 0xca, 0xc5, 0xae, 0x8d, 0x5a, 0x6c,
	0x0b, 0x0a, 0x8f, 0x08, 0x93, 0x37, 0xcf, 0x5b, 0x7d, 0x4d, 0x90, 0xe2, 0xef, 0x9f, 0xb9, 0x5a,
	0x95, 0x13, 0x5f, 0x45, 0x57, 0x86, 0x13, 0xcb, 0x37, 0x73, 0x50, 0x7d, 0x21, 0x86, 0xcc, 0x4b,
	0x74, 0xa4, 0x40, 0x61, 0x27, 0x0e, 0xd5, 0xcf, 0x37, 0x72, 0x01, 0xbf, 0x28, 0x3c, 0xd0, 0x4f,
	0x8a, 0x76, 0xda, 0x48, 0x61, 0x81, 0xaf, 0x97, 0xcf, 0x82, 0xbe, 0xa8, 0xad, 0x9c, 0x8c, 0xe6,
	0xa0, 0xf2, 0x78, 0x10, 0xf2, 0x61, 0x5a, 0xec, 0xdd, 0xf8, 0x8a, 0x8e, 0x5a, 0xb0, 0x2c, 0xec,
	0xda, 0xa9, 0x0b, 0x7b, 0x08, 0x6a, 0xbc, 0x85, 0xc1, 0x26, 0x3d, 0xd3, 0x29, 0x5c, 0xe8, 0xcb,
	0x2f, 0xbc, 0x70, 0xb5, 0xcb, 0x3c, 0x83, 0x0a, 0x1a, 0xb3, 0x5e, 0xb4, 0x09, 0xc5, 0xd4, 0xb8,
	0x44, 0x4b, 0x09, 0xd7, 0xc0, 0x15, 0x5c, 0x2e, 0x0f, 0x33, 0xca, 0x09, 0xfb, 0x21, 0x14, 0xe2,
	0xc1, 0x9f, 0xae, 0x58, 0xdf, 0x25, 0x5a, 0x56, 0x07, 0x4d, 0x92, 0x61, 0x0b, 0x4a, 0xd1, 0x3d,
	0x28, 0x69, 0x92, 0xa7, 0xcd, 0xf0, 0x0b, 0x72, 0x54, 0xf9, 0x6b, 0x9b, 0x50, 0x92, 0xc3, 0x3a,
	0x1a, 0x70, 0xef, 0xf2, 0x23, 0x22, 0x3f, 0x4b, 0x16, 0x13, 0xde, 0xf4, 0x97, 0x4b, 0xea, 0x7c,
	0x08, 0xfd, 0xc6, 0xb7, 0xca, 0x6f, 0x47, 0x2b, 0xca, 0xef, 0x47, 0x2b, 0xca, 0xdf, 0x47, 0x2b,
	0x0a, 0x54, 0xa8, 0x6f, 0xe9, 0xac, 0x45, 0x18, 0xff, 0x5c, 0x74, 0xc5, 0xe7, 0x22, 0xff, 0x48,
	0x90, 0x7e, 0x1b, 0xd3, 0x32, 0xec, 0xb3, 0x30, 0x9f, 0x67, 0xca, 0xf3, 0x2b, 0xa7, 0xfc, 0xd2,
	0xff, 0x39, 0xb3, 0xdc, 0x6f, 0xd6, 0xd7, 0x9f, 0x6d, 0xe9, 0x92, 0x6e, 0x2f, 0xc7, 0x17, 0x78,
	0xf3, 0xbf, 0x00, 0x00, 0x00, 0xff, 0xff, 0xa3, 0x6b, 0x09, 0x92, 0x3a, 0x10, 0x00, 0x00,
}
