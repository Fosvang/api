// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: github.com/TheThingsNetwork/api/discovery/discovery.proto

/*
	Package discovery is a generated protocol buffer package.

	It is generated from these files:
		github.com/TheThingsNetwork/api/discovery/discovery.proto

	It has these top-level messages:
		Metadata
		Announcement
		GetServiceRequest
		GetRequest
		MetadataRequest
		AnnouncementsResponse
		GetByAppIDRequest
		GetByAppEUIRequest
*/
package discovery

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/gogo/protobuf/types"
import _ "google.golang.org/genproto/googleapis/api/annotations"
import _ "github.com/gogo/protobuf/gogoproto"

import github_com_TheThingsNetwork_ttn_core_types "github.com/TheThingsNetwork/ttn/core/types"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import strings "strings"
import reflect "reflect"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type Metadata struct {
	// Types that are valid to be assigned to Metadata:
	//	*Metadata_DevAddrPrefix
	//	*Metadata_AppID
	//	*Metadata_AppEUI
	Metadata isMetadata_Metadata `protobuf_oneof:"metadata"`
}

func (m *Metadata) Reset()                    { *m = Metadata{} }
func (*Metadata) ProtoMessage()               {}
func (*Metadata) Descriptor() ([]byte, []int) { return fileDescriptorDiscovery, []int{0} }

type isMetadata_Metadata interface {
	isMetadata_Metadata()
	MarshalTo([]byte) (int, error)
	Size() int
}

type Metadata_DevAddrPrefix struct {
	DevAddrPrefix []byte `protobuf:"bytes,20,opt,name=dev_addr_prefix,json=devAddrPrefix,proto3,oneof"`
}
type Metadata_AppID struct {
	AppID string `protobuf:"bytes,30,opt,name=app_id,json=appId,proto3,oneof"`
}
type Metadata_AppEUI struct {
	AppEUI []byte `protobuf:"bytes,31,opt,name=app_eui,json=appEui,proto3,oneof"`
}

func (*Metadata_DevAddrPrefix) isMetadata_Metadata() {}
func (*Metadata_AppID) isMetadata_Metadata()         {}
func (*Metadata_AppEUI) isMetadata_Metadata()        {}

func (m *Metadata) GetMetadata() isMetadata_Metadata {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *Metadata) GetDevAddrPrefix() []byte {
	if x, ok := m.GetMetadata().(*Metadata_DevAddrPrefix); ok {
		return x.DevAddrPrefix
	}
	return nil
}

func (m *Metadata) GetAppID() string {
	if x, ok := m.GetMetadata().(*Metadata_AppID); ok {
		return x.AppID
	}
	return ""
}

func (m *Metadata) GetAppEUI() []byte {
	if x, ok := m.GetMetadata().(*Metadata_AppEUI); ok {
		return x.AppEUI
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Metadata) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _Metadata_OneofMarshaler, _Metadata_OneofUnmarshaler, _Metadata_OneofSizer, []interface{}{
		(*Metadata_DevAddrPrefix)(nil),
		(*Metadata_AppID)(nil),
		(*Metadata_AppEUI)(nil),
	}
}

func _Metadata_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Metadata)
	// metadata
	switch x := m.Metadata.(type) {
	case *Metadata_DevAddrPrefix:
		_ = b.EncodeVarint(20<<3 | proto.WireBytes)
		_ = b.EncodeRawBytes(x.DevAddrPrefix)
	case *Metadata_AppID:
		_ = b.EncodeVarint(30<<3 | proto.WireBytes)
		_ = b.EncodeStringBytes(x.AppID)
	case *Metadata_AppEUI:
		_ = b.EncodeVarint(31<<3 | proto.WireBytes)
		_ = b.EncodeRawBytes(x.AppEUI)
	case nil:
	default:
		return fmt.Errorf("Metadata.Metadata has unexpected type %T", x)
	}
	return nil
}

func _Metadata_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Metadata)
	switch tag {
	case 20: // metadata.dev_addr_prefix
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeRawBytes(true)
		m.Metadata = &Metadata_DevAddrPrefix{x}
		return true, err
	case 30: // metadata.app_id
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.Metadata = &Metadata_AppID{x}
		return true, err
	case 31: // metadata.app_eui
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeRawBytes(true)
		m.Metadata = &Metadata_AppEUI{x}
		return true, err
	default:
		return false, nil
	}
}

func _Metadata_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*Metadata)
	// metadata
	switch x := m.Metadata.(type) {
	case *Metadata_DevAddrPrefix:
		n += proto.SizeVarint(20<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.DevAddrPrefix)))
		n += len(x.DevAddrPrefix)
	case *Metadata_AppID:
		n += proto.SizeVarint(30<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.AppID)))
		n += len(x.AppID)
	case *Metadata_AppEUI:
		n += proto.SizeVarint(31<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.AppEUI)))
		n += len(x.AppEUI)
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// The Announcement of a service (also called component)
type Announcement struct {
	// The ID of the component
	ID string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// The name of the component (router/broker/handler)
	ServiceName string `protobuf:"bytes,2,opt,name=service_name,json=serviceName,proto3" json:"service_name,omitempty"`
	// Service version in the form "[version]-[commit] ([build date])"
	ServiceVersion string `protobuf:"bytes,3,opt,name=service_version,json=serviceVersion,proto3" json:"service_version,omitempty"`
	// Description of the component
	Description string `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	// URL with documentation or more information about this component
	Url string `protobuf:"bytes,5,opt,name=url,proto3" json:"url,omitempty"`
	// Indicates whether this service is part of The Things Network (the public community network)
	Public bool `protobuf:"varint,6,opt,name=public,proto3" json:"public,omitempty"`
	// Comma-separated network addresses in the form "domain1:port,domain2:port,domain3:port" (currently we only use the first)
	NetAddress string `protobuf:"bytes,11,opt,name=net_address,json=netAddress,proto3" json:"net_address,omitempty"`
	// ECDSA public key of this component
	PublicKey string `protobuf:"bytes,12,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty"`
	// TLS Certificate for gRPC on net_address (if TLS is enabled)
	Certificate string `protobuf:"bytes,13,opt,name=certificate,proto3" json:"certificate,omitempty"`
	// Contains the address where the HTTP API is exposed (if there is one).
	// Format of api_address: `http(s)://domain(:port)`
	// default http port is 80, default https port is 443.
	ApiAddress string `protobuf:"bytes,14,opt,name=api_address,json=apiAddress,proto3" json:"api_address,omitempty"`
	// Contains the address where the MQTT API is exposed (if there is one)
	// Format of mqtt_address: `(mqtt(s)://)host(:port)`
	// default mqtt port is 1883, default mqtts port is 8883.
	// Examples:
	// if `host:port` then `mqtt://host:port`
	// if `host:8883` then `mqtts://host:8883`
	// if `host` then `mqtt://host:1883` and `mqtts://host:8883`
	// if `mqtt://host` then `mqtt://host:1883`
	// if `mqtts://host` then `mqtt://host:1883` and `mqtts://host:8883`
	MqttAddress string `protobuf:"bytes,15,opt,name=mqtt_address,json=mqttAddress,proto3" json:"mqtt_address,omitempty"`
	// Contains the address where the AMQP API is exposed (if there is one)
	// Format of amqp_address: `(amqp(s)://)host(:port)`
	// default amqp port is 5672, default amqps port is 5671.
	// Examples:
	// if `host:port` then `amqp://host:port`
	// if `host:5671` then `amqps://host:5671`
	// if `host` then `amqp://host:5672` and `amqps://host:5671`
	// if `amqp://host` then `amqp://host:5672`
	// if `amqps://host` then `amqp://host:5672` and `amqps://host:5671`
	AmqpAddress string `protobuf:"bytes,16,opt,name=amqp_address,json=amqpAddress,proto3" json:"amqp_address,omitempty"`
	// Metadata for this component
	Metadata []*Metadata `protobuf:"bytes,22,rep,name=metadata" json:"metadata,omitempty"`
}

func (m *Announcement) Reset()                    { *m = Announcement{} }
func (*Announcement) ProtoMessage()               {}
func (*Announcement) Descriptor() ([]byte, []int) { return fileDescriptorDiscovery, []int{1} }

func (m *Announcement) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

func (m *Announcement) GetServiceName() string {
	if m != nil {
		return m.ServiceName
	}
	return ""
}

func (m *Announcement) GetServiceVersion() string {
	if m != nil {
		return m.ServiceVersion
	}
	return ""
}

func (m *Announcement) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Announcement) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *Announcement) GetPublic() bool {
	if m != nil {
		return m.Public
	}
	return false
}

func (m *Announcement) GetNetAddress() string {
	if m != nil {
		return m.NetAddress
	}
	return ""
}

func (m *Announcement) GetPublicKey() string {
	if m != nil {
		return m.PublicKey
	}
	return ""
}

func (m *Announcement) GetCertificate() string {
	if m != nil {
		return m.Certificate
	}
	return ""
}

func (m *Announcement) GetApiAddress() string {
	if m != nil {
		return m.ApiAddress
	}
	return ""
}

func (m *Announcement) GetMqttAddress() string {
	if m != nil {
		return m.MqttAddress
	}
	return ""
}

func (m *Announcement) GetAmqpAddress() string {
	if m != nil {
		return m.AmqpAddress
	}
	return ""
}

func (m *Announcement) GetMetadata() []*Metadata {
	if m != nil {
		return m.Metadata
	}
	return nil
}

type GetServiceRequest struct {
	// The name of the service (router/broker/handler)
	ServiceName string `protobuf:"bytes,1,opt,name=service_name,json=serviceName,proto3" json:"service_name,omitempty"`
}

func (m *GetServiceRequest) Reset()                    { *m = GetServiceRequest{} }
func (*GetServiceRequest) ProtoMessage()               {}
func (*GetServiceRequest) Descriptor() ([]byte, []int) { return fileDescriptorDiscovery, []int{2} }

func (m *GetServiceRequest) GetServiceName() string {
	if m != nil {
		return m.ServiceName
	}
	return ""
}

// The identifier of the service that should be returned
type GetRequest struct {
	// The ID of the service
	ID string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// The name of the service (router/broker/handler)
	ServiceName string `protobuf:"bytes,2,opt,name=service_name,json=serviceName,proto3" json:"service_name,omitempty"`
}

func (m *GetRequest) Reset()                    { *m = GetRequest{} }
func (*GetRequest) ProtoMessage()               {}
func (*GetRequest) Descriptor() ([]byte, []int) { return fileDescriptorDiscovery, []int{3} }

func (m *GetRequest) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

func (m *GetRequest) GetServiceName() string {
	if m != nil {
		return m.ServiceName
	}
	return ""
}

// The metadata to add or remove from an announement
type MetadataRequest struct {
	// The ID of the service that should be modified
	ID string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// The name of the service (router/broker/handler) that should be modified
	ServiceName string `protobuf:"bytes,2,opt,name=service_name,json=serviceName,proto3" json:"service_name,omitempty"`
	// Metadata to add or remove
	Metadata Metadata `protobuf:"bytes,12,opt,name=metadata" json:"metadata"`
}

func (m *MetadataRequest) Reset()                    { *m = MetadataRequest{} }
func (*MetadataRequest) ProtoMessage()               {}
func (*MetadataRequest) Descriptor() ([]byte, []int) { return fileDescriptorDiscovery, []int{4} }

func (m *MetadataRequest) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

func (m *MetadataRequest) GetServiceName() string {
	if m != nil {
		return m.ServiceName
	}
	return ""
}

func (m *MetadataRequest) GetMetadata() Metadata {
	if m != nil {
		return m.Metadata
	}
	return Metadata{}
}

// A list of announcements
type AnnouncementsResponse struct {
	Services []*Announcement `protobuf:"bytes,1,rep,name=services" json:"services,omitempty"`
}

func (m *AnnouncementsResponse) Reset()                    { *m = AnnouncementsResponse{} }
func (*AnnouncementsResponse) ProtoMessage()               {}
func (*AnnouncementsResponse) Descriptor() ([]byte, []int) { return fileDescriptorDiscovery, []int{5} }

func (m *AnnouncementsResponse) GetServices() []*Announcement {
	if m != nil {
		return m.Services
	}
	return nil
}

type GetByAppIDRequest struct {
	AppID string `protobuf:"bytes,30,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
}

func (m *GetByAppIDRequest) Reset()                    { *m = GetByAppIDRequest{} }
func (*GetByAppIDRequest) ProtoMessage()               {}
func (*GetByAppIDRequest) Descriptor() ([]byte, []int) { return fileDescriptorDiscovery, []int{6} }

func (m *GetByAppIDRequest) GetAppID() string {
	if m != nil {
		return m.AppID
	}
	return ""
}

type GetByAppEUIRequest struct {
	AppEUI github_com_TheThingsNetwork_ttn_core_types.AppEUI `protobuf:"bytes,31,opt,name=app_eui,json=appEui,proto3,customtype=github.com/TheThingsNetwork/ttn/core/types.AppEUI" json:"app_eui"`
}

func (m *GetByAppEUIRequest) Reset()                    { *m = GetByAppEUIRequest{} }
func (*GetByAppEUIRequest) ProtoMessage()               {}
func (*GetByAppEUIRequest) Descriptor() ([]byte, []int) { return fileDescriptorDiscovery, []int{7} }

func init() {
	proto.RegisterType((*Metadata)(nil), "discovery.Metadata")
	proto.RegisterType((*Announcement)(nil), "discovery.Announcement")
	proto.RegisterType((*GetServiceRequest)(nil), "discovery.GetServiceRequest")
	proto.RegisterType((*GetRequest)(nil), "discovery.GetRequest")
	proto.RegisterType((*MetadataRequest)(nil), "discovery.MetadataRequest")
	proto.RegisterType((*AnnouncementsResponse)(nil), "discovery.AnnouncementsResponse")
	proto.RegisterType((*GetByAppIDRequest)(nil), "discovery.GetByAppIDRequest")
	proto.RegisterType((*GetByAppEUIRequest)(nil), "discovery.GetByAppEUIRequest")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Discovery service

type DiscoveryClient interface {
	// Announce a component to the Discovery server.
	// A call to `Announce` does not processes the `metadata` field, so you can safely leave this field empty.
	// Adding or removing Metadata should be done with the `AddMetadata` and `DeleteMetadata` methods.
	Announce(ctx context.Context, in *Announcement, opts ...grpc.CallOption) (*google_protobuf.Empty, error)
	// Get all announcements for a specific service type
	GetAll(ctx context.Context, in *GetServiceRequest, opts ...grpc.CallOption) (*AnnouncementsResponse, error)
	// Get a specific announcement
	Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*Announcement, error)
	// Add metadata to an announement
	AddMetadata(ctx context.Context, in *MetadataRequest, opts ...grpc.CallOption) (*google_protobuf.Empty, error)
	// Delete metadata from an announcement
	DeleteMetadata(ctx context.Context, in *MetadataRequest, opts ...grpc.CallOption) (*google_protobuf.Empty, error)
	GetByAppID(ctx context.Context, in *GetByAppIDRequest, opts ...grpc.CallOption) (*Announcement, error)
	GetByAppEUI(ctx context.Context, in *GetByAppEUIRequest, opts ...grpc.CallOption) (*Announcement, error)
}

type discoveryClient struct {
	cc *grpc.ClientConn
}

func NewDiscoveryClient(cc *grpc.ClientConn) DiscoveryClient {
	return &discoveryClient{cc}
}

func (c *discoveryClient) Announce(ctx context.Context, in *Announcement, opts ...grpc.CallOption) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	err := grpc.Invoke(ctx, "/discovery.Discovery/Announce", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *discoveryClient) GetAll(ctx context.Context, in *GetServiceRequest, opts ...grpc.CallOption) (*AnnouncementsResponse, error) {
	out := new(AnnouncementsResponse)
	err := grpc.Invoke(ctx, "/discovery.Discovery/GetAll", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *discoveryClient) Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*Announcement, error) {
	out := new(Announcement)
	err := grpc.Invoke(ctx, "/discovery.Discovery/Get", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *discoveryClient) AddMetadata(ctx context.Context, in *MetadataRequest, opts ...grpc.CallOption) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	err := grpc.Invoke(ctx, "/discovery.Discovery/AddMetadata", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *discoveryClient) DeleteMetadata(ctx context.Context, in *MetadataRequest, opts ...grpc.CallOption) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	err := grpc.Invoke(ctx, "/discovery.Discovery/DeleteMetadata", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *discoveryClient) GetByAppID(ctx context.Context, in *GetByAppIDRequest, opts ...grpc.CallOption) (*Announcement, error) {
	out := new(Announcement)
	err := grpc.Invoke(ctx, "/discovery.Discovery/GetByAppID", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *discoveryClient) GetByAppEUI(ctx context.Context, in *GetByAppEUIRequest, opts ...grpc.CallOption) (*Announcement, error) {
	out := new(Announcement)
	err := grpc.Invoke(ctx, "/discovery.Discovery/GetByAppEUI", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Discovery service

type DiscoveryServer interface {
	// Announce a component to the Discovery server.
	// A call to `Announce` does not processes the `metadata` field, so you can safely leave this field empty.
	// Adding or removing Metadata should be done with the `AddMetadata` and `DeleteMetadata` methods.
	Announce(context.Context, *Announcement) (*google_protobuf.Empty, error)
	// Get all announcements for a specific service type
	GetAll(context.Context, *GetServiceRequest) (*AnnouncementsResponse, error)
	// Get a specific announcement
	Get(context.Context, *GetRequest) (*Announcement, error)
	// Add metadata to an announement
	AddMetadata(context.Context, *MetadataRequest) (*google_protobuf.Empty, error)
	// Delete metadata from an announcement
	DeleteMetadata(context.Context, *MetadataRequest) (*google_protobuf.Empty, error)
	GetByAppID(context.Context, *GetByAppIDRequest) (*Announcement, error)
	GetByAppEUI(context.Context, *GetByAppEUIRequest) (*Announcement, error)
}

func RegisterDiscoveryServer(s *grpc.Server, srv DiscoveryServer) {
	s.RegisterService(&_Discovery_serviceDesc, srv)
}

func _Discovery_Announce_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Announcement)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DiscoveryServer).Announce(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/discovery.Discovery/Announce",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DiscoveryServer).Announce(ctx, req.(*Announcement))
	}
	return interceptor(ctx, in, info, handler)
}

func _Discovery_GetAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DiscoveryServer).GetAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/discovery.Discovery/GetAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DiscoveryServer).GetAll(ctx, req.(*GetServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Discovery_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DiscoveryServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/discovery.Discovery/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DiscoveryServer).Get(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Discovery_AddMetadata_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MetadataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DiscoveryServer).AddMetadata(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/discovery.Discovery/AddMetadata",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DiscoveryServer).AddMetadata(ctx, req.(*MetadataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Discovery_DeleteMetadata_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MetadataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DiscoveryServer).DeleteMetadata(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/discovery.Discovery/DeleteMetadata",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DiscoveryServer).DeleteMetadata(ctx, req.(*MetadataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Discovery_GetByAppID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetByAppIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DiscoveryServer).GetByAppID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/discovery.Discovery/GetByAppID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DiscoveryServer).GetByAppID(ctx, req.(*GetByAppIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Discovery_GetByAppEUI_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetByAppEUIRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DiscoveryServer).GetByAppEUI(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/discovery.Discovery/GetByAppEUI",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DiscoveryServer).GetByAppEUI(ctx, req.(*GetByAppEUIRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Discovery_serviceDesc = grpc.ServiceDesc{
	ServiceName: "discovery.Discovery",
	HandlerType: (*DiscoveryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Announce",
			Handler:    _Discovery_Announce_Handler,
		},
		{
			MethodName: "GetAll",
			Handler:    _Discovery_GetAll_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _Discovery_Get_Handler,
		},
		{
			MethodName: "AddMetadata",
			Handler:    _Discovery_AddMetadata_Handler,
		},
		{
			MethodName: "DeleteMetadata",
			Handler:    _Discovery_DeleteMetadata_Handler,
		},
		{
			MethodName: "GetByAppID",
			Handler:    _Discovery_GetByAppID_Handler,
		},
		{
			MethodName: "GetByAppEUI",
			Handler:    _Discovery_GetByAppEUI_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "github.com/TheThingsNetwork/api/discovery/discovery.proto",
}

// Client API for DiscoveryManager service

type DiscoveryManagerClient interface {
}

type discoveryManagerClient struct {
	cc *grpc.ClientConn
}

func NewDiscoveryManagerClient(cc *grpc.ClientConn) DiscoveryManagerClient {
	return &discoveryManagerClient{cc}
}

// Server API for DiscoveryManager service

type DiscoveryManagerServer interface {
}

func RegisterDiscoveryManagerServer(s *grpc.Server, srv DiscoveryManagerServer) {
	s.RegisterService(&_DiscoveryManager_serviceDesc, srv)
}

var _DiscoveryManager_serviceDesc = grpc.ServiceDesc{
	ServiceName: "discovery.DiscoveryManager",
	HandlerType: (*DiscoveryManagerServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams:     []grpc.StreamDesc{},
	Metadata:    "github.com/TheThingsNetwork/api/discovery/discovery.proto",
}

func (m *Metadata) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Metadata) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Metadata != nil {
		nn1, err := m.Metadata.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn1
	}
	return i, nil
}

func (m *Metadata_DevAddrPrefix) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.DevAddrPrefix != nil {
		dAtA[i] = 0xa2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintDiscovery(dAtA, i, uint64(len(m.DevAddrPrefix)))
		i += copy(dAtA[i:], m.DevAddrPrefix)
	}
	return i, nil
}
func (m *Metadata_AppID) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0xf2
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintDiscovery(dAtA, i, uint64(len(m.AppID)))
	i += copy(dAtA[i:], m.AppID)
	return i, nil
}
func (m *Metadata_AppEUI) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.AppEUI != nil {
		dAtA[i] = 0xfa
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintDiscovery(dAtA, i, uint64(len(m.AppEUI)))
		i += copy(dAtA[i:], m.AppEUI)
	}
	return i, nil
}
func (m *Announcement) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Announcement) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ID) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintDiscovery(dAtA, i, uint64(len(m.ID)))
		i += copy(dAtA[i:], m.ID)
	}
	if len(m.ServiceName) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintDiscovery(dAtA, i, uint64(len(m.ServiceName)))
		i += copy(dAtA[i:], m.ServiceName)
	}
	if len(m.ServiceVersion) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintDiscovery(dAtA, i, uint64(len(m.ServiceVersion)))
		i += copy(dAtA[i:], m.ServiceVersion)
	}
	if len(m.Description) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintDiscovery(dAtA, i, uint64(len(m.Description)))
		i += copy(dAtA[i:], m.Description)
	}
	if len(m.Url) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintDiscovery(dAtA, i, uint64(len(m.Url)))
		i += copy(dAtA[i:], m.Url)
	}
	if m.Public {
		dAtA[i] = 0x30
		i++
		if m.Public {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.NetAddress) > 0 {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintDiscovery(dAtA, i, uint64(len(m.NetAddress)))
		i += copy(dAtA[i:], m.NetAddress)
	}
	if len(m.PublicKey) > 0 {
		dAtA[i] = 0x62
		i++
		i = encodeVarintDiscovery(dAtA, i, uint64(len(m.PublicKey)))
		i += copy(dAtA[i:], m.PublicKey)
	}
	if len(m.Certificate) > 0 {
		dAtA[i] = 0x6a
		i++
		i = encodeVarintDiscovery(dAtA, i, uint64(len(m.Certificate)))
		i += copy(dAtA[i:], m.Certificate)
	}
	if len(m.ApiAddress) > 0 {
		dAtA[i] = 0x72
		i++
		i = encodeVarintDiscovery(dAtA, i, uint64(len(m.ApiAddress)))
		i += copy(dAtA[i:], m.ApiAddress)
	}
	if len(m.MqttAddress) > 0 {
		dAtA[i] = 0x7a
		i++
		i = encodeVarintDiscovery(dAtA, i, uint64(len(m.MqttAddress)))
		i += copy(dAtA[i:], m.MqttAddress)
	}
	if len(m.AmqpAddress) > 0 {
		dAtA[i] = 0x82
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintDiscovery(dAtA, i, uint64(len(m.AmqpAddress)))
		i += copy(dAtA[i:], m.AmqpAddress)
	}
	if len(m.Metadata) > 0 {
		for _, msg := range m.Metadata {
			dAtA[i] = 0xb2
			i++
			dAtA[i] = 0x1
			i++
			i = encodeVarintDiscovery(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *GetServiceRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetServiceRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ServiceName) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintDiscovery(dAtA, i, uint64(len(m.ServiceName)))
		i += copy(dAtA[i:], m.ServiceName)
	}
	return i, nil
}

func (m *GetRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ID) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintDiscovery(dAtA, i, uint64(len(m.ID)))
		i += copy(dAtA[i:], m.ID)
	}
	if len(m.ServiceName) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintDiscovery(dAtA, i, uint64(len(m.ServiceName)))
		i += copy(dAtA[i:], m.ServiceName)
	}
	return i, nil
}

func (m *MetadataRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MetadataRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ID) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintDiscovery(dAtA, i, uint64(len(m.ID)))
		i += copy(dAtA[i:], m.ID)
	}
	if len(m.ServiceName) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintDiscovery(dAtA, i, uint64(len(m.ServiceName)))
		i += copy(dAtA[i:], m.ServiceName)
	}
	dAtA[i] = 0x62
	i++
	i = encodeVarintDiscovery(dAtA, i, uint64(m.Metadata.Size()))
	n2, err := m.Metadata.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n2
	return i, nil
}

func (m *AnnouncementsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AnnouncementsResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Services) > 0 {
		for _, msg := range m.Services {
			dAtA[i] = 0xa
			i++
			i = encodeVarintDiscovery(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *GetByAppIDRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetByAppIDRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.AppID) > 0 {
		dAtA[i] = 0xf2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintDiscovery(dAtA, i, uint64(len(m.AppID)))
		i += copy(dAtA[i:], m.AppID)
	}
	return i, nil
}

func (m *GetByAppEUIRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetByAppEUIRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xfa
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintDiscovery(dAtA, i, uint64(m.AppEUI.Size()))
	n3, err := m.AppEUI.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n3
	return i, nil
}

func encodeFixed64Discovery(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Discovery(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintDiscovery(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Metadata) Size() (n int) {
	var l int
	_ = l
	if m.Metadata != nil {
		n += m.Metadata.Size()
	}
	return n
}

func (m *Metadata_DevAddrPrefix) Size() (n int) {
	var l int
	_ = l
	if m.DevAddrPrefix != nil {
		l = len(m.DevAddrPrefix)
		n += 2 + l + sovDiscovery(uint64(l))
	}
	return n
}
func (m *Metadata_AppID) Size() (n int) {
	var l int
	_ = l
	l = len(m.AppID)
	n += 2 + l + sovDiscovery(uint64(l))
	return n
}
func (m *Metadata_AppEUI) Size() (n int) {
	var l int
	_ = l
	if m.AppEUI != nil {
		l = len(m.AppEUI)
		n += 2 + l + sovDiscovery(uint64(l))
	}
	return n
}
func (m *Announcement) Size() (n int) {
	var l int
	_ = l
	l = len(m.ID)
	if l > 0 {
		n += 1 + l + sovDiscovery(uint64(l))
	}
	l = len(m.ServiceName)
	if l > 0 {
		n += 1 + l + sovDiscovery(uint64(l))
	}
	l = len(m.ServiceVersion)
	if l > 0 {
		n += 1 + l + sovDiscovery(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovDiscovery(uint64(l))
	}
	l = len(m.Url)
	if l > 0 {
		n += 1 + l + sovDiscovery(uint64(l))
	}
	if m.Public {
		n += 2
	}
	l = len(m.NetAddress)
	if l > 0 {
		n += 1 + l + sovDiscovery(uint64(l))
	}
	l = len(m.PublicKey)
	if l > 0 {
		n += 1 + l + sovDiscovery(uint64(l))
	}
	l = len(m.Certificate)
	if l > 0 {
		n += 1 + l + sovDiscovery(uint64(l))
	}
	l = len(m.ApiAddress)
	if l > 0 {
		n += 1 + l + sovDiscovery(uint64(l))
	}
	l = len(m.MqttAddress)
	if l > 0 {
		n += 1 + l + sovDiscovery(uint64(l))
	}
	l = len(m.AmqpAddress)
	if l > 0 {
		n += 2 + l + sovDiscovery(uint64(l))
	}
	if len(m.Metadata) > 0 {
		for _, e := range m.Metadata {
			l = e.Size()
			n += 2 + l + sovDiscovery(uint64(l))
		}
	}
	return n
}

func (m *GetServiceRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.ServiceName)
	if l > 0 {
		n += 1 + l + sovDiscovery(uint64(l))
	}
	return n
}

func (m *GetRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.ID)
	if l > 0 {
		n += 1 + l + sovDiscovery(uint64(l))
	}
	l = len(m.ServiceName)
	if l > 0 {
		n += 1 + l + sovDiscovery(uint64(l))
	}
	return n
}

func (m *MetadataRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.ID)
	if l > 0 {
		n += 1 + l + sovDiscovery(uint64(l))
	}
	l = len(m.ServiceName)
	if l > 0 {
		n += 1 + l + sovDiscovery(uint64(l))
	}
	l = m.Metadata.Size()
	n += 1 + l + sovDiscovery(uint64(l))
	return n
}

func (m *AnnouncementsResponse) Size() (n int) {
	var l int
	_ = l
	if len(m.Services) > 0 {
		for _, e := range m.Services {
			l = e.Size()
			n += 1 + l + sovDiscovery(uint64(l))
		}
	}
	return n
}

func (m *GetByAppIDRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.AppID)
	if l > 0 {
		n += 2 + l + sovDiscovery(uint64(l))
	}
	return n
}

func (m *GetByAppEUIRequest) Size() (n int) {
	var l int
	_ = l
	l = m.AppEUI.Size()
	n += 2 + l + sovDiscovery(uint64(l))
	return n
}

func sovDiscovery(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozDiscovery(x uint64) (n int) {
	return sovDiscovery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *Metadata) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Metadata{`,
		`Metadata:` + fmt.Sprintf("%v", this.Metadata) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Metadata_DevAddrPrefix) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Metadata_DevAddrPrefix{`,
		`DevAddrPrefix:` + fmt.Sprintf("%v", this.DevAddrPrefix) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Metadata_AppID) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Metadata_AppID{`,
		`AppID:` + fmt.Sprintf("%v", this.AppID) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Metadata_AppEUI) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Metadata_AppEUI{`,
		`AppEUI:` + fmt.Sprintf("%v", this.AppEUI) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Announcement) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Announcement{`,
		`ID:` + fmt.Sprintf("%v", this.ID) + `,`,
		`ServiceName:` + fmt.Sprintf("%v", this.ServiceName) + `,`,
		`ServiceVersion:` + fmt.Sprintf("%v", this.ServiceVersion) + `,`,
		`Description:` + fmt.Sprintf("%v", this.Description) + `,`,
		`Url:` + fmt.Sprintf("%v", this.Url) + `,`,
		`Public:` + fmt.Sprintf("%v", this.Public) + `,`,
		`NetAddress:` + fmt.Sprintf("%v", this.NetAddress) + `,`,
		`PublicKey:` + fmt.Sprintf("%v", this.PublicKey) + `,`,
		`Certificate:` + fmt.Sprintf("%v", this.Certificate) + `,`,
		`ApiAddress:` + fmt.Sprintf("%v", this.ApiAddress) + `,`,
		`MqttAddress:` + fmt.Sprintf("%v", this.MqttAddress) + `,`,
		`AmqpAddress:` + fmt.Sprintf("%v", this.AmqpAddress) + `,`,
		`Metadata:` + strings.Replace(fmt.Sprintf("%v", this.Metadata), "Metadata", "Metadata", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetServiceRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetServiceRequest{`,
		`ServiceName:` + fmt.Sprintf("%v", this.ServiceName) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetRequest{`,
		`ID:` + fmt.Sprintf("%v", this.ID) + `,`,
		`ServiceName:` + fmt.Sprintf("%v", this.ServiceName) + `,`,
		`}`,
	}, "")
	return s
}
func (this *MetadataRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&MetadataRequest{`,
		`ID:` + fmt.Sprintf("%v", this.ID) + `,`,
		`ServiceName:` + fmt.Sprintf("%v", this.ServiceName) + `,`,
		`Metadata:` + strings.Replace(strings.Replace(this.Metadata.String(), "Metadata", "Metadata", 1), `&`, ``, 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AnnouncementsResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AnnouncementsResponse{`,
		`Services:` + strings.Replace(fmt.Sprintf("%v", this.Services), "Announcement", "Announcement", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetByAppIDRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetByAppIDRequest{`,
		`AppID:` + fmt.Sprintf("%v", this.AppID) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetByAppEUIRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetByAppEUIRequest{`,
		`AppEUI:` + fmt.Sprintf("%v", this.AppEUI) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringDiscovery(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *Metadata) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDiscovery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Metadata: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Metadata: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DevAddrPrefix", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDiscovery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDiscovery
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := make([]byte, postIndex-iNdEx)
			copy(v, dAtA[iNdEx:postIndex])
			m.Metadata = &Metadata_DevAddrPrefix{v}
			iNdEx = postIndex
		case 30:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDiscovery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDiscovery
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Metadata = &Metadata_AppID{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 31:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppEUI", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDiscovery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDiscovery
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := make([]byte, postIndex-iNdEx)
			copy(v, dAtA[iNdEx:postIndex])
			m.Metadata = &Metadata_AppEUI{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDiscovery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDiscovery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Announcement) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDiscovery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Announcement: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Announcement: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDiscovery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDiscovery
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServiceName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDiscovery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDiscovery
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServiceName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServiceVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDiscovery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDiscovery
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServiceVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDiscovery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDiscovery
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Url", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDiscovery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDiscovery
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Url = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Public", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDiscovery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Public = bool(v != 0)
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NetAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDiscovery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDiscovery
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NetAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PublicKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDiscovery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDiscovery
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PublicKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Certificate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDiscovery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDiscovery
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Certificate = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDiscovery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDiscovery
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ApiAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MqttAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDiscovery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDiscovery
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MqttAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AmqpAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDiscovery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDiscovery
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AmqpAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 22:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDiscovery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDiscovery
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Metadata = append(m.Metadata, &Metadata{})
			if err := m.Metadata[len(m.Metadata)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDiscovery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDiscovery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetServiceRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDiscovery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetServiceRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetServiceRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServiceName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDiscovery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDiscovery
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServiceName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDiscovery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDiscovery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDiscovery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDiscovery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDiscovery
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServiceName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDiscovery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDiscovery
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServiceName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDiscovery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDiscovery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MetadataRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDiscovery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MetadataRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MetadataRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDiscovery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDiscovery
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServiceName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDiscovery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDiscovery
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServiceName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDiscovery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDiscovery
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Metadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDiscovery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDiscovery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AnnouncementsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDiscovery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AnnouncementsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AnnouncementsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Services", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDiscovery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDiscovery
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Services = append(m.Services, &Announcement{})
			if err := m.Services[len(m.Services)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDiscovery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDiscovery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetByAppIDRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDiscovery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetByAppIDRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetByAppIDRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 30:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDiscovery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDiscovery
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AppID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDiscovery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDiscovery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetByAppEUIRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDiscovery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetByAppEUIRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetByAppEUIRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 31:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppEUI", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDiscovery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDiscovery
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.AppEUI.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDiscovery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDiscovery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipDiscovery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowDiscovery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDiscovery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDiscovery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthDiscovery
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowDiscovery
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipDiscovery(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthDiscovery = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowDiscovery   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("github.com/TheThingsNetwork/api/discovery/discovery.proto", fileDescriptorDiscovery)
}

var fileDescriptorDiscovery = []byte{
	// 887 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x55, 0x4f, 0x6f, 0x1b, 0x45,
	0x14, 0xf7, 0xda, 0x89, 0xb1, 0x9f, 0xdd, 0x24, 0x0c, 0x34, 0xac, 0x4c, 0x63, 0xbb, 0x2b, 0x2a,
	0x0c, 0x12, 0xbb, 0x22, 0x55, 0x91, 0x10, 0xa7, 0x75, 0x6d, 0x39, 0x16, 0xb4, 0x8a, 0x96, 0x96,
	0x03, 0x42, 0xb2, 0x26, 0xbb, 0x2f, 0xce, 0xa8, 0xf6, 0xee, 0x64, 0x77, 0x6c, 0xb0, 0xaa, 0x4a,
	0x08, 0x8e, 0x1c, 0xb9, 0xf3, 0x01, 0xb8, 0x71, 0xe3, 0x23, 0xf4, 0x88, 0xc4, 0x05, 0x71, 0xb0,
	0x60, 0xc5, 0x81, 0x23, 0x1f, 0x01, 0xed, 0xec, 0xdf, 0x26, 0x71, 0x85, 0xc8, 0x6d, 0xe7, 0xcd,
	0x6f, 0x7e, 0xef, 0xbd, 0xdf, 0xfb, 0xb3, 0xf0, 0xe1, 0x94, 0x89, 0xb3, 0xc5, 0x89, 0x6e, 0x7b,
	0x73, 0xe3, 0xd1, 0x19, 0x3e, 0x3a, 0x63, 0xee, 0x34, 0x78, 0x88, 0xe2, 0x4b, 0xcf, 0x7f, 0x62,
	0x50, 0xce, 0x0c, 0x87, 0x05, 0xb6, 0xb7, 0x44, 0x7f, 0x95, 0x7f, 0xe9, 0xdc, 0xf7, 0x84, 0x47,
	0xea, 0x99, 0xa1, 0xf5, 0xe6, 0xd4, 0xf3, 0xa6, 0x33, 0x34, 0xe4, 0xc5, 0xc9, 0xe2, 0xd4, 0xc0,
	0x39, 0x17, 0x09, 0xae, 0x75, 0x2b, 0xb9, 0x8c, 0xd8, 0xa8, 0xeb, 0x7a, 0x82, 0x0a, 0xe6, 0xb9,
	0x41, 0x72, 0xfb, 0x5e, 0x21, 0x80, 0xa9, 0x37, 0xf5, 0x72, 0x8e, 0xe8, 0x24, 0x0f, 0xf2, 0x2b,
	0x86, 0x6b, 0xdf, 0x29, 0x50, 0x7b, 0x80, 0x82, 0x3a, 0x54, 0x50, 0xd2, 0x83, 0x5d, 0x07, 0x97,
	0x13, 0xea, 0x38, 0xfe, 0x84, 0xfb, 0x78, 0xca, 0xbe, 0x52, 0x5f, 0xef, 0x2a, 0xbd, 0xe6, 0x51,
	0xc9, 0xba, 0xe1, 0xe0, 0xd2, 0x74, 0x1c, 0xff, 0x58, 0x9a, 0x89, 0x06, 0x55, 0xca, 0xf9, 0x84,
	0x39, 0x6a, 0xbb, 0xab, 0xf4, 0xea, 0xfd, 0x7a, 0xb8, 0xee, 0x6c, 0x9b, 0x9c, 0x8f, 0x07, 0x47,
	0x25, 0x6b, 0x9b, 0x72, 0x3e, 0x76, 0xc8, 0x1d, 0x78, 0x25, 0xc2, 0xe0, 0x82, 0xa9, 0x9d, 0x88,
	0xa5, 0x0f, 0xe1, 0xba, 0x53, 0x35, 0x39, 0x1f, 0x3e, 0x1e, 0x1f, 0x95, 0xac, 0x88, 0x60, 0xb8,
	0x60, 0x7d, 0x80, 0xda, 0x3c, 0x09, 0x40, 0xfb, 0xb9, 0x02, 0x4d, 0xd3, 0x75, 0xbd, 0x85, 0x6b,
	0xe3, 0x1c, 0x5d, 0x41, 0xf6, 0xa1, 0xcc, 0x1c, 0x55, 0x91, 0x3e, 0xaa, 0xe1, 0xba, 0x53, 0x1e,
	0x0f, 0xac, 0x32, 0x73, 0xc8, 0x6d, 0x68, 0x06, 0xe8, 0x2f, 0x99, 0x8d, 0x13, 0x97, 0xce, 0x51,
	0x2d, 0x47, 0x08, 0xab, 0x91, 0xd8, 0x1e, 0xd2, 0x39, 0x92, 0xb7, 0x61, 0x37, 0x85, 0x2c, 0xd1,
	0x0f, 0x98, 0xe7, 0xaa, 0x15, 0x89, 0xda, 0x49, 0xcc, 0x9f, 0xc5, 0x56, 0xd2, 0x85, 0x86, 0x83,
	0x81, 0xed, 0x33, 0x1e, 0xe9, 0xa8, 0x6e, 0xc5, 0x54, 0x05, 0x13, 0xd9, 0x83, 0xca, 0xc2, 0x9f,
	0xa9, 0xdb, 0xf2, 0x26, 0xfa, 0x24, 0xfb, 0x50, 0xe5, 0x8b, 0x93, 0x19, 0xb3, 0xd5, 0x6a, 0x57,
	0xe9, 0xd5, 0xac, 0xe4, 0x44, 0x3a, 0xd0, 0x70, 0x51, 0x48, 0x05, 0x31, 0x08, 0xd4, 0x86, 0x7c,
	0x01, 0x2e, 0x0a, 0x33, 0xb6, 0x90, 0x03, 0x80, 0x18, 0x3a, 0x79, 0x82, 0x2b, 0xb5, 0x29, 0xef,
	0xeb, 0xb1, 0xe5, 0x63, 0x5c, 0x45, 0xb1, 0xd8, 0xe8, 0x0b, 0x76, 0xca, 0x6c, 0x2a, 0x50, 0xbd,
	0x11, 0xc7, 0x52, 0x30, 0x45, 0x1e, 0x28, 0x67, 0x99, 0x87, 0x9d, 0xd8, 0x03, 0xe5, 0x2c, 0xf5,
	0x70, 0x1b, 0x9a, 0xf3, 0x73, 0x91, 0xc7, 0xb0, 0x1b, 0x73, 0x44, 0xb6, 0x02, 0x84, 0xce, 0xcf,
	0x79, 0x06, 0xd9, 0x8b, 0x21, 0x91, 0x2d, 0x85, 0x18, 0x79, 0x55, 0xd4, 0xfd, 0x6e, 0xa5, 0xd7,
	0x38, 0x7c, 0x4d, 0xcf, 0x1b, 0x36, 0xed, 0x18, 0x2b, 0x2f, 0xdd, 0x07, 0xf0, 0xea, 0x08, 0xc5,
	0xa7, 0xb1, 0xb4, 0x16, 0x9e, 0x2f, 0x30, 0x10, 0x97, 0xca, 0xa4, 0x5c, 0x2a, 0x93, 0x36, 0x02,
	0x18, 0xa1, 0x48, 0x1f, 0xfc, 0xff, 0x7a, 0x6b, 0xdf, 0x2a, 0xb0, 0x9b, 0xc5, 0x75, 0x6d, 0x3a,
	0x72, 0xaf, 0x20, 0x40, 0x54, 0xa6, 0xab, 0x05, 0xe8, 0x6f, 0x3d, 0x5f, 0x77, 0x4a, 0x05, 0x19,
	0x3e, 0x81, 0x9b, 0xc5, 0x06, 0x0e, 0x2c, 0x0c, 0xb8, 0xe7, 0x06, 0x48, 0xee, 0x42, 0x2d, 0xa1,
	0x0f, 0x54, 0x45, 0x0a, 0xfa, 0x46, 0x81, 0xaf, 0xf8, 0xc6, 0xca, 0x80, 0xda, 0x3d, 0x29, 0x6a,
	0x7f, 0x25, 0x27, 0x2b, 0x4d, 0xaa, 0xbb, 0x71, 0xf6, 0x92, 0xc9, 0xd3, 0x7c, 0x20, 0xe9, 0xb3,
	0xe1, 0xe3, 0x71, 0xfa, 0xee, 0x8b, 0x8b, 0xf3, 0x78, 0x3f, 0x8a, 0xfd, 0xf7, 0x75, 0xe7, 0xfd,
	0x97, 0xed, 0x2c, 0x21, 0x5c, 0xc3, 0xf6, 0x7c, 0x34, 0xc4, 0x8a, 0x63, 0xa0, 0xc7, 0x94, 0xf9,
	0x20, 0xa7, 0x63, 0x7c, 0xf8, 0xd3, 0x16, 0xd4, 0x07, 0x69, 0x3e, 0xe4, 0x23, 0xa8, 0xa5, 0x29,
	0x91, 0x4d, 0x79, 0xb6, 0xf6, 0xf5, 0x78, 0x93, 0xe9, 0xe9, 0x8a, 0xd2, 0x87, 0xd1, 0x9a, 0x23,
	0x1e, 0x54, 0x47, 0x28, 0xcc, 0xd9, 0x8c, 0xdc, 0x2a, 0x3c, 0xbd, 0xd4, 0x5d, 0xad, 0xee, 0x06,
	0xe2, 0x4c, 0x74, 0xed, 0xce, 0x37, 0xbf, 0xfe, 0xf5, 0x7d, 0xb9, 0x43, 0x0e, 0xe4, 0xa2, 0xcc,
	0xee, 0x8d, 0xa7, 0xc5, 0xea, 0x3f, 0x23, 0x14, 0x2a, 0x23, 0x14, 0xe4, 0xe6, 0x8b, 0xde, 0x52,
	0x37, 0x9b, 0xe2, 0xd7, 0xde, 0x95, 0xec, 0x6f, 0x11, 0xed, 0xa5, 0xec, 0xc6, 0x53, 0xe6, 0x3c,
	0x23, 0x26, 0x34, 0x4c, 0xc7, 0xc9, 0x36, 0x6d, 0xeb, 0xaa, 0x61, 0x4a, 0xfc, 0x6d, 0x92, 0x65,
	0x00, 0x3b, 0x03, 0x9c, 0xa1, 0xc0, 0x6b, 0xb1, 0xdc, 0x97, 0xf3, 0x96, 0xb4, 0xd4, 0x45, 0x81,
	0x5f, 0xec, 0xb4, 0x8d, 0x99, 0x93, 0x21, 0x34, 0x0a, 0x0d, 0x46, 0x0e, 0xae, 0x60, 0xc9, 0x1b,
	0x6f, 0x23, 0xcd, 0x21, 0x81, 0xbd, 0xac, 0x65, 0x1e, 0x50, 0x97, 0x4e, 0xd1, 0xef, 0xff, 0xa0,
	0xfc, 0xf6, 0x67, 0xbb, 0xf4, 0x75, 0xd8, 0x56, 0x9e, 0x87, 0x6d, 0xe5, 0x97, 0xb0, 0xad, 0xfc,
	0x11, 0xb6, 0x95, 0xbf, 0xc3, 0x76, 0xe9, 0x9f, 0xb0, 0xad, 0x80, 0xe6, 0xf9, 0x53, 0x5d, 0x9c,
	0xa1, 0x90, 0x4d, 0xea, 0xc6, 0x4d, 0xaa, 0x53, 0xce, 0x72, 0x1f, 0xfd, 0x9d, 0x8c, 0xf4, 0x38,
	0xca, 0xfd, 0x58, 0xf9, 0xfc, 0x9d, 0xff, 0xfc, 0x57, 0xfe, 0xb1, 0xdc, 0xbe, 0x08, 0xd0, 0xcd,
	0xe3, 0xb1, 0x9e, 0x51, 0x9e, 0x54, 0xa5, 0xa0, 0x77, 0xff, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x76,
	0x6b, 0x8b, 0x0d, 0xea, 0x07, 0x00, 0x00,
}
